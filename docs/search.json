[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Data Analysis",
    "section": "",
    "text": "Day 1 (2024-06-06): Introduction: Why code? Why reproducibility?\nDay 2 (2024-06-13): Git and GitHub\nDay 3 (2024-06-20): Basic usage of R and RStudio\nDay 4 (Media Day): Data loading and tidying with tidyverse\nDay 5 (Media Day): Joining data\nDay 6 (2024-07-08): Data visualization with ggplot2\nDay 7 (2024-07-11): Writing documents with Quarto\nDay 8 (2024-07-18): Quarto, part II"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Reproducible Data Analysis",
    "section": "",
    "text": "Day 1 (2024-06-06): Introduction: Why code? Why reproducibility?\nDay 2 (2024-06-13): Git and GitHub\nDay 3 (2024-06-20): Basic usage of R and RStudio\nDay 4 (Media Day): Data loading and tidying with tidyverse\nDay 5 (Media Day): Joining data\nDay 6 (2024-07-08): Data visualization with ggplot2\nDay 7 (2024-07-11): Writing documents with Quarto\nDay 8 (2024-07-18): Quarto, part II"
  },
  {
    "objectID": "index.html#recordings",
    "href": "index.html#recordings",
    "title": "Reproducible Data Analysis",
    "section": "Recordings",
    "text": "Recordings\n(video recordings are not available for all lectures)\n\nDay 4: Tidyverse\nDay 5: Joining data"
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "Reproducible Data Analysis",
    "section": "Materials",
    "text": "Materials\n\nDay 2: Git and GitHub\nDay 3: R and RStudio\nDay 4: Tidyverse, part I\nDay 5: Joining data (R for Data Science)\nDay 6: ggplot2\nFinal Report Example"
  },
  {
    "objectID": "index.html#important-deadlines",
    "href": "index.html#important-deadlines",
    "title": "Reproducible Data Analysis",
    "section": "Important Deadlines",
    "text": "Important Deadlines\n\n2024-06-19 11:59PM: Day 2 homework due\n2024-06-26 11:59PM: Day 3 homework due\n2024-07-03 11:59PM: Day 4 homework due\n2024-07-10 11:59PM: Day 5 homework due\n2024-07-24 11:59PM: Final paper due"
  },
  {
    "objectID": "index.html#office-hours",
    "href": "index.html#office-hours",
    "title": "Reproducible Data Analysis",
    "section": "Office Hours",
    "text": "Office Hours\nBy appointment, please send an email to joelnitta@chiba-u.jp"
  },
  {
    "objectID": "index.html#syllabus",
    "href": "index.html#syllabus",
    "title": "Reproducible Data Analysis",
    "section": "Syllabus",
    "text": "Syllabus\nSyllabus in English"
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "What is SSH?\n\nSecure Shell Protocol\nAuthentication method that uses public and private keys (like a padlock and key)\npublic key goes on GitHub\nprivate key stays on your computer\n\n\n(more detailed instructions available on the Software Carpentry website)\n\n\n\nEnter this in your terminal (it lists files in a folder):\n\nls -al ~/.ssh\n\nIf any of these files show up, you already have keys available that you can use to log into GitHub\n\nid_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub\n\n\n\n\nIf no such keys are already present, we need to create a private/public key pair.\nUse this command (the -t option specifies which type of algorithm to use and -C attaches a comment to the key):\n\nssh-keygen -t ed25519 -C \"you@youremail.com\"\n(use your own email address)\n\nIt will ask where you want you want to save the key. Use the default location.\nAdd a passphrase if you want (more secure, but you will have to enter it frequently).\nThen, you should see something like this:\n\nYour identification has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519\nYour public key has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519.pub\nThis tells you the location of your private and public keys\n\n\n\n\nFirst, get the content of the public key:\n\ncat ~/.ssh/id_ed25519.pub\nIt should include a long string of letters and numbers.\nCopy that exact line with command + c (mac) or control + c (Windows)\n\n\n\n\nGo to https://github.com, click on your profile icon in the top right corner to see the drop-down menu\nClick “Settings,” then “SSH and GPG keys”\nClick the “New SSH key” button on the right side\nEnter a name that you will remember (for example, “Joel’s Laptop”), paste your SSH key into the field, and click “Add SSH key”\n\n\n\n\n\nRun this command to check that it worked\n\nssh -T git@github.com\nNow, you can use git commands without providing a password every time"
  },
  {
    "objectID": "appendix.html#setup-github-authentication-ssh",
    "href": "appendix.html#setup-github-authentication-ssh",
    "title": "Appendix",
    "section": "",
    "text": "What is SSH?\n\nSecure Shell Protocol\nAuthentication method that uses public and private keys (like a padlock and key)\npublic key goes on GitHub\nprivate key stays on your computer\n\n\n(more detailed instructions available on the Software Carpentry website)\n\n\n\nEnter this in your terminal (it lists files in a folder):\n\nls -al ~/.ssh\n\nIf any of these files show up, you already have keys available that you can use to log into GitHub\n\nid_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub\n\n\n\n\nIf no such keys are already present, we need to create a private/public key pair.\nUse this command (the -t option specifies which type of algorithm to use and -C attaches a comment to the key):\n\nssh-keygen -t ed25519 -C \"you@youremail.com\"\n(use your own email address)\n\nIt will ask where you want you want to save the key. Use the default location.\nAdd a passphrase if you want (more secure, but you will have to enter it frequently).\nThen, you should see something like this:\n\nYour identification has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519\nYour public key has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519.pub\nThis tells you the location of your private and public keys\n\n\n\n\nFirst, get the content of the public key:\n\ncat ~/.ssh/id_ed25519.pub\nIt should include a long string of letters and numbers.\nCopy that exact line with command + c (mac) or control + c (Windows)\n\n\n\n\nGo to https://github.com, click on your profile icon in the top right corner to see the drop-down menu\nClick “Settings,” then “SSH and GPG keys”\nClick the “New SSH key” button on the right side\nEnter a name that you will remember (for example, “Joel’s Laptop”), paste your SSH key into the field, and click “Add SSH key”\n\n\n\n\n\nRun this command to check that it worked\n\nssh -T git@github.com\nNow, you can use git commands without providing a password every time"
  },
  {
    "objectID": "day6/index.html",
    "href": "day6/index.html",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "EDA stands for Exploratory Data Analysis\nEDA is the step of “getting to know” your data\nYou have already been doing some EDA by sorting the data and understanding what is in each column\n\n\n\n\n\n\n\nAnother very useful tool for EDA is data visualization\nToday we will learn how to visualize data using ggplot2\n\nggplot2 is included in the tidyverse set of packages\nThere are other ways to do this such as using plot(). But ggplot2 has more consistent syntax.\n\n\n\n\n\n\n\nImage by Allison Horst\n\n\n\n\n\n\n\nHow about this one?\n\n\n\n\n\n\n\n\nColors don’t correspond to contents (meat is green?)\n3D doesn’t have any meaning, only makes plot more complicated\nHard for humans to visually compare area\n\n\n\n\n\n\n\n\n\n\nSimple\nEasy to understand\nConveys a message\n\n\n\n\n\n\nPie chart  \n\nBar graph  \n\n\n\n\n\nhttps://clauswilke.com/dataviz/proportional-ink.html\n\n\nBar graphs are better than pie charts for comparing values!\n\n\n\n\n\n\nGrammar of Graphics: all plots share a common “grammar”\n\nInput data\nAesthetic mapping: How to represent the data visually\n\n\naesthetic = 美的, mapping = 相当する. どんな美的な要素に相当するのかの指定\n\n\nGeometry: What shape to use for the plot\n\nRecommended Reading: ggplot2: Elegant Graphics for Data Analysis\n\n\n\n\n\n\n\n\n\nhttps://clauswilke.com/dataviz/aesthetic-mapping.html\n\n\n\n\nPie chart  \n\nBar graph  \n\n\n\nHow is population represented (“mapped”) in each plot?\nWhat is the shape (“geometry”) of each plot?\n\n\n\n\nPie chart  \n\nBar graph  \n\n\n\nHow is population mapped in each plot?\n\nMapped to area in pie chart, length in bar graph\n\nWhat is the geometry of each plot?\n\nCircle (“pie”) in pie chart, column (“bar”) in bar graph\n\n\n\n\n\n\nWe will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\nAlso create a file to write today’s code. You could call it data-viz-practice.R\n\n\n\n\n\nLet’s load the tidyverse package with library()\n\nNote that you don’t need to use quotation marks for the package name\nAlso load the scales package, which is for making plot labels\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\n\n\n\n\nUse the read_csv() function to load a spreadsheet as a dataframe\n\n\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")\n\n\n\n\n\nThis is a dataset of economic statistics from various countries over time, from https://gapminder.org\nThe meaning of some columns is obvious (country, continent, year), but not others\n\npop: Population\nlifeExp: Life expectancy (寿命)\ngdpPercap: GDP per capita (一人当たりの国内総生産)\n\n\n\n\n\n\nggplot(data = gapminder)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp))\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nWhat does this plot tell us?\n\n\n\n\n\n\nModify the code to show how life expectancy has changed over time\n\n\n\n\n\n\nIn the last challenge, we saw a general trend, but there could be more detail within certain groups, like continent or country\nLet’s use color to show the continent\nWhat is color in ggplot2?\n\nColor is an aesthetic mapping\n\n\n\n\n\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\nAll plots can be made using the same basic formula:\n\nggplot(data = INPUT-DATA, mapping = aes(MAPPING)) +\n  GEOMETRY\n\n\n\n\nSince data always comes first and mapping second, we can omit those names and make our code a little simpler:\n\nggplot(INPUT-DATA, aes(MAPPING)) +\n  GEOMETRY\n\n\nggplot(\n  gapminder, # DATA\n  aes( # MAPPING\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point() # GEOMETRY\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try representing the data with a different geometry (shape)\nThis time we will use lines (geom_line())\n\n\n\n\n\n\nggplot(\n  gapminder, # DATA\n  aes( # MAPPING\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_line() # GEOMETRY\n\n\n\n\n\n\n\n\n\nThat looks a little odd. What is the problem?\n\n\n\n\n\n\nLines connect points along the x-axis\nBut we only want to connect points within each country\nWe need to add another aesthic mapping for that, the group\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can add additional plot layers using the + sign\nFor example, lets add points on top of the lines\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nThe ggtitle() adds a title to a plot. Use ggtitle() as another layer to add a title to the last plot.\n\n\n\n\n\n\n\nEach layer modifies the plot, so you can build it gradually\nOther things layers can do:\n\nSet the plot theme\nChange the axes\nAdd labels\nand more!\n\n\n\n\n\n\n\n\n\n\nhttps://r.qcbs.ca/workshop03/book-en/\n\n\n\n\n\n\nSo far, we have been mapping aesthetics to variables in the data\nBut you can also simply assign the same value to a particular aesthetic (such as color)\nDo this by setting its value outside of mapping = aes()\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point(color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point(color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s go back to the life expectancy vs. GDP graph again:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDo you notice anything that makes this graph hard to read?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNearly all the points are crowded to the left, with only a few outliers on the right\n\n\n\nWe can make this easier to read by using a log-transformation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10(\n    labels = label_comma()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 can make multiple plots at once using facetting\nEach facet is a mini-plot of some portion of the dataset\n\nDefine the facet group with vars()\n\nLet’s try this for some countries in Asia\n\n\n\n\n\n\nFirst, subset the data just to some countries in Asia (for this example)\n\n\ngapminder_asia &lt;- filter(\n  gapminder,\n  country %in% c(\"Japan\", \"China\", \"Korea, Rep.\", \"Taiwan\"))\n\n\n\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you “publish” your plot (this could be including it in a report for a class), it needs to be clearly labeled\n\nWhoever is reading your report won’t know what “lifeExp” means\n\n\n\n\n\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you need to you can save your plot in R, and write it out as an image file\nUse the ggsave() function\n\n\n\n\n\n\ngapminder_asia_plot &lt;- ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )\n\n\n\n\n\nggsave(plot = gapminder_asia_plot, file = \"gapminder_asia.pdf\")\n\n\nYou can also save .jpg, .png, etc.\n\n\n\n\n\n\nThink about what you want your graph to show\nAesthetic mapping: How to represent the data visually\nGeometry: What shape to use for the plot\nBuild your plot using layers\nBasic recipe: ggplot(INPUT-DATA, aes(MAPPING)) + GEOMETRY"
  },
  {
    "objectID": "day6/index.html#what-is-eda",
    "href": "day6/index.html#what-is-eda",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "EDA stands for Exploratory Data Analysis\nEDA is the step of “getting to know” your data\nYou have already been doing some EDA by sorting the data and understanding what is in each column"
  },
  {
    "objectID": "day6/index.html#what-is-eda-1",
    "href": "day6/index.html#what-is-eda-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Another very useful tool for EDA is data visualization\nToday we will learn how to visualize data using ggplot2\n\nggplot2 is included in the tidyverse set of packages\nThere are other ways to do this such as using plot(). But ggplot2 has more consistent syntax.\n\n\n\n\n\n\n\nImage by Allison Horst"
  },
  {
    "objectID": "day6/index.html#what-makes-a-good-plot",
    "href": "day6/index.html#what-makes-a-good-plot",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "How about this one?"
  },
  {
    "objectID": "day6/index.html#problems-with-this-plot",
    "href": "day6/index.html#problems-with-this-plot",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Colors don’t correspond to contents (meat is green?)\n3D doesn’t have any meaning, only makes plot more complicated\nHard for humans to visually compare area"
  },
  {
    "objectID": "day6/index.html#what-makes-a-good-plot-1",
    "href": "day6/index.html#what-makes-a-good-plot-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Simple\nEasy to understand\nConveys a message"
  },
  {
    "objectID": "day6/index.html#what-makes-a-good-plot-2",
    "href": "day6/index.html#what-makes-a-good-plot-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Pie chart  \n\nBar graph  \n\n\n\n\n\nhttps://clauswilke.com/dataviz/proportional-ink.html\n\n\nBar graphs are better than pie charts for comparing values!"
  },
  {
    "objectID": "day6/index.html#ggplot2-approach-to-plotting",
    "href": "day6/index.html#ggplot2-approach-to-plotting",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Grammar of Graphics: all plots share a common “grammar”\n\nInput data\nAesthetic mapping: How to represent the data visually\n\n\naesthetic = 美的, mapping = 相当する. どんな美的な要素に相当するのかの指定\n\n\nGeometry: What shape to use for the plot\n\nRecommended Reading: ggplot2: Elegant Graphics for Data Analysis"
  },
  {
    "objectID": "day6/index.html#aesthetic-mappings",
    "href": "day6/index.html#aesthetic-mappings",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "https://clauswilke.com/dataviz/aesthetic-mapping.html\n\n\n\n\nPie chart  \n\nBar graph  \n\n\n\nHow is population represented (“mapped”) in each plot?\nWhat is the shape (“geometry”) of each plot?\n\n\n\n\nPie chart  \n\nBar graph  \n\n\n\nHow is population mapped in each plot?\n\nMapped to area in pie chart, length in bar graph\n\nWhat is the geometry of each plot?\n\nCircle (“pie”) in pie chart, column (“bar”) in bar graph"
  },
  {
    "objectID": "day6/index.html#reopen-your-project",
    "href": "day6/index.html#reopen-your-project",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "We will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\nAlso create a file to write today’s code. You could call it data-viz-practice.R"
  },
  {
    "objectID": "day6/index.html#load-tidyverse",
    "href": "day6/index.html#load-tidyverse",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Let’s load the tidyverse package with library()\n\nNote that you don’t need to use quotation marks for the package name\nAlso load the scales package, which is for making plot labels\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor"
  },
  {
    "objectID": "day6/index.html#load-data",
    "href": "day6/index.html#load-data",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Use the read_csv() function to load a spreadsheet as a dataframe\n\n\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")"
  },
  {
    "objectID": "day6/index.html#gapminder",
    "href": "day6/index.html#gapminder",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "This is a dataset of economic statistics from various countries over time, from https://gapminder.org\nThe meaning of some columns is obvious (country, continent, year), but not others\n\npop: Population\nlifeExp: Life expectancy (寿命)\ngdpPercap: GDP per capita (一人当たりの国内総生産)"
  },
  {
    "objectID": "day6/index.html#first-plot",
    "href": "day6/index.html#first-plot",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(data = gapminder)"
  },
  {
    "objectID": "day6/index.html#first-plot-1",
    "href": "day6/index.html#first-plot-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  data = gapminder,\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp))"
  },
  {
    "objectID": "day6/index.html#first-plot-2",
    "href": "day6/index.html#first-plot-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  data = gapminder,\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nWhat does this plot tell us?"
  },
  {
    "objectID": "day6/index.html#challenge",
    "href": "day6/index.html#challenge",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Modify the code to show how life expectancy has changed over time"
  },
  {
    "objectID": "day6/index.html#add-color",
    "href": "day6/index.html#add-color",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "In the last challenge, we saw a general trend, but there could be more detail within certain groups, like continent or country\nLet’s use color to show the continent\nWhat is color in ggplot2?\n\nColor is an aesthetic mapping"
  },
  {
    "objectID": "day6/index.html#original-plot",
    "href": "day6/index.html#original-plot",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#add-color-1",
    "href": "day6/index.html#add-color-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#add-color-2",
    "href": "day6/index.html#add-color-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#basic-recipe",
    "href": "day6/index.html#basic-recipe",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "All plots can be made using the same basic formula:\n\nggplot(data = INPUT-DATA, mapping = aes(MAPPING)) +\n  GEOMETRY"
  },
  {
    "objectID": "day6/index.html#basic-recipe-1",
    "href": "day6/index.html#basic-recipe-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Since data always comes first and mapping second, we can omit those names and make our code a little simpler:\n\nggplot(INPUT-DATA, aes(MAPPING)) +\n  GEOMETRY\n\n\nggplot(\n  gapminder, # DATA\n  aes( # MAPPING\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point() # GEOMETRY"
  },
  {
    "objectID": "day6/index.html#plotting-lines",
    "href": "day6/index.html#plotting-lines",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Let’s try representing the data with a different geometry (shape)\nThis time we will use lines (geom_line())"
  },
  {
    "objectID": "day6/index.html#plotting-lines-1",
    "href": "day6/index.html#plotting-lines-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder, # DATA\n  aes( # MAPPING\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_line() # GEOMETRY\n\n\n\n\n\n\n\n\n\nThat looks a little odd. What is the problem?"
  },
  {
    "objectID": "day6/index.html#plotting-lines-2",
    "href": "day6/index.html#plotting-lines-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Lines connect points along the x-axis\nBut we only want to connect points within each country\nWe need to add another aesthic mapping for that, the group"
  },
  {
    "objectID": "day6/index.html#plotting-lines-3",
    "href": "day6/index.html#plotting-lines-3",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#plotting-lines-4",
    "href": "day6/index.html#plotting-lines-4",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#plotting-lines-5",
    "href": "day6/index.html#plotting-lines-5",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#adding-layers-with",
    "href": "day6/index.html#adding-layers-with",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "We can add additional plot layers using the + sign\nFor example, lets add points on top of the lines"
  },
  {
    "objectID": "day6/index.html#adding-layers-with-1",
    "href": "day6/index.html#adding-layers-with-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#adding-layers-with-2",
    "href": "day6/index.html#adding-layers-with-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#adding-layers-with-3",
    "href": "day6/index.html#adding-layers-with-3",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#challenge-1",
    "href": "day6/index.html#challenge-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "The ggtitle() adds a title to a plot. Use ggtitle() as another layer to add a title to the last plot."
  },
  {
    "objectID": "day6/index.html#summary-adding-layers-with",
    "href": "day6/index.html#summary-adding-layers-with",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Each layer modifies the plot, so you can build it gradually\nOther things layers can do:\n\nSet the plot theme\nChange the axes\nAdd labels\nand more!\n\n\n\n\n\n\n\n\n\n\nhttps://r.qcbs.ca/workshop03/book-en/"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic",
    "href": "day6/index.html#modify-an-aesthetic",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "So far, we have been mapping aesthetics to variables in the data\nBut you can also simply assign the same value to a particular aesthetic (such as color)\nDo this by setting its value outside of mapping = aes()"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic-1",
    "href": "day6/index.html#modify-an-aesthetic-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic-2",
    "href": "day6/index.html#modify-an-aesthetic-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point(color = \"black\")"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic-3",
    "href": "day6/index.html#modify-an-aesthetic-3",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point(color = \"black\")"
  },
  {
    "objectID": "day6/index.html#transformations",
    "href": "day6/index.html#transformations",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Let’s go back to the life expectancy vs. GDP graph again:"
  },
  {
    "objectID": "day6/index.html#transformations-1",
    "href": "day6/index.html#transformations-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Do you notice anything that makes this graph hard to read?"
  },
  {
    "objectID": "day6/index.html#transformations-2",
    "href": "day6/index.html#transformations-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Nearly all the points are crowded to the left, with only a few outliers on the right\n\n\n\nWe can make this easier to read by using a log-transformation"
  },
  {
    "objectID": "day6/index.html#transformations-3",
    "href": "day6/index.html#transformations-3",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#transformations-4",
    "href": "day6/index.html#transformations-4",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()"
  },
  {
    "objectID": "day6/index.html#transformations-5",
    "href": "day6/index.html#transformations-5",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()"
  },
  {
    "objectID": "day6/index.html#transformations-6",
    "href": "day6/index.html#transformations-6",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10(\n    labels = label_comma()\n  )"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots",
    "href": "day6/index.html#multi-panel-plots",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot2 can make multiple plots at once using facetting\nEach facet is a mini-plot of some portion of the dataset\n\nDefine the facet group with vars()\n\nLet’s try this for some countries in Asia"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-1",
    "href": "day6/index.html#multi-panel-plots-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "First, subset the data just to some countries in Asia (for this example)\n\n\ngapminder_asia &lt;- filter(\n  gapminder,\n  country %in% c(\"Japan\", \"China\", \"Korea, Rep.\", \"Taiwan\"))"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-2",
    "href": "day6/index.html#multi-panel-plots-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-3",
    "href": "day6/index.html#multi-panel-plots-3",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-4",
    "href": "day6/index.html#multi-panel-plots-4",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))"
  },
  {
    "objectID": "day6/index.html#adjusting-labels",
    "href": "day6/index.html#adjusting-labels",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "When you “publish” your plot (this could be including it in a report for a class), it needs to be clearly labeled\n\nWhoever is reading your report won’t know what “lifeExp” means"
  },
  {
    "objectID": "day6/index.html#adjusting-labels-1",
    "href": "day6/index.html#adjusting-labels-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))"
  },
  {
    "objectID": "day6/index.html#adjusting-labels-2",
    "href": "day6/index.html#adjusting-labels-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )"
  },
  {
    "objectID": "day6/index.html#adjusting-labels-3",
    "href": "day6/index.html#adjusting-labels-3",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )"
  },
  {
    "objectID": "day6/index.html#saving-your-plot",
    "href": "day6/index.html#saving-your-plot",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "If you need to you can save your plot in R, and write it out as an image file\nUse the ggsave() function"
  },
  {
    "objectID": "day6/index.html#saving-your-plot-1",
    "href": "day6/index.html#saving-your-plot-1",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "gapminder_asia_plot &lt;- ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )"
  },
  {
    "objectID": "day6/index.html#saving-your-plot-2",
    "href": "day6/index.html#saving-your-plot-2",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "ggsave(plot = gapminder_asia_plot, file = \"gapminder_asia.pdf\")\n\n\nYou can also save .jpg, .png, etc."
  },
  {
    "objectID": "day6/index.html#summary",
    "href": "day6/index.html#summary",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "Think about what you want your graph to show\nAesthetic mapping: How to represent the data visually\nGeometry: What shape to use for the plot\nBuild your plot using layers\nBasic recipe: ggplot(INPUT-DATA, aes(MAPPING)) + GEOMETRY"
  },
  {
    "objectID": "day6/index.html#project-description",
    "href": "day6/index.html#project-description",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "Project Description",
    "text": "Project Description\n\nThe final project is to analyze a dataset, including at least two graphs\n\nUse Quarto to write the report (we will learn how to do this in the next two classes)"
  },
  {
    "objectID": "day6/index.html#dataset",
    "href": "day6/index.html#dataset",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "Dataset",
    "text": "Dataset\n\nYou will choose a dataset from the Tidy Tuesday project to analyze\n\nTidy Tuesday releases a dataset once a week to practice data analysis\nPlease browse the Tidy Tuesday repo to choose a dataset"
  },
  {
    "objectID": "day6/index.html#example-dataset",
    "href": "day6/index.html#example-dataset",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "Example Dataset",
    "text": "Example Dataset\n\nWorld’s Oldest People\nThe README file in the dataset explains how to load it into R"
  },
  {
    "objectID": "day6/index.html#preparing-your-report",
    "href": "day6/index.html#preparing-your-report",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "Preparing your report",
    "text": "Preparing your report\n\nYou will use quarto to prepare your report\n\nWe will learn more about quarto next week, so you don’t need to worry about it for now.\n\nStart looking at the datasets so you can choose one to analyze.\nStart analyzing the dataset and practice visualizing the data"
  },
  {
    "objectID": "day6/index.html#due-dates",
    "href": "day6/index.html#due-dates",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "Due dates",
    "text": "Due dates\n\nThe report (report.qmd) is due 2024-07-24 11:59PM"
  },
  {
    "objectID": "day6/index.html#attend-the-targets-workshop-on-july-17",
    "href": "day6/index.html#attend-the-targets-workshop-on-july-17",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "Attend the targets workshop on July 17",
    "text": "Attend the targets workshop on July 17\n\nThe targets R package helps you define workflows to run your analysis\nThis is good for reproducibilty because you only need to run one R command to reproduce the entire analysis"
  },
  {
    "objectID": "day6/index.html#workshop-details",
    "href": "day6/index.html#workshop-details",
    "title": "Day 6: Data visualization with ggplot2",
    "section": "Workshop details",
    "text": "Workshop details\n\nJuly 17 1:30 PM ~ 4:30 PM\nNishi Chiba Campus Library (Academic Link Center) “Kiwami” seminar room\nMaterials\n\nVideo in Japanese\nLesson in English"
  },
  {
    "objectID": "day7/index.html",
    "href": "day7/index.html",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Quarto is a computer program that allows you to generate documents in various formats with code\nWe will use it to generate MS Word documents with R\nIt can also generate PDF, HTML, and other output\nIt can also use other programming languages like Python\n\n\n\n\n\n\n\n\n\nPart of data analysis is communicating your results to an audience\nFor example, writing a final report for a class, or giving a presentation at work\n\n\n\n\n\n\n\n\n\n\n\nGenerating a report with code…\n\nhelps you avoid copy-and-paste errors\nensures that your results are a direct result of the data\nhelps you save time by re-using the code later\n\n\n\n\n\n\n\nQuarto comes installed with RStudio\nPlease update (re-install) RStudio if you haven’t done so recently\n\n\n\n\n\nWe will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\nNavigate there and click on gapminder-analysis.Rproj\n\n\n\n\n\nCreate a new Quarto file by clicking File &gt; New File &gt; Quarto Document…\nIn menu that appears, type \"Gapminder Analysis\" for the title and your name for the author\n\nLeave format as HTML (as it says, we can change it at any time later)\nIf “Use visual markdown editor” is checked, uncheck it\n\nRStudio will create a file. Save it as \"gapminder-report.qmd\" (.qmd is the file extension for Quarto files)\n\n\n\n\n\n\n\n\nLook at your new Quarto file. What do you notice that is different from the .R files we have been using so far?\nThere is normal text like “Quarto enables you to weave together content…” that does not appear in a comment\nThere are lines starting with two hashes (##)\nThere are lines like ```{r}\nWhat is going on here?\n\n\n\n\n\n\n\nA Quarto (.qmd) file is set up opposite to an R script\nNormal lines of text are not code (so they don’t need a # like a comment)\nR code is contained within lines starting with ```{r} and ending with ``` (called a “code chunk”)\n\n\n\n\n\n\n\nAnother important difference between normal .R files and .qmd files is that the latter produce documents\nThis is called “rendering”\nLet’s try that now: press the “Render” button in RStudio\n\n\n\n\n\n\n\n\n\nYou should see the rendered document (a web page, in this case) appear on the right side of RStudio (in the Files and Plots panel)\n\nalso, in the Files tab, notice the gapminder-report.html file\n\nNotice the formatting of the output: lines like ## Quarto appear as headers\nYou can also see the output of the code, like 1 + 1\n\n\n\n\n\n\n\n\n\nThe .qmd file is written in plain text (without formatting, similar to an .R file)\nWe can specify formatting in the output using Markdown syntax\n\nMarkdown is a very simple version of HTML\n\n\n\n\n\n\n\nAs you can see in the document, the hash symbol (#) is used to define headings, which appear larger than other text\n\n# Heading level 1 (biggest)\n## Heading level 2\n### Heading level 3…\n\nFor italics, wrap the text in *, like this *this* (renders like this)\nFor bold, wrap the text in **, like this **this** (renders like this)\n\n\n\n\n\n\n.qmd files are known as “Quarto Markdown” because they add Quarto’s features (the ability to include code chunks) to Markdown\nYou may have heard of “R Markdown,” which is the precursor to Quarto Markdown\n\nThere is generally no reason to use R Markdown instead of Quarto Markdown\nThey are very similar, so most things you read about R Markdown will apply to Quarto Markdown\n\n\n\n\n\n\n\n\nRStudio has a handy way for you to preview what the rendered text will look like\nRight now we are in “Source” mode, which means we are editing the plain text\nClick on the “Visual” mode button to switch to “Visual” mode\nNow it looks much more like the output on the right\n\nBut notice that we don’t see the results of running the code chunks\n\n\n\n\n\n\n\n\n\n\nI much prefer working with plain text, so we will switch back to “Source” mode\nBut it is a good idea to use “Visual” mode to check what your markdown formatting will look like\nThere are many guides online to learn more about writing Markdown\n\n\n\n\n\n\n\nWithin the code chunks, anything you type is treated just like an R script\n\nNormal text must be R code\nComments can be written with #\n\nThe idea is to conduct analysis in the code chunks, and directly show the output in the rendered document\n\n\n\n\n\n\nModify the first code chunk to load the tidyverse package, then read in the gapminder dataset like we did before\n\n\n\n\n\n\nNotice that when we render the document, the gapminder dataset is not loaded into our current R session\nThat is because rending takes place in a separate instance of R\nTo run the R code in a chunk in your current R session, press the green “play” button at the right-hand side of the chunk\n\n\n\n\n\n\n\n\n\nIn addition to code chunks, you can also mix short bits of R code within normal text by first writing a backtick (`) and the letter r, then the R code, then another backtick\nFor example, we can show the number of rows in the dataset with `r nrow(gapminder)`\nThis is best used for describing facts about the data or results\n\n\n\n\n\n\n\nThe first set of lines at the top of the file are called the “YAML header”\n\nYAML stands for “Yet Another Markup Language”\n\nThe YAML header specifies settings for the document using variables\n\nYou can set the values of the values of the variables with a colon: variable: value, for example author: \"Joel Nitta\"\n\nThere are many other settings, but we won’t cover those today\n\n\n\n\n\n\n\nSimilar to the YAML header, we can also specify settings for the code chunks\nThis is done by first writing #|, then the setting like you would for the YAML header\nFor example, in a report, you usually only want to show the results of the code, not the code itself\nYou can do this with the following code chunk option: #| echo: false (remember echo echoes the code)\n\n\n\n\n\n\nOther useful code options\n\nmessage: false Hide code messages\nwarning: false Hide code warnings\n\n\n\n\n\n\nLet’s write another code chunk that outputs a plot. Change the chunk options to hide the code.\n\n\n\n\n\n\nSo far, we have been using HTML output because it is the default and shows up immediately when we press “render”\nBut your report should be submitted in Word (.docx) format.\nChange the output format to docx and render the document again\n\n\n\n\n\n\nYou should not commit the output of code\n\nIt clutters your git history, and is not necessary since you can always obtain the output by running the code\n\nYou can tell git to ignore files by adding them to .gitignore:\n\ngapminder-report.docx\ngapminder-report.html\ngapminder-report_files (files needed for HTML output)\n\n\n\n\n\n\nIf you know you want to ignore all docx files, you could instead write this:\n\n*.docx\n\n\n\n\n\n\n\nQuarto allows you to insert your analysis results directly into reports\nQuarto can generate multiple output formats\nThe way of writing code and plain text is reversed compared to R scripts\nPlease try to use Quarto for your class reports!"
  },
  {
    "objectID": "day7/index.html#what-is-quarto",
    "href": "day7/index.html#what-is-quarto",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Quarto is a computer program that allows you to generate documents in various formats with code\nWe will use it to generate MS Word documents with R\nIt can also generate PDF, HTML, and other output\nIt can also use other programming languages like Python"
  },
  {
    "objectID": "day7/index.html#why-use-quarto",
    "href": "day7/index.html#why-use-quarto",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Part of data analysis is communicating your results to an audience\nFor example, writing a final report for a class, or giving a presentation at work"
  },
  {
    "objectID": "day7/index.html#why-use-quarto-1",
    "href": "day7/index.html#why-use-quarto-1",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Generating a report with code…\n\nhelps you avoid copy-and-paste errors\nensures that your results are a direct result of the data\nhelps you save time by re-using the code later"
  },
  {
    "objectID": "day7/index.html#installing-quarto",
    "href": "day7/index.html#installing-quarto",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Quarto comes installed with RStudio\nPlease update (re-install) RStudio if you haven’t done so recently"
  },
  {
    "objectID": "day7/index.html#reopen-your-project",
    "href": "day7/index.html#reopen-your-project",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "We will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\nNavigate there and click on gapminder-analysis.Rproj"
  },
  {
    "objectID": "day7/index.html#create-a-quarto-file",
    "href": "day7/index.html#create-a-quarto-file",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Create a new Quarto file by clicking File &gt; New File &gt; Quarto Document…\nIn menu that appears, type \"Gapminder Analysis\" for the title and your name for the author\n\nLeave format as HTML (as it says, we can change it at any time later)\nIf “Use visual markdown editor” is checked, uncheck it\n\nRStudio will create a file. Save it as \"gapminder-report.qmd\" (.qmd is the file extension for Quarto files)"
  },
  {
    "objectID": "day7/index.html#how-a-quarto-file-is-set-up",
    "href": "day7/index.html#how-a-quarto-file-is-set-up",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Look at your new Quarto file. What do you notice that is different from the .R files we have been using so far?\nThere is normal text like “Quarto enables you to weave together content…” that does not appear in a comment\nThere are lines starting with two hashes (##)\nThere are lines like ```{r}\nWhat is going on here?"
  },
  {
    "objectID": "day7/index.html#how-a-quarto-file-is-set-up-1",
    "href": "day7/index.html#how-a-quarto-file-is-set-up-1",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "A Quarto (.qmd) file is set up opposite to an R script\nNormal lines of text are not code (so they don’t need a # like a comment)\nR code is contained within lines starting with ```{r} and ending with ``` (called a “code chunk”)"
  },
  {
    "objectID": "day7/index.html#rendering",
    "href": "day7/index.html#rendering",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Another important difference between normal .R files and .qmd files is that the latter produce documents\nThis is called “rendering”\nLet’s try that now: press the “Render” button in RStudio"
  },
  {
    "objectID": "day7/index.html#rendering-1",
    "href": "day7/index.html#rendering-1",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "You should see the rendered document (a web page, in this case) appear on the right side of RStudio (in the Files and Plots panel)\n\nalso, in the Files tab, notice the gapminder-report.html file\n\nNotice the formatting of the output: lines like ## Quarto appear as headers\nYou can also see the output of the code, like 1 + 1"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown",
    "href": "day7/index.html#formatting-with-markdown",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "The .qmd file is written in plain text (without formatting, similar to an .R file)\nWe can specify formatting in the output using Markdown syntax\n\nMarkdown is a very simple version of HTML"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-1",
    "href": "day7/index.html#formatting-with-markdown-1",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "As you can see in the document, the hash symbol (#) is used to define headings, which appear larger than other text\n\n# Heading level 1 (biggest)\n## Heading level 2\n### Heading level 3…\n\nFor italics, wrap the text in *, like this *this* (renders like this)\nFor bold, wrap the text in **, like this **this** (renders like this)"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-2",
    "href": "day7/index.html#formatting-with-markdown-2",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": ".qmd files are known as “Quarto Markdown” because they add Quarto’s features (the ability to include code chunks) to Markdown\nYou may have heard of “R Markdown,” which is the precursor to Quarto Markdown\n\nThere is generally no reason to use R Markdown instead of Quarto Markdown\nThey are very similar, so most things you read about R Markdown will apply to Quarto Markdown"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-3",
    "href": "day7/index.html#formatting-with-markdown-3",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "RStudio has a handy way for you to preview what the rendered text will look like\nRight now we are in “Source” mode, which means we are editing the plain text\nClick on the “Visual” mode button to switch to “Visual” mode\nNow it looks much more like the output on the right\n\nBut notice that we don’t see the results of running the code chunks"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-4",
    "href": "day7/index.html#formatting-with-markdown-4",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "I much prefer working with plain text, so we will switch back to “Source” mode\nBut it is a good idea to use “Visual” mode to check what your markdown formatting will look like\nThere are many guides online to learn more about writing Markdown"
  },
  {
    "objectID": "day7/index.html#about-the-code-chunks",
    "href": "day7/index.html#about-the-code-chunks",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Within the code chunks, anything you type is treated just like an R script\n\nNormal text must be R code\nComments can be written with #\n\nThe idea is to conduct analysis in the code chunks, and directly show the output in the rendered document"
  },
  {
    "objectID": "day7/index.html#challenge",
    "href": "day7/index.html#challenge",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Modify the first code chunk to load the tidyverse package, then read in the gapminder dataset like we did before"
  },
  {
    "objectID": "day7/index.html#about-the-code-chunks-1",
    "href": "day7/index.html#about-the-code-chunks-1",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Notice that when we render the document, the gapminder dataset is not loaded into our current R session\nThat is because rending takes place in a separate instance of R\nTo run the R code in a chunk in your current R session, press the green “play” button at the right-hand side of the chunk"
  },
  {
    "objectID": "day7/index.html#in-line-code",
    "href": "day7/index.html#in-line-code",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "In addition to code chunks, you can also mix short bits of R code within normal text by first writing a backtick (`) and the letter r, then the R code, then another backtick\nFor example, we can show the number of rows in the dataset with `r nrow(gapminder)`\nThis is best used for describing facts about the data or results"
  },
  {
    "objectID": "day7/index.html#about-the-yaml-header",
    "href": "day7/index.html#about-the-yaml-header",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "The first set of lines at the top of the file are called the “YAML header”\n\nYAML stands for “Yet Another Markup Language”\n\nThe YAML header specifies settings for the document using variables\n\nYou can set the values of the values of the variables with a colon: variable: value, for example author: \"Joel Nitta\"\n\nThere are many other settings, but we won’t cover those today"
  },
  {
    "objectID": "day7/index.html#code-chunk-options",
    "href": "day7/index.html#code-chunk-options",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Similar to the YAML header, we can also specify settings for the code chunks\nThis is done by first writing #|, then the setting like you would for the YAML header\nFor example, in a report, you usually only want to show the results of the code, not the code itself\nYou can do this with the following code chunk option: #| echo: false (remember echo echoes the code)"
  },
  {
    "objectID": "day7/index.html#code-chunk-options-1",
    "href": "day7/index.html#code-chunk-options-1",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Other useful code options\n\nmessage: false Hide code messages\nwarning: false Hide code warnings"
  },
  {
    "objectID": "day7/index.html#code-chunk-options-2",
    "href": "day7/index.html#code-chunk-options-2",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Let’s write another code chunk that outputs a plot. Change the chunk options to hide the code."
  },
  {
    "objectID": "day7/index.html#change-the-output-format",
    "href": "day7/index.html#change-the-output-format",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "So far, we have been using HTML output because it is the default and shows up immediately when we press “render”\nBut your report should be submitted in Word (.docx) format.\nChange the output format to docx and render the document again"
  },
  {
    "objectID": "day7/index.html#tell-git-to-ignore-output",
    "href": "day7/index.html#tell-git-to-ignore-output",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "You should not commit the output of code\n\nIt clutters your git history, and is not necessary since you can always obtain the output by running the code\n\nYou can tell git to ignore files by adding them to .gitignore:\n\ngapminder-report.docx\ngapminder-report.html\ngapminder-report_files (files needed for HTML output)"
  },
  {
    "objectID": "day7/index.html#tell-git-to-ignore-output-1",
    "href": "day7/index.html#tell-git-to-ignore-output-1",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "If you know you want to ignore all docx files, you could instead write this:\n\n*.docx"
  },
  {
    "objectID": "day7/index.html#summary",
    "href": "day7/index.html#summary",
    "title": "Day 7: Writing documents with Quarto",
    "section": "",
    "text": "Quarto allows you to insert your analysis results directly into reports\nQuarto can generate multiple output formats\nThe way of writing code and plain text is reversed compared to R scripts\nPlease try to use Quarto for your class reports!"
  },
  {
    "objectID": "day5/index.html",
    "href": "day5/index.html",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "So far, we have been working with a single dataframe\nBut sometimes, data comes to us as multiple dataframes\n\nThis is also known as a “database”\n\nWe will learn how to join data across dataframes\n\n\n\n\n\n\nHadely Wickham, R for Data Science (2e)\n\nChapter 19, “Joins”\n\n\n\n\n\n\n\n\n\nWe will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\n\nThis is actually a different dataset, so the name for the project isn’t ideal. Naming things is hard!\n\nCreate a new file in that project called joining-practice.R\n\nWe will save all the demonstration code in that script\n\n\n\n\nBe sure to follow along! (don’t just watch the video without running the code)\n\n\n\nWe will use data in the nycflights13 package to demonstrate joins, so install that first (remember you only need to install a package once, so don’t include this in your code)\n\n\ninstall.packages(\"nycflights13\")\n\n\n\nThe first thing to do in our script is to load the necessary packages:\n\n\n\n\njoining-practice.R\n\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)\n\n\n\n\n\n\n\nThe main dataframe in nycflights13 is called flights and includes data about flights that departed from New York in 2013\n\n\n\n\n\n\n\nhttps://www.express.co.uk/travel/articles/1440362/us-holidays-jetblue-flights-travel-low-cost-budget-heathrow-gatwick\n\n\n\n\nYou can read the helpfile with ?flights\nYou can view it by typing flights:\n\n\nflights\n\n# A tibble: 336,776 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 336,770 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\nThe package also includes several other related dataframes:\n\nweather: hourly meterological data for each airport\nplanes: construction information about each plane\nairports: airport names and locations\nairlines: translation between two letter carrier codes and airline names\n\nWe can read the helpfile for each one and view it in the same way as flights (for example, ?weather)\n\n\n\n\n\nDataframes often include a special column called the primary key\nThe values of the primary key are unique to each row. In other words, we can identify a row using the primary key.\nThe primary key is often the first column in the data, but not always\n\n\n\n\n\n\n\nLet’s look at an example. The primary key for planes is tailnum\n\nThe “tail number” is a unique code on the tail of each airplane\n\n\n\n\n\n\n\n\nhttps://www.quora.com/Is-there-a-general-name-for-the-identifying-numbers-on-the-sides-of-airplanes\n\n\n\n\nplanes\n\n# A tibble: 3,322 × 9\n  tailnum  year type               manufacturer model engines seats speed engine\n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;              &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n1 N10156   2004 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n2 N102UW   1998 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n3 N103US   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n4 N104UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n5 N10575   2002 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n6 N105UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,316 more rows\n\n\n\n\n\nNotice that the values of tailnum appear unique, while the values of other columns may be repeated.\nBut we should actually check this…\n\n\n\nWe can verify that the primary is indeed unique by counting how many times each tailnum occurs in planes:\n\nplanes |&gt;\n  count(tailnum)\n\n# A tibble: 3,322 × 2\n  tailnum     n\n  &lt;chr&gt;   &lt;int&gt;\n1 N10156      1\n2 N102UW      1\n3 N103US      1\n4 N104UW      1\n5 N10575      1\n6 N105UW      1\n# ℹ 3,316 more rows\n\n\n\n\n\nWhat we are really concerned with, is whether any tail number occurs more than once. Let’s check that with filter:\n\nplanes |&gt;\n  count(tailnum) |&gt;\n  filter(n &gt; 1)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: tailnum &lt;chr&gt;, n &lt;int&gt;\n\n\n. . .\nGood!\n\n\n\nAnother important thing to check is missing values. We can’t identify a row if its identifier is missing!\n\nplanes |&gt;\n  filter(is.na(tailnum))\n\n# A tibble: 0 × 9\n# ℹ 9 variables: tailnum &lt;chr&gt;, year &lt;int&gt;, type &lt;chr&gt;, manufacturer &lt;chr&gt;,\n#   model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n. . .\nAlso good!\n\n\n\n\nOK, so we know the primary key of planes is tailnum.\nWhat about the other dataframes?\n\n\n\n\nThe primary key of airports is its three-letter airport code, which is named in the the dataframe faa:\n\nairports\n\n# A tibble: 1,458 × 8\n  faa   name                             lat   lon   alt    tz dst   tzone      \n  &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;      \n1 04G   Lansdowne Airport               41.1 -80.6  1044    -5 A     America/Ne…\n2 06A   Moton Field Municipal Airport   32.5 -85.7   264    -6 A     America/Ch…\n3 06C   Schaumburg Regional             42.0 -88.1   801    -6 A     America/Ch…\n4 06N   Randall Airport                 41.4 -74.4   523    -5 A     America/Ne…\n5 09J   Jekyll Island Airport           31.1 -81.4    11    -5 A     America/Ne…\n6 0A9   Elizabethton Municipal Airport  36.4 -82.2  1593    -5 A     America/Ne…\n# ℹ 1,452 more rows\n\n\n\n\n\nBut (like I mentioned before) it’s a good idea to verify that faa is indeed a valid primary key! Can you do it?\n\n\n\n\nSometimes, no single column is provided as a key. Instead, multiple columns may be combined that uniquely identify each row.\nFor example, in the weather dataframe, the combination of origin and time_hour combined are unique.\n\n\n\nweather\n\n# A tibble: 26,115 × 15\n  origin  year month   day  hour  temp  dewp humid wind_dir wind_speed wind_gust\n  &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4         NA\n2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06        NA\n3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5         NA\n4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7         NA\n5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7         NA\n6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5         NA\n# ℹ 26,109 more rows\n# ℹ 4 more variables: precip &lt;dbl&gt;, pressure &lt;dbl&gt;, visib &lt;dbl&gt;,\n#   time_hour &lt;dttm&gt;\n\n\n\n\nThis is a bit easier to see if we rearrange the columns:\n\n\nweather |&gt;\n  relocate(time_hour, .after = 1)\n\n\n\n# A tibble: 26,115 × 15\n  origin time_hour            year month   day  hour  temp  dewp humid wind_dir\n  &lt;chr&gt;  &lt;dttm&gt;              &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1 EWR    2013-01-01 01:00:00  2013     1     1     1  39.0  26.1  59.4      270\n2 EWR    2013-01-01 02:00:00  2013     1     1     2  39.0  27.0  61.6      250\n3 EWR    2013-01-01 03:00:00  2013     1     1     3  39.0  28.0  64.4      240\n4 EWR    2013-01-01 04:00:00  2013     1     1     4  39.9  28.0  62.2      250\n5 EWR    2013-01-01 05:00:00  2013     1     1     5  39.0  28.0  64.4      260\n6 EWR    2013-01-01 06:00:00  2013     1     1     6  37.9  28.0  67.2      240\n# ℹ 26,109 more rows\n# ℹ 5 more variables: wind_speed &lt;dbl&gt;, wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;,\n#   pressure &lt;dbl&gt;, visib &lt;dbl&gt;\n\n\n\n\n\n\nWe can also verify a compound key, much like before.\n\nThis time, we need to add group_by() before counting:\n\n\n\nweather |&gt;\n  group_by(origin, time_hour) |&gt;\n  count() |&gt;\n  filter(n &gt; 1)\n\n# A tibble: 0 × 3\n# Groups:   origin, time_hour [0]\n# ℹ 3 variables: origin &lt;chr&gt;, time_hour &lt;dttm&gt;, n &lt;int&gt;\n\n\n. . .\nGood!\n\n\n\n\nThe reason we care about keys is that they can be used to link dataframes\n\n\n\nFor example, look at some of the data in flights\n\nNotice the column tailnum?\ntailnum is not unique in flights (it is not a key in that dataframe), but it can be linked to the planes dataframe\nThis allows us to find out more information about each plane in the flights data\n\n\n\n\n\n\nIn the context of planes, tailnum is the primary key\nIn the context of flights, tailnum is called a “foreign key” (it corresponds to a primary key in a different dataframe)\n\n\n\n\n\n\n\n\n\nVariables making up a primary key are colored grey, and are connected to their corresponding foreign keys with arrows.\n\n\n\n\nA primary key in one dataframe is a foreign key in another dataframe\nAlso notice that a given column may have different names in different dataframes (compare faa of the airports dataframe to origin of the flights dataframe)\n\n\n\n\n\nNow that we understand the theory behind joining (you need keys!), we can learn about joining functions. There are two main kinds:\n\nMutating joins add new columns to a dataframe (like the mutate() function)\nFiltering joins filter the rows of a dataframe (like the filter() function)\n\nWe will start with mutating joins.\n\n\n\n\n\nMutating joins add columns to the right side, so they may be hard to see if your dataframe already has many columns.\nLet’s make a smaller one called flights2 for demo purposes:\n\n\n\nflights2 &lt;- flights |&gt; \n  select(year, time_hour, origin, dest, tailnum, carrier)\n\nflights2\n\n# A tibble: 336,776 × 6\n   year time_hour           origin dest  tailnum carrier\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;  \n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA     \n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA     \n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA     \n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6     \n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL     \n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA     \n# ℹ 336,770 more rows\n\n\n\n\n\n\nThe most frequently used join\n\nAdds new columns to the dataframe you’re joining to\n\nFor example, add the airline carrier name to the flights data:\n\n\n\nflights2 |&gt;\n  left_join(airlines)\n\nJoining with `by = join_by(carrier)`\n\n\n# A tibble: 336,776 × 7\n   year time_hour           origin dest  tailnum carrier name                  \n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                 \n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n# ℹ 336,770 more rows\n\n\n\n\n\nLet’s say we want to know more about the weather on the day of each flight.\nHow can we join the weather data to the flight data?\n\n\n\n\nYou may have noticed a message like this in the output:\n\nJoining with `by = join_by(carrier)`\n\n\nThat is because we did not specify how to join the data (which keys are the primary and foreign keys), so it guessed.\nBy default, left_join() will join on column names that are in common between both dataframes.\n\n\n\nBut, the default settings do not always work well\nFor example:\n\n\nflights2 |&gt;\n  left_join(planes)\n\n\n\nJoining with `by = join_by(year, tailnum)`\n\n\n# A tibble: 336,776 × 13\n   year time_hour           origin dest  tailnum carrier type  manufacturer\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       \n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      &lt;NA&gt;  &lt;NA&gt;        \n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      &lt;NA&gt;  &lt;NA&gt;        \n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      &lt;NA&gt;  &lt;NA&gt;        \n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      &lt;NA&gt;  &lt;NA&gt;        \n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      &lt;NA&gt;  &lt;NA&gt;        \n# ℹ 336,770 more rows\n# ℹ 5 more variables: model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;,\n#   engine &lt;chr&gt;\n\n\nNA indicates that the data from planes are missing (could not be matched)… why are so many rows missing data??\n\n\nThe problem is that year has a different meaning in flights and planes\n\nplanes: year is the year the plane was built\nflights: year is the year of the flight\n\nWe can avoid this problem by specifying how to join the data with join_by()\n\n\n\nflights2 |&gt;\n  left_join(planes, join_by(tailnum))\n\n\n\n# A tibble: 336,776 × 14\n  year.x time_hour           origin dest  tailnum carrier year.y type           \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;          \n1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mul…\n2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mul…\n3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mul…\n4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mul…\n5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mul…\n6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mul…\n# ℹ 336,770 more rows\n# ℹ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\nNotice that the output has year.x and year.y, indicating the year column that came from each dataframe\n\n\nActually, join_by(tailnum) is short for join_by(tailnum == tailnum)\n\nIn this case, we are joining by the same column name on the left and the right side (both dataframes)\n\n\n\n\nflights2 |&gt;\n  left_join(planes, join_by(tailnum == tailnum))\n\n\n\n# A tibble: 336,776 × 14\n  year.x time_hour           origin dest  tailnum carrier year.y type           \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;          \n1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mul…\n2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mul…\n3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mul…\n4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mul…\n5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mul…\n6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mul…\n# ℹ 336,770 more rows\n# ℹ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\n\nBut it is useful to be able to specify different column names when joining.\nFor example, when we join the airports data\n\n\n\nJoin by the destination airport:\n\n\nflights2 |&gt;\n  left_join(airports, join_by(dest == faa))\n\n\n\n# A tibble: 336,776 × 13\n   year time_hour           origin dest  tailnum carrier name    lat   lon   alt\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Geor…  30.0 -95.3    97\n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      Geor…  30.0 -95.3    97\n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Miam…  25.8 -80.3     8\n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;   NA    NA      NA\n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Hart…  33.6 -84.4  1026\n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Chic…  42.0 -87.9   668\n# ℹ 336,770 more rows\n# ℹ 3 more variables: tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n\n\nJoin by the originating airport:\n\n\nflights2 |&gt;\n  left_join(airports, join_by(origin == faa))\n\n\n\n# A tibble: 336,776 × 13\n   year time_hour           origin dest  tailnum carrier name    lat   lon   alt\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Newa…  40.7 -74.2    18\n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      La G…  40.8 -73.9    22\n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      John…  40.6 -73.8    13\n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      John…  40.6 -73.8    13\n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      La G…  40.8 -73.9    22\n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Newa…  40.7 -74.2    18\n# ℹ 336,770 more rows\n# ℹ 3 more variables: tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n\n\n\n*_join(x, y)\n\nleft_join(x, y): keep all rows in x\nright_join(x, y): keep all rows in y\ninner_join(x, y): keep only rows in common between x and y\nfull_join(x, y): keep all rows in both x and y\n\nWe don’t have time to cover them in detail, but please try them out!\n\n\n\n\nFiltering joins are different from mutating joins in that they do not add new data\nInstead, we only them to filter data\n\n\n\n\n\nsemi_join(x, y): Keep all rows in x that have a match in y\n\n\nUse a semi-join to filter the airports dataset to show just the airports where the flights originated from (there are three airports in NYC):\n\nairports |&gt; \n  semi_join(flights2, join_by(faa == origin))\n\n\n\n# A tibble: 3 × 8\n  faa   name                  lat   lon   alt    tz dst   tzone           \n  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;           \n1 EWR   Newark Liberty Intl  40.7 -74.2    18    -5 A     America/New_York\n2 JFK   John F Kennedy Intl  40.6 -73.8    13    -5 A     America/New_York\n3 LGA   La Guardia           40.8 -73.9    22    -5 A     America/New_York\n\n\n\n\n\n\nanti_join(x, y): Keep all rows in x that don’t have a match in y\nUseful to check for implicit missing data\n\n\nFind rows that are missing from airports by looking for flights that don’t have a matching destination airport:\n\nflights2 |&gt; \n  anti_join(airports, join_by(dest == faa)) |&gt; \n  distinct(dest)\n\n\n\n# A tibble: 4 × 1\n  dest \n  &lt;chr&gt;\n1 BQN  \n2 SJU  \n3 STT  \n4 PSE  \n\n\n\n\n\n\nKeys are columns that we use to join dataframes\nMutating joins add columns to a dataframe\nFiltering joins filter the rows of a dataframe\n\nKnowing how to join data will greatly expand the kinds of data analysis you can do. Now you are not limited to a single dataframe, but have the ability to combine dataframes together as needed."
  },
  {
    "objectID": "day5/index.html#overview",
    "href": "day5/index.html#overview",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "So far, we have been working with a single dataframe\nBut sometimes, data comes to us as multiple dataframes\n\nThis is also known as a “database”\n\nWe will learn how to join data across dataframes"
  },
  {
    "objectID": "day5/index.html#recommended-reading",
    "href": "day5/index.html#recommended-reading",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Hadely Wickham, R for Data Science (2e)\n\nChapter 19, “Joins”"
  },
  {
    "objectID": "day5/index.html#set-up",
    "href": "day5/index.html#set-up",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "We will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\n\nThis is actually a different dataset, so the name for the project isn’t ideal. Naming things is hard!\n\nCreate a new file in that project called joining-practice.R\n\nWe will save all the demonstration code in that script\n\n\n\n\nBe sure to follow along! (don’t just watch the video without running the code)\n\n\n\nWe will use data in the nycflights13 package to demonstrate joins, so install that first (remember you only need to install a package once, so don’t include this in your code)\n\n\ninstall.packages(\"nycflights13\")\n\n\n\nThe first thing to do in our script is to load the necessary packages:\n\n\n\n\njoining-practice.R\n\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)"
  },
  {
    "objectID": "day5/index.html#about-the-nycflights13-data",
    "href": "day5/index.html#about-the-nycflights13-data",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "The main dataframe in nycflights13 is called flights and includes data about flights that departed from New York in 2013\n\n\n\n\n\n\n\nhttps://www.express.co.uk/travel/articles/1440362/us-holidays-jetblue-flights-travel-low-cost-budget-heathrow-gatwick"
  },
  {
    "objectID": "day5/index.html#about-the-nycflights13-data-1",
    "href": "day5/index.html#about-the-nycflights13-data-1",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "You can read the helpfile with ?flights\nYou can view it by typing flights:\n\n\nflights\n\n# A tibble: 336,776 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 336,770 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "day5/index.html#about-the-nycflights13-data-2",
    "href": "day5/index.html#about-the-nycflights13-data-2",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "The package also includes several other related dataframes:\n\nweather: hourly meterological data for each airport\nplanes: construction information about each plane\nairports: airport names and locations\nairlines: translation between two letter carrier codes and airline names\n\nWe can read the helpfile for each one and view it in the same way as flights (for example, ?weather)"
  },
  {
    "objectID": "day5/index.html#about-keys",
    "href": "day5/index.html#about-keys",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Dataframes often include a special column called the primary key\nThe values of the primary key are unique to each row. In other words, we can identify a row using the primary key.\nThe primary key is often the first column in the data, but not always"
  },
  {
    "objectID": "day5/index.html#about-keys-1",
    "href": "day5/index.html#about-keys-1",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Let’s look at an example. The primary key for planes is tailnum\n\nThe “tail number” is a unique code on the tail of each airplane\n\n\n\n\n\n\n\n\nhttps://www.quora.com/Is-there-a-general-name-for-the-identifying-numbers-on-the-sides-of-airplanes"
  },
  {
    "objectID": "day5/index.html#about-keys-planes",
    "href": "day5/index.html#about-keys-planes",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "planes\n\n# A tibble: 3,322 × 9\n  tailnum  year type               manufacturer model engines seats speed engine\n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;              &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n1 N10156   2004 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n2 N102UW   1998 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n3 N103US   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n4 N104UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n5 N10575   2002 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n6 N105UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,316 more rows"
  },
  {
    "objectID": "day5/index.html#about-keys-planes-1",
    "href": "day5/index.html#about-keys-planes-1",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Notice that the values of tailnum appear unique, while the values of other columns may be repeated.\nBut we should actually check this…"
  },
  {
    "objectID": "day5/index.html#verifying-the-primary-key",
    "href": "day5/index.html#verifying-the-primary-key",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "We can verify that the primary is indeed unique by counting how many times each tailnum occurs in planes:\n\nplanes |&gt;\n  count(tailnum)\n\n# A tibble: 3,322 × 2\n  tailnum     n\n  &lt;chr&gt;   &lt;int&gt;\n1 N10156      1\n2 N102UW      1\n3 N103US      1\n4 N104UW      1\n5 N10575      1\n6 N105UW      1\n# ℹ 3,316 more rows"
  },
  {
    "objectID": "day5/index.html#verifying-the-primary-key-1",
    "href": "day5/index.html#verifying-the-primary-key-1",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "What we are really concerned with, is whether any tail number occurs more than once. Let’s check that with filter:\n\nplanes |&gt;\n  count(tailnum) |&gt;\n  filter(n &gt; 1)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: tailnum &lt;chr&gt;, n &lt;int&gt;\n\n\n. . .\nGood!"
  },
  {
    "objectID": "day5/index.html#verifying-the-primary-key-2",
    "href": "day5/index.html#verifying-the-primary-key-2",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Another important thing to check is missing values. We can’t identify a row if its identifier is missing!\n\nplanes |&gt;\n  filter(is.na(tailnum))\n\n# A tibble: 0 × 9\n# ℹ 9 variables: tailnum &lt;chr&gt;, year &lt;int&gt;, type &lt;chr&gt;, manufacturer &lt;chr&gt;,\n#   model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n. . .\nAlso good!"
  },
  {
    "objectID": "day5/index.html#primary-keys-of-other-dataframes",
    "href": "day5/index.html#primary-keys-of-other-dataframes",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "OK, so we know the primary key of planes is tailnum.\nWhat about the other dataframes?"
  },
  {
    "objectID": "day5/index.html#airports",
    "href": "day5/index.html#airports",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "The primary key of airports is its three-letter airport code, which is named in the the dataframe faa:\n\nairports\n\n# A tibble: 1,458 × 8\n  faa   name                             lat   lon   alt    tz dst   tzone      \n  &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;      \n1 04G   Lansdowne Airport               41.1 -80.6  1044    -5 A     America/Ne…\n2 06A   Moton Field Municipal Airport   32.5 -85.7   264    -6 A     America/Ch…\n3 06C   Schaumburg Regional             42.0 -88.1   801    -6 A     America/Ch…\n4 06N   Randall Airport                 41.4 -74.4   523    -5 A     America/Ne…\n5 09J   Jekyll Island Airport           31.1 -81.4    11    -5 A     America/Ne…\n6 0A9   Elizabethton Municipal Airport  36.4 -82.2  1593    -5 A     America/Ne…\n# ℹ 1,452 more rows"
  },
  {
    "objectID": "day5/index.html#challenge-check-the-key",
    "href": "day5/index.html#challenge-check-the-key",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "But (like I mentioned before) it’s a good idea to verify that faa is indeed a valid primary key! Can you do it?"
  },
  {
    "objectID": "day5/index.html#compound-keys",
    "href": "day5/index.html#compound-keys",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Sometimes, no single column is provided as a key. Instead, multiple columns may be combined that uniquely identify each row.\nFor example, in the weather dataframe, the combination of origin and time_hour combined are unique.\n\n\n\nweather\n\n# A tibble: 26,115 × 15\n  origin  year month   day  hour  temp  dewp humid wind_dir wind_speed wind_gust\n  &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4         NA\n2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06        NA\n3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5         NA\n4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7         NA\n5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7         NA\n6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5         NA\n# ℹ 26,109 more rows\n# ℹ 4 more variables: precip &lt;dbl&gt;, pressure &lt;dbl&gt;, visib &lt;dbl&gt;,\n#   time_hour &lt;dttm&gt;\n\n\n\n\nThis is a bit easier to see if we rearrange the columns:\n\n\nweather |&gt;\n  relocate(time_hour, .after = 1)\n\n\n\n# A tibble: 26,115 × 15\n  origin time_hour            year month   day  hour  temp  dewp humid wind_dir\n  &lt;chr&gt;  &lt;dttm&gt;              &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1 EWR    2013-01-01 01:00:00  2013     1     1     1  39.0  26.1  59.4      270\n2 EWR    2013-01-01 02:00:00  2013     1     1     2  39.0  27.0  61.6      250\n3 EWR    2013-01-01 03:00:00  2013     1     1     3  39.0  28.0  64.4      240\n4 EWR    2013-01-01 04:00:00  2013     1     1     4  39.9  28.0  62.2      250\n5 EWR    2013-01-01 05:00:00  2013     1     1     5  39.0  28.0  64.4      260\n6 EWR    2013-01-01 06:00:00  2013     1     1     6  37.9  28.0  67.2      240\n# ℹ 26,109 more rows\n# ℹ 5 more variables: wind_speed &lt;dbl&gt;, wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;,\n#   pressure &lt;dbl&gt;, visib &lt;dbl&gt;"
  },
  {
    "objectID": "day5/index.html#verify-the-compound-key",
    "href": "day5/index.html#verify-the-compound-key",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "We can also verify a compound key, much like before.\n\nThis time, we need to add group_by() before counting:\n\n\n\nweather |&gt;\n  group_by(origin, time_hour) |&gt;\n  count() |&gt;\n  filter(n &gt; 1)\n\n# A tibble: 0 × 3\n# Groups:   origin, time_hour [0]\n# ℹ 3 variables: origin &lt;chr&gt;, time_hour &lt;dttm&gt;, n &lt;int&gt;\n\n\n. . .\nGood!"
  },
  {
    "objectID": "day5/index.html#keys-are-used-to-match-dataframes",
    "href": "day5/index.html#keys-are-used-to-match-dataframes",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "The reason we care about keys is that they can be used to link dataframes\n\n\n\nFor example, look at some of the data in flights\n\nNotice the column tailnum?\ntailnum is not unique in flights (it is not a key in that dataframe), but it can be linked to the planes dataframe\nThis allows us to find out more information about each plane in the flights data\n\n\n\n\n\n\nIn the context of planes, tailnum is the primary key\nIn the context of flights, tailnum is called a “foreign key” (it corresponds to a primary key in a different dataframe)"
  },
  {
    "objectID": "day5/index.html#summary-of-keys-in-nycflights13",
    "href": "day5/index.html#summary-of-keys-in-nycflights13",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Variables making up a primary key are colored grey, and are connected to their corresponding foreign keys with arrows."
  },
  {
    "objectID": "day5/index.html#summary-of-keys",
    "href": "day5/index.html#summary-of-keys",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "A primary key in one dataframe is a foreign key in another dataframe\nAlso notice that a given column may have different names in different dataframes (compare faa of the airports dataframe to origin of the flights dataframe)"
  },
  {
    "objectID": "day5/index.html#types-of-joins",
    "href": "day5/index.html#types-of-joins",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Now that we understand the theory behind joining (you need keys!), we can learn about joining functions. There are two main kinds:\n\nMutating joins add new columns to a dataframe (like the mutate() function)\nFiltering joins filter the rows of a dataframe (like the filter() function)\n\nWe will start with mutating joins."
  },
  {
    "objectID": "day5/index.html#make-a-smaller-demo-dataset",
    "href": "day5/index.html#make-a-smaller-demo-dataset",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Mutating joins add columns to the right side, so they may be hard to see if your dataframe already has many columns.\nLet’s make a smaller one called flights2 for demo purposes:\n\n\n\nflights2 &lt;- flights |&gt; \n  select(year, time_hour, origin, dest, tailnum, carrier)\n\nflights2\n\n# A tibble: 336,776 × 6\n   year time_hour           origin dest  tailnum carrier\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;  \n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA     \n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA     \n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA     \n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6     \n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL     \n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA     \n# ℹ 336,770 more rows"
  },
  {
    "objectID": "day5/index.html#left_join",
    "href": "day5/index.html#left_join",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "The most frequently used join\n\nAdds new columns to the dataframe you’re joining to\n\nFor example, add the airline carrier name to the flights data:\n\n\n\nflights2 |&gt;\n  left_join(airlines)\n\nJoining with `by = join_by(carrier)`\n\n\n# A tibble: 336,776 × 7\n   year time_hour           origin dest  tailnum carrier name                  \n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                 \n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n# ℹ 336,770 more rows"
  },
  {
    "objectID": "day5/index.html#challenge-join-the-weather-data",
    "href": "day5/index.html#challenge-join-the-weather-data",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Let’s say we want to know more about the weather on the day of each flight.\nHow can we join the weather data to the flight data?"
  },
  {
    "objectID": "day5/index.html#specifying-the-key",
    "href": "day5/index.html#specifying-the-key",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "You may have noticed a message like this in the output:\n\nJoining with `by = join_by(carrier)`\n\n\nThat is because we did not specify how to join the data (which keys are the primary and foreign keys), so it guessed.\nBy default, left_join() will join on column names that are in common between both dataframes.\n\n\n\nBut, the default settings do not always work well\nFor example:\n\n\nflights2 |&gt;\n  left_join(planes)\n\n\n\nJoining with `by = join_by(year, tailnum)`\n\n\n# A tibble: 336,776 × 13\n   year time_hour           origin dest  tailnum carrier type  manufacturer\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       \n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      &lt;NA&gt;  &lt;NA&gt;        \n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      &lt;NA&gt;  &lt;NA&gt;        \n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      &lt;NA&gt;  &lt;NA&gt;        \n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      &lt;NA&gt;  &lt;NA&gt;        \n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      &lt;NA&gt;  &lt;NA&gt;        \n# ℹ 336,770 more rows\n# ℹ 5 more variables: model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;,\n#   engine &lt;chr&gt;\n\n\nNA indicates that the data from planes are missing (could not be matched)… why are so many rows missing data??\n\n\nThe problem is that year has a different meaning in flights and planes\n\nplanes: year is the year the plane was built\nflights: year is the year of the flight\n\nWe can avoid this problem by specifying how to join the data with join_by()\n\n\n\nflights2 |&gt;\n  left_join(planes, join_by(tailnum))\n\n\n\n# A tibble: 336,776 × 14\n  year.x time_hour           origin dest  tailnum carrier year.y type           \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;          \n1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mul…\n2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mul…\n3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mul…\n4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mul…\n5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mul…\n6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mul…\n# ℹ 336,770 more rows\n# ℹ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\nNotice that the output has year.x and year.y, indicating the year column that came from each dataframe\n\n\nActually, join_by(tailnum) is short for join_by(tailnum == tailnum)\n\nIn this case, we are joining by the same column name on the left and the right side (both dataframes)\n\n\n\n\nflights2 |&gt;\n  left_join(planes, join_by(tailnum == tailnum))\n\n\n\n# A tibble: 336,776 × 14\n  year.x time_hour           origin dest  tailnum carrier year.y type           \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;          \n1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mul…\n2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mul…\n3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mul…\n4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mul…\n5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mul…\n6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mul…\n# ℹ 336,770 more rows\n# ℹ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\n\nBut it is useful to be able to specify different column names when joining.\nFor example, when we join the airports data\n\n\n\nJoin by the destination airport:\n\n\nflights2 |&gt;\n  left_join(airports, join_by(dest == faa))\n\n\n\n# A tibble: 336,776 × 13\n   year time_hour           origin dest  tailnum carrier name    lat   lon   alt\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Geor…  30.0 -95.3    97\n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      Geor…  30.0 -95.3    97\n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Miam…  25.8 -80.3     8\n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;   NA    NA      NA\n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Hart…  33.6 -84.4  1026\n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Chic…  42.0 -87.9   668\n# ℹ 336,770 more rows\n# ℹ 3 more variables: tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n\n\nJoin by the originating airport:\n\n\nflights2 |&gt;\n  left_join(airports, join_by(origin == faa))\n\n\n\n# A tibble: 336,776 × 13\n   year time_hour           origin dest  tailnum carrier name    lat   lon   alt\n  &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Newa…  40.7 -74.2    18\n2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      La G…  40.8 -73.9    22\n3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      John…  40.6 -73.8    13\n4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      John…  40.6 -73.8    13\n5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      La G…  40.8 -73.9    22\n6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Newa…  40.7 -74.2    18\n# ℹ 336,770 more rows\n# ℹ 3 more variables: tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;"
  },
  {
    "objectID": "day5/index.html#other-mutating-joins",
    "href": "day5/index.html#other-mutating-joins",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "*_join(x, y)\n\nleft_join(x, y): keep all rows in x\nright_join(x, y): keep all rows in y\ninner_join(x, y): keep only rows in common between x and y\nfull_join(x, y): keep all rows in both x and y\n\nWe don’t have time to cover them in detail, but please try them out!"
  },
  {
    "objectID": "day5/index.html#filtering-joins",
    "href": "day5/index.html#filtering-joins",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Filtering joins are different from mutating joins in that they do not add new data\nInstead, we only them to filter data"
  },
  {
    "objectID": "day5/index.html#semi_join",
    "href": "day5/index.html#semi_join",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "semi_join(x, y): Keep all rows in x that have a match in y\n\n\nUse a semi-join to filter the airports dataset to show just the airports where the flights originated from (there are three airports in NYC):\n\nairports |&gt; \n  semi_join(flights2, join_by(faa == origin))\n\n\n\n# A tibble: 3 × 8\n  faa   name                  lat   lon   alt    tz dst   tzone           \n  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;           \n1 EWR   Newark Liberty Intl  40.7 -74.2    18    -5 A     America/New_York\n2 JFK   John F Kennedy Intl  40.6 -73.8    13    -5 A     America/New_York\n3 LGA   La Guardia           40.8 -73.9    22    -5 A     America/New_York"
  },
  {
    "objectID": "day5/index.html#anti_join",
    "href": "day5/index.html#anti_join",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "anti_join(x, y): Keep all rows in x that don’t have a match in y\nUseful to check for implicit missing data\n\n\nFind rows that are missing from airports by looking for flights that don’t have a matching destination airport:\n\nflights2 |&gt; \n  anti_join(airports, join_by(dest == faa)) |&gt; \n  distinct(dest)\n\n\n\n# A tibble: 4 × 1\n  dest \n  &lt;chr&gt;\n1 BQN  \n2 SJU  \n3 STT  \n4 PSE"
  },
  {
    "objectID": "day5/index.html#summary",
    "href": "day5/index.html#summary",
    "title": "Day 5: Joining Data",
    "section": "",
    "text": "Keys are columns that we use to join dataframes\nMutating joins add columns to a dataframe\nFiltering joins filter the rows of a dataframe\n\nKnowing how to join data will greatly expand the kinds of data analysis you can do. Now you are not limited to a single dataframe, but have the ability to combine dataframes together as needed."
  },
  {
    "objectID": "day3/index.html",
    "href": "day3/index.html",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Programming makes your analysis reproducible, because you have an exact, written record of what you have done\n\n\n\n\n\nThe ability for other people (including your future self!) to reproduce your analysis results\n\nGives you confidence in your results\nMakes it easier to switch between projects\n\n\n\n\n\n\nR is free\nR is extensible\nR produces high-quality graphics\nR has a large and welcoming community\n\n\n\n\n\nR is the programming language\nRStudio is software to use R and write R code\nWe will always use R through RStudio! (don’t click on the icon for R)\n\n\n\n\n\n\n\nWe will start by navigating RStudio\nThere are four main panels\n\nSource (where you write your code)\nEnvironment (lists the objects in your R session)\nR Console (where you talk to R)\nFiles and Plots (shows the files in your project, and any plots you make)\n\n\n\n\n\n\n\n\n\n\nAn R Project is a folder that contains all the files you need for a particular data analysis project\n\nBasically the same thing as a repo (if you are using git)\n\nProjects help organize code and files so we don’t get lost\n\n\n\n\n\nSo far, we have only cloned projects from GitHub\nToday you will create a new project on your computer\n\n\n\n\n\nIn RStudio, click File ➡︎ New Project ➡︎ New Directory ➡︎ New Project (again)\n\nEnter the name of the project (folder) and where to put it\nI recommend putting it somewhere easy to find\n\nLet’s put call this project day03-practice and put it in the data-analysis-course folder on the Desktop\nClick “Create a git repository”, since we are using git\n\n\n\n\n\n\n\nRStudio will restart, and you will see in the File pane that we are located in the new project\nRStudio has created two files automatically, day03-practice.Rproj and .gitignore\n\nCommit these files with the commit message “Initial commit” (or whatever you want, but that is often used as a first commit message for a new project)\n\nNow we are ready to start using R!\n\n\n\n\n\n\n\nYou can execute R code to calculate numbers directly in the console by typing the calculation then pressing “Enter”\nTry something like this:\n\n\n2 + 2\n\n[1] 4\n\n\n\n\n\n\n5 * 10\n\n[1] 50\n\n2 / 3\n\n[1] 0.6666667\n\n(2 + 1)^2\n\n[1] 9\n\n\nCongratulations! You are now an R programmer!\n\n\n\n\nR can do much more than act like a calculator\nOne very useful thing is the ability to store values in variables, often called “objects” in R\nWe assign values to objects using the arrow symbol: &lt;-\n\n\nx &lt;- 2 + 2\n\n. . .\nHowever, R does not show you the value of x when you assign it\n\n\n\nTo check the value of x, type x in the console and press “Enter”\n\nx\n\n[1] 4\n\n\nThe value of x is also shown in the Environment panel (top-right panel)\n\n\n\nNow that we have saved a value to x, we can do additional calculations with it:\n\nx * 10\n\n[1] 40\n\n\n\n\n\nWe can then use that code to build a new object:\n\ny &lt;- x * 10\ny\n\n[1] 40\n\n\n\n\n\nBut notice that the objects don’t “react” to each other (in other words, assigning a value to one object does not change the values of other objects):\n\nx &lt;- 5\n# What is value of x?\nx\n\n[1] 5\n\n\n. . .\n\n# What is the value of y?\n# (remember, y &lt;- x * 10)\n\n. . .\n\ny\n\n[1] 40\n\n\n\n\n\n\nBefore continuing, we need to change some of the default settings in R\nI’ll also demonstrate how to use the .Rproj file to open a project\nQuit RStudio (we will open it again soon) by clicking File ➡︎ Quit Session\n\n\n\n\n\nOpen your project by navigating to data-analysis-course/day03-practice on your Desktop and clicking on day03-practice.Rproj.\n\n\n\n\n\n\n\nWhat do you see in RStudio when you open your project?\n\n\n\n\n\n\n\nNotice in the “Environment” pane (upper-right) that x and y are still there, even though the code that we typed last time is gone!\n\nIn other words, we don’t know how we got x and y\nThis is bad for reproducibility!\n\n\n\n\n\n\nThe contents of the R session (the “environment”) should only show what we have done using code during that session\n\nWe will change the default settings to avoid this behavior\n\n\n\n\n\n\nClick on Tools ➡︎ Global Options\n\nUncheck “Restore .RData into workspace at startup”\nSelect “Never” for “Save workspace to .RData on exit”\nClick “OK”\n\nYou can also delete the .RData file, which is where those data were stored\n\n\n\n\n\n\n\nSo far, we have only typed code directly into R\n\n. . .\n\nIt is much more useful to save your code in a file (called a “script”) so that you can run it again without typing everything all over again\n\n\n\n\n\nClick File ➡︎ New File ➡︎ R Script\nClick the disk icon or File ➡︎ Save As... to give your file a name (let’s say, “practice.R”) and save it.\n\n\n\n\n\nType the same code as before in your new file: x &lt;- 2 + 2 and hit the “Enter” key\n\n\n\nNotice that R does not run the code, since this is the file editing pane, not the R console\nWe need to send the code to the console (that is, send it to R)\n\n\n\n\n\n\nOne way to do this is to copy-and-paste it. But that is annoying.\nThe better way is to use the keyboard shortcut: control (Window) or command (Mac) + the enter key. Try it!\nYou can also either press the “Run” button in RStudio to run one line at a time, or the “Source” button to run all of the contents of your script\n\n\n\n\n\nIn addition to the actual code, it is very useful to include notes in your script so you can remember why you did things\nThese notes are called “comments”\nYou write a comment by starting with #. Anything after that will be ignored by R\n\n\n\n\n\n# This is a comment.\n# Let's use R like a calculator:\n22 / 7\n\n[1] 3.142857\n\n\n\n\n\n\n\nThe next step in our R journey is to learn about functions\nA function takes input, does something to it, and returns output\nFor example, let’s try using the round function, which rounds numbers\n\n\n\n\n\n\nThe input to the function is indicated by using parentheses, like this:\n\nfunction_name(input)\n\nTry it with round:\n\n\nround(3.142857)\n\n[1] 3\n\n\n\n\n\n\nIn addition to the input, functions also have various settings, which are called “arguments”\n\n. . .\n\nFor example, say we want to round to greater precision. We can use the digits argument to round to 3 digits.\n\n\nround(3.142857, digits = 3)\n\n[1] 3.143\n\n\n\n\n\n\nR will recognize the input and arguments by their order, so you don’t actually have to specify the argument name (this can save you some typing):\n\n\nround(3.142857, 3)\n\n[1] 3.143\n\n\n\nBut you need to remember the order yourself! If you aren’t sure, it’s always better to be explicit and include the argument name\n\n\n\n\n\nThis is all fine if you already know everything about what the function does, but nobody knows everything about R!\nTo see the settings (arguments) of a function, type a question mark followed by the name of the function, like this: ?round\nA description will appear in the help panel on the lower right.\n\n\n\n\n\nGoogling or asking ChatGPT* are also OK\n*but always be sure to check what ChatGPT tells you!\n\n\n\n\n\nSo far, we have been doing calculations on one value at a time. But we want to be able to calculate many things at once.\nWe can do that with vectors, which are a series of values\nYou make a vector with the c() function\n\n(from now on I will always refer to functions by their name plus the parentheses, since you always need them to actually use the function)\n\n\n\n\n\n\n# Create a vector of numbers\n# (a \"numeric vector\")\nnumbers &lt;- c(1, 2, 3, 4, 5)\nnumbers\n\n[1] 1 2 3 4 5\n\n\n\n\n\nWe can now do use the vector as input. Say we want to double each of the numbers:\n\nnumbers * 2\n\n[1]  2  4  6  8 10\n\n\n…or obtain their mean value:\n\nmean(numbers)\n\n[1] 3\n\n\n\nAlmost everything you do in R relies on objects, functions, and vectors\n\n\n\n\n\nVectors have a rule: each item (called an “element”) of the vector must be of the same data type\nThe basic data types in R include:\n\nNumeric (numbers, also confusingly called \"double\")\nCharacter (words)\nLogical (TRUE or FALSE)\n\n\n\n\n\n\n# A numeric vector:\nc(1, 2, 3)\n\n[1] 1 2 3\n\n# A character vector:\nc(\"banana\", \"orange\", \"apple\")\n\n[1] \"banana\" \"orange\" \"apple\" \n\n# A logical vector:\nc(TRUE, FALSE, TRUE)\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\nWe can check the type of the vector using the typeof() function.\n\nnums &lt;- c(1, 2, 3)\ntypeof(nums)\n\n[1] \"double\"\n\nfruit &lt;- c(\"banana\", \"orange\", \"apple\")\ntypeof(fruit)\n\n[1] \"character\"\n\ntf &lt;- c(TRUE, FALSE, TRUE)\ntypeof(tf)\n\n[1] \"logical\"\n\n\n\n\n\n\nWhat do you think happens if you try to combine data of different types?\nTry it!\n\n\nmixed &lt;- c(1, 2, \"banana\", \"orange\")\n\n\n\n\n\nmixed &lt;- c(1, 2, \"banana\", \"orange\")\nmixed\n\n[1] \"1\"      \"2\"      \"banana\" \"orange\"\n\ntypeof(mixed)\n\n[1] \"character\"\n\n\n. . .\n\nThe numeric data and the character data were all forced to be character (even though \"1\" may look like a number, the quotation marks show you that it is stored as a character)\n\n\n\n\n\nWe will finish by demonstrating a very useful thing in programming: comparing values\nThe comparison symbols are:\n\n&gt; greater than\n&lt; less than\n== equals (be careful! use two equals signs, not one)\n!= not equal\n\n\n\n\n\n\nThe comparisons will return a logical vector:\n\n\n# Here are some ages of people\nages &lt;- c(21, 8, 40)\n\n# Which of these people are adults?\nages &gt; 20\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\n\nThe reason that comparisons are so useful is that you can use them for subsetting, that is, to narrow down the data\nYou perform subsetting with square brackets, []\n\n\n\n\n\nHere we obtain the second value of the vector:\n\n\nages[2]\n\n[1] 8\n\n\n\n\n\n\nOr we could obtain the first and second values:\n\n\nages[c(1, 2)]\n\n[1] 21  8\n\n\n\n\n\n\nOr we can use a logical vector to indicate which values to keep:\n\n\nages[c(TRUE, TRUE, FALSE)]\n\n[1] 21  8\n\n\n\n\n\n\nHowever, you typically don’t type such logical vectors by hand\nIt is more useful to subset by using the output of a comparison\nFor example, let’s subset to only ages of adults. Recall how we set up that comparison:\n\n\nages &gt; 20\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\n\nNow, use that code to subset the values:\n\n\nages[ages &gt; 20]\n\n[1] 21 40\n\n\n. . .\n\nThis kind of subsetting is very helpful for working with data, which will do starting next week!\n\n\n\n\n\nGo to Moodle, click on Day 3 Homework and click on the link to accept the assignment\nClone the repo to your data-analysis-course on your Desktop, like we did last time\n\n\n\n\n\nEdit the day03_homework.R file to answer the questions.\nMake sure to run the code. Your R code should not have any errors!\nCommit your changes as you work on your homework, and push them to the remote\nSubmit the URL for the remote as your answer on Moodle\n\n\n\n\n\n\n\nI provide homework to give you a chance to think and learn\nFor basic R homework, ChatGPT can answer all of the questions instantly, and I can’t tell if you used it or not\nBut if you only use ChatGPT, you will not learn anything\nPlease think about why you are taking this class (and why you are paying money to attend Chiba U): do you just want a grade, or do you want to learn? It is up to you."
  },
  {
    "objectID": "day3/index.html#why-use-a-programming-language",
    "href": "day3/index.html#why-use-a-programming-language",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Programming makes your analysis reproducible, because you have an exact, written record of what you have done"
  },
  {
    "objectID": "day3/index.html#what-is-reproducibility",
    "href": "day3/index.html#what-is-reproducibility",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "The ability for other people (including your future self!) to reproduce your analysis results\n\nGives you confidence in your results\nMakes it easier to switch between projects"
  },
  {
    "objectID": "day3/index.html#why-learn-r",
    "href": "day3/index.html#why-learn-r",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "R is free\nR is extensible\nR produces high-quality graphics\nR has a large and welcoming community"
  },
  {
    "objectID": "day3/index.html#r-vs.-rstudio",
    "href": "day3/index.html#r-vs.-rstudio",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "R is the programming language\nRStudio is software to use R and write R code\nWe will always use R through RStudio! (don’t click on the icon for R)"
  },
  {
    "objectID": "day3/index.html#introduction-to-rstudio",
    "href": "day3/index.html#introduction-to-rstudio",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "We will start by navigating RStudio\nThere are four main panels\n\nSource (where you write your code)\nEnvironment (lists the objects in your R session)\nR Console (where you talk to R)\nFiles and Plots (shows the files in your project, and any plots you make)"
  },
  {
    "objectID": "day3/index.html#projects",
    "href": "day3/index.html#projects",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "An R Project is a folder that contains all the files you need for a particular data analysis project\n\nBasically the same thing as a repo (if you are using git)\n\nProjects help organize code and files so we don’t get lost"
  },
  {
    "objectID": "day3/index.html#create-a-new-project",
    "href": "day3/index.html#create-a-new-project",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "So far, we have only cloned projects from GitHub\nToday you will create a new project on your computer"
  },
  {
    "objectID": "day3/index.html#create-a-new-project-1",
    "href": "day3/index.html#create-a-new-project-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "In RStudio, click File ➡︎ New Project ➡︎ New Directory ➡︎ New Project (again)\n\nEnter the name of the project (folder) and where to put it\nI recommend putting it somewhere easy to find\n\nLet’s put call this project day03-practice and put it in the data-analysis-course folder on the Desktop\nClick “Create a git repository”, since we are using git"
  },
  {
    "objectID": "day3/index.html#create-a-new-project-2",
    "href": "day3/index.html#create-a-new-project-2",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "RStudio will restart, and you will see in the File pane that we are located in the new project\nRStudio has created two files automatically, day03-practice.Rproj and .gitignore\n\nCommit these files with the commit message “Initial commit” (or whatever you want, but that is often used as a first commit message for a new project)\n\nNow we are ready to start using R!"
  },
  {
    "objectID": "day3/index.html#r-as-a-calculator",
    "href": "day3/index.html#r-as-a-calculator",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "You can execute R code to calculate numbers directly in the console by typing the calculation then pressing “Enter”\nTry something like this:\n\n\n2 + 2\n\n[1] 4"
  },
  {
    "objectID": "day3/index.html#r-as-a-calculator-1",
    "href": "day3/index.html#r-as-a-calculator-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "5 * 10\n\n[1] 50\n\n2 / 3\n\n[1] 0.6666667\n\n(2 + 1)^2\n\n[1] 9\n\n\nCongratulations! You are now an R programmer!"
  },
  {
    "objectID": "day3/index.html#objects-variables",
    "href": "day3/index.html#objects-variables",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "R can do much more than act like a calculator\nOne very useful thing is the ability to store values in variables, often called “objects” in R\nWe assign values to objects using the arrow symbol: &lt;-\n\n\nx &lt;- 2 + 2\n\n. . .\nHowever, R does not show you the value of x when you assign it"
  },
  {
    "objectID": "day3/index.html#objects-variables-1",
    "href": "day3/index.html#objects-variables-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "To check the value of x, type x in the console and press “Enter”\n\nx\n\n[1] 4\n\n\nThe value of x is also shown in the Environment panel (top-right panel)"
  },
  {
    "objectID": "day3/index.html#objects-variables-2",
    "href": "day3/index.html#objects-variables-2",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Now that we have saved a value to x, we can do additional calculations with it:\n\nx * 10\n\n[1] 40"
  },
  {
    "objectID": "day3/index.html#objects-variables-3",
    "href": "day3/index.html#objects-variables-3",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "We can then use that code to build a new object:\n\ny &lt;- x * 10\ny\n\n[1] 40"
  },
  {
    "objectID": "day3/index.html#objects-variables-4",
    "href": "day3/index.html#objects-variables-4",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "But notice that the objects don’t “react” to each other (in other words, assigning a value to one object does not change the values of other objects):\n\nx &lt;- 5\n# What is value of x?\nx\n\n[1] 5\n\n\n. . .\n\n# What is the value of y?\n# (remember, y &lt;- x * 10)\n\n. . .\n\ny\n\n[1] 40"
  },
  {
    "objectID": "day3/index.html#workspace-settings-and-using-the-.rproj-file",
    "href": "day3/index.html#workspace-settings-and-using-the-.rproj-file",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Before continuing, we need to change some of the default settings in R\nI’ll also demonstrate how to use the .Rproj file to open a project\nQuit RStudio (we will open it again soon) by clicking File ➡︎ Quit Session"
  },
  {
    "objectID": "day3/index.html#use-the-.rproj-file-to-open-the-project",
    "href": "day3/index.html#use-the-.rproj-file-to-open-the-project",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Open your project by navigating to data-analysis-course/day03-practice on your Desktop and clicking on day03-practice.Rproj."
  },
  {
    "objectID": "day3/index.html#change-workspace-settings",
    "href": "day3/index.html#change-workspace-settings",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "What do you see in RStudio when you open your project?"
  },
  {
    "objectID": "day3/index.html#change-workspace-settings-1",
    "href": "day3/index.html#change-workspace-settings-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Notice in the “Environment” pane (upper-right) that x and y are still there, even though the code that we typed last time is gone!\n\nIn other words, we don’t know how we got x and y\nThis is bad for reproducibility!"
  },
  {
    "objectID": "day3/index.html#change-workspace-settings-2",
    "href": "day3/index.html#change-workspace-settings-2",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "The contents of the R session (the “environment”) should only show what we have done using code during that session\n\nWe will change the default settings to avoid this behavior"
  },
  {
    "objectID": "day3/index.html#change-workspace-settings-3",
    "href": "day3/index.html#change-workspace-settings-3",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Click on Tools ➡︎ Global Options\n\nUncheck “Restore .RData into workspace at startup”\nSelect “Never” for “Save workspace to .RData on exit”\nClick “OK”\n\nYou can also delete the .RData file, which is where those data were stored"
  },
  {
    "objectID": "day3/index.html#saving-code",
    "href": "day3/index.html#saving-code",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "So far, we have only typed code directly into R\n\n. . .\n\nIt is much more useful to save your code in a file (called a “script”) so that you can run it again without typing everything all over again"
  },
  {
    "objectID": "day3/index.html#saving-code-1",
    "href": "day3/index.html#saving-code-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Click File ➡︎ New File ➡︎ R Script\nClick the disk icon or File ➡︎ Save As... to give your file a name (let’s say, “practice.R”) and save it."
  },
  {
    "objectID": "day3/index.html#running-code-from-a-file",
    "href": "day3/index.html#running-code-from-a-file",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Type the same code as before in your new file: x &lt;- 2 + 2 and hit the “Enter” key\n\n\n\nNotice that R does not run the code, since this is the file editing pane, not the R console\nWe need to send the code to the console (that is, send it to R)"
  },
  {
    "objectID": "day3/index.html#running-code-from-a-file-1",
    "href": "day3/index.html#running-code-from-a-file-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "One way to do this is to copy-and-paste it. But that is annoying.\nThe better way is to use the keyboard shortcut: control (Window) or command (Mac) + the enter key. Try it!\nYou can also either press the “Run” button in RStudio to run one line at a time, or the “Source” button to run all of the contents of your script"
  },
  {
    "objectID": "day3/index.html#comments",
    "href": "day3/index.html#comments",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "In addition to the actual code, it is very useful to include notes in your script so you can remember why you did things\nThese notes are called “comments”\nYou write a comment by starting with #. Anything after that will be ignored by R"
  },
  {
    "objectID": "day3/index.html#comments-1",
    "href": "day3/index.html#comments-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "# This is a comment.\n# Let's use R like a calculator:\n22 / 7\n\n[1] 3.142857"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments",
    "href": "day3/index.html#functions-and-arguments",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "The next step in our R journey is to learn about functions\nA function takes input, does something to it, and returns output\nFor example, let’s try using the round function, which rounds numbers"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments-1",
    "href": "day3/index.html#functions-and-arguments-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "The input to the function is indicated by using parentheses, like this:\n\nfunction_name(input)\n\nTry it with round:\n\n\nround(3.142857)\n\n[1] 3"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments-2",
    "href": "day3/index.html#functions-and-arguments-2",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "In addition to the input, functions also have various settings, which are called “arguments”\n\n. . .\n\nFor example, say we want to round to greater precision. We can use the digits argument to round to 3 digits.\n\n\nround(3.142857, digits = 3)\n\n[1] 3.143"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments-3",
    "href": "day3/index.html#functions-and-arguments-3",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "R will recognize the input and arguments by their order, so you don’t actually have to specify the argument name (this can save you some typing):\n\n\nround(3.142857, 3)\n\n[1] 3.143\n\n\n\nBut you need to remember the order yourself! If you aren’t sure, it’s always better to be explicit and include the argument name"
  },
  {
    "objectID": "day3/index.html#getting-help",
    "href": "day3/index.html#getting-help",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "This is all fine if you already know everything about what the function does, but nobody knows everything about R!\nTo see the settings (arguments) of a function, type a question mark followed by the name of the function, like this: ?round\nA description will appear in the help panel on the lower right."
  },
  {
    "objectID": "day3/index.html#getting-help-1",
    "href": "day3/index.html#getting-help-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Googling or asking ChatGPT* are also OK\n*but always be sure to check what ChatGPT tells you!"
  },
  {
    "objectID": "day3/index.html#vectors",
    "href": "day3/index.html#vectors",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "So far, we have been doing calculations on one value at a time. But we want to be able to calculate many things at once.\nWe can do that with vectors, which are a series of values\nYou make a vector with the c() function\n\n(from now on I will always refer to functions by their name plus the parentheses, since you always need them to actually use the function)"
  },
  {
    "objectID": "day3/index.html#vectors-1",
    "href": "day3/index.html#vectors-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "# Create a vector of numbers\n# (a \"numeric vector\")\nnumbers &lt;- c(1, 2, 3, 4, 5)\nnumbers\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "day3/index.html#vectors-2",
    "href": "day3/index.html#vectors-2",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "We can now do use the vector as input. Say we want to double each of the numbers:\n\nnumbers * 2\n\n[1]  2  4  6  8 10\n\n\n…or obtain their mean value:\n\nmean(numbers)\n\n[1] 3\n\n\n\nAlmost everything you do in R relies on objects, functions, and vectors"
  },
  {
    "objectID": "day3/index.html#data-types",
    "href": "day3/index.html#data-types",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Vectors have a rule: each item (called an “element”) of the vector must be of the same data type\nThe basic data types in R include:\n\nNumeric (numbers, also confusingly called \"double\")\nCharacter (words)\nLogical (TRUE or FALSE)"
  },
  {
    "objectID": "day3/index.html#data-types-1",
    "href": "day3/index.html#data-types-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "# A numeric vector:\nc(1, 2, 3)\n\n[1] 1 2 3\n\n# A character vector:\nc(\"banana\", \"orange\", \"apple\")\n\n[1] \"banana\" \"orange\" \"apple\" \n\n# A logical vector:\nc(TRUE, FALSE, TRUE)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day3/index.html#data-types-2",
    "href": "day3/index.html#data-types-2",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "We can check the type of the vector using the typeof() function.\n\nnums &lt;- c(1, 2, 3)\ntypeof(nums)\n\n[1] \"double\"\n\nfruit &lt;- c(\"banana\", \"orange\", \"apple\")\ntypeof(fruit)\n\n[1] \"character\"\n\ntf &lt;- c(TRUE, FALSE, TRUE)\ntypeof(tf)\n\n[1] \"logical\""
  },
  {
    "objectID": "day3/index.html#data-types-3",
    "href": "day3/index.html#data-types-3",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "What do you think happens if you try to combine data of different types?\nTry it!\n\n\nmixed &lt;- c(1, 2, \"banana\", \"orange\")"
  },
  {
    "objectID": "day3/index.html#data-types-4",
    "href": "day3/index.html#data-types-4",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "mixed &lt;- c(1, 2, \"banana\", \"orange\")\nmixed\n\n[1] \"1\"      \"2\"      \"banana\" \"orange\"\n\ntypeof(mixed)\n\n[1] \"character\"\n\n\n. . .\n\nThe numeric data and the character data were all forced to be character (even though \"1\" may look like a number, the quotation marks show you that it is stored as a character)"
  },
  {
    "objectID": "day3/index.html#comparisons",
    "href": "day3/index.html#comparisons",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "We will finish by demonstrating a very useful thing in programming: comparing values\nThe comparison symbols are:\n\n&gt; greater than\n&lt; less than\n== equals (be careful! use two equals signs, not one)\n!= not equal"
  },
  {
    "objectID": "day3/index.html#comparisons-1",
    "href": "day3/index.html#comparisons-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "The comparisons will return a logical vector:\n\n\n# Here are some ages of people\nages &lt;- c(21, 8, 40)\n\n# Which of these people are adults?\nages &gt; 20\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day3/index.html#subsetting",
    "href": "day3/index.html#subsetting",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "The reason that comparisons are so useful is that you can use them for subsetting, that is, to narrow down the data\nYou perform subsetting with square brackets, []"
  },
  {
    "objectID": "day3/index.html#subsetting-1",
    "href": "day3/index.html#subsetting-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Here we obtain the second value of the vector:\n\n\nages[2]\n\n[1] 8"
  },
  {
    "objectID": "day3/index.html#subsetting-2",
    "href": "day3/index.html#subsetting-2",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Or we could obtain the first and second values:\n\n\nages[c(1, 2)]\n\n[1] 21  8"
  },
  {
    "objectID": "day3/index.html#subsetting-3",
    "href": "day3/index.html#subsetting-3",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Or we can use a logical vector to indicate which values to keep:\n\n\nages[c(TRUE, TRUE, FALSE)]\n\n[1] 21  8"
  },
  {
    "objectID": "day3/index.html#subsetting-4",
    "href": "day3/index.html#subsetting-4",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "However, you typically don’t type such logical vectors by hand\nIt is more useful to subset by using the output of a comparison\nFor example, let’s subset to only ages of adults. Recall how we set up that comparison:\n\n\nages &gt; 20\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day3/index.html#subsetting-5",
    "href": "day3/index.html#subsetting-5",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Now, use that code to subset the values:\n\n\nages[ages &gt; 20]\n\n[1] 21 40\n\n\n. . .\n\nThis kind of subsetting is very helpful for working with data, which will do starting next week!"
  },
  {
    "objectID": "day3/index.html#homework",
    "href": "day3/index.html#homework",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Go to Moodle, click on Day 3 Homework and click on the link to accept the assignment\nClone the repo to your data-analysis-course on your Desktop, like we did last time"
  },
  {
    "objectID": "day3/index.html#homework-1",
    "href": "day3/index.html#homework-1",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "Edit the day03_homework.R file to answer the questions.\nMake sure to run the code. Your R code should not have any errors!\nCommit your changes as you work on your homework, and push them to the remote\nSubmit the URL for the remote as your answer on Moodle"
  },
  {
    "objectID": "day3/index.html#homework-and-chatgpt",
    "href": "day3/index.html#homework-and-chatgpt",
    "title": "Day 3: Basic usage of R and RStudio",
    "section": "",
    "text": "I provide homework to give you a chance to think and learn\nFor basic R homework, ChatGPT can answer all of the questions instantly, and I can’t tell if you used it or not\nBut if you only use ChatGPT, you will not learn anything\nPlease think about why you are taking this class (and why you are paying money to attend Chiba U): do you just want a grade, or do you want to learn? It is up to you."
  },
  {
    "objectID": "day4/index.html",
    "href": "day4/index.html",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Recall that a vector is a series of values that are all the same type\n\n\n# A numeric vector:\nc(1, 2, 3)\n\n[1] 1 2 3\n\n# A character vector:\nc(\"banana\", \"orange\", \"apple\")\n\n[1] \"banana\" \"orange\" \"apple\" \n\n# A logical vector:\nc(TRUE, FALSE, TRUE)\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\n\nA dataframe is a collection of vectors\n\nbasically like a spreadsheet in Excel\n\n\n\n. . .\n\nToday we will learn to load and tidy (or “wrangle”) dataframes\n\n\n\n\n\nData often come to us in a form that is not suitable for analysis\nData tidying (or “wrangling”) is the process of re-formatting the data so it can be analyzed\n\n\n\n\n\nGetty Images\n\n\n\n\n\n\nImage by Allison Horst\n\n\n\n\n\n\nCreate a new project called gapminder-analysis in the data-analysis-course folder on your Desktop\n\nWe will use the “gapminder” dataset for the rest of the course\n\nInside that project, create a folder called data_raw to store raw data\n\nYou should never edit raw data directly (treat it as read-only)\n\nAlso create a file to write today’s code. You could call it data-tidying-practice.R\n\n\n\n\n\nDownload the gapminder.csv file from this link, and put it in data_raw\n\nhttps://www.dropbox.com/s/fdirlsnxlzy53qq/gapminder.csv?dl=0\n\n\n\n\n\n\nThe functions we have used so far are included in R (called “Base R”)\nBut sometimes we need to do something that is not available in Base R\nPackages are collections of code that extend the functionality of R\n\nThere are nearly 200,000 packages currently available!\n\n\n\n\n\n\nToday we will use the tidyverse set of packages for working with data\nInstall tidyverse using install.packages():\n\n\ninstall.packages(\"tidyverse\")\n\n\n\n\n\nThe install.packages() function downloads the package to your computer\n\nYou only need to do this once per package (or when you want to update the package)\n\nBut R isn’t able to use the package yet\nThe library() function tells R to load a package so that we can use it\n\n\n\n\n\nLet’s load the tidyverse package with library()\n\nNote that you don’t need to use quotation marks for the package name\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\ntidyverse actually includes multiple packages (dplyr, tidyr, readr, etc.)\n\nThese are all packages that are useful for loading and cleaning data\n\n\n\n\n\n\nUse the read_csv() function to load a spreadsheet as a dataframe\n\nThere are other functions for other file formats like .xls, .xlsx, .tsv, etc.\n\n\n\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")\n\n\n\n\n\nInspect the data just like any other object (variable) in R: type the name of the object into the console\n\n\ngapminder\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n# ℹ 1,698 more rows\n\n\n\n\n\n\nNotice that R tells us the number of rows and columns, as well as the data type of each column\n\nThe tidyverse package refers to dataframes as “tibbles”\n\n\n\n\n\n\nWhat do you think this dataset is about?\nWhat do you think the columns mean?\n\n\n\n\n\nThis is a dataset of economic statistics from various countries over time, from https://gapminder.org\nThe meaning of some columns is obvious (country, continent, year), but not others\n\npop: Population\nlifeExp: Life expectancy (寿命)\ngdpPercap: GDP per capita (一人当たりの国内総生産)\n\n\n\n\n\n\nFirst provide the name of the dataframe, then the column to sort by\n\n\narrange(gapminder, lifeExp)\n\n# A tibble: 1,704 × 6\n  country      continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Rwanda       Africa     1992    23.6 7290203      737.\n2 Afghanistan  Asia       1952    28.8 8425333      779.\n3 Gambia       Africa     1952    30    284320      485.\n4 Angola       Africa     1952    30.0 4232095     3521.\n5 Sierra Leone Africa     1952    30.3 2143249      880.\n6 Afghanistan  Asia       1957    30.3 9240934      821.\n# ℹ 1,698 more rows\n\n\n\n\n\n\nThe default setting is to sort from small to large\n\nTo sort in the reverse (descending) direction, use desc()\n\n\n\narrange(gapminder, desc(lifeExp))\n\n# A tibble: 1,704 × 6\n  country          continent  year lifeExp       pop gdpPercap\n  &lt;chr&gt;            &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Japan            Asia       2007    82.6 127467972    31656.\n2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n3 Japan            Asia       2002    82   127065841    28605.\n4 Iceland          Europe     2007    81.8    301931    36181.\n5 Switzerland      Europe     2007    81.7   7554661    37506.\n6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n# ℹ 1,698 more rows\n\n\n\n\n\n\nYou can sort on multiple columns\n\nTies will be sorted by the next column\n\n\n\narrange(gapminder, continent, lifeExp)\n\n# A tibble: 1,704 × 6\n  country      continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Rwanda       Africa     1992    23.6 7290203      737.\n2 Gambia       Africa     1952    30    284320      485.\n3 Angola       Africa     1952    30.0 4232095     3521.\n4 Sierra Leone Africa     1952    30.3 2143249      880.\n5 Mozambique   Africa     1952    31.3 6446316      469.\n6 Sierra Leone Africa     1957    31.6 2295678     1004.\n# ℹ 1,698 more rows\n\n\n\n\n\n\nSort the data by year, first going from smallest to biggest, then from biggest to smallest.\nWhat is the earliest year in the data?\nWhat is the latest year in the data?\n\n\n\n\n\nFirst provide the name of the dataframe, then the columns to select\n\n\nselect(gapminder, year, country, gdpPercap)\n\n# A tibble: 1,704 × 3\n   year country     gdpPercap\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n1  1952 Afghanistan      779.\n2  1957 Afghanistan      821.\n3  1962 Afghanistan      853.\n4  1967 Afghanistan      836.\n5  1972 Afghanistan      740.\n6  1977 Afghanistan      786.\n# ℹ 1,698 more rows\n\n\n\n\n\n\nNotice that although we have used several functions, gapminder is still the same:\n\n\ngapminder\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n# ℹ 1,698 more rows\n\n\n\n\n\n\nThis is because we have not saved any of the output\nTo do that, you need to create a new object with &lt;-\n\nYou can call the object whatever you want, but use a name that is easy to remember\n\n\n\ngapminder_gdp &lt;- select(gapminder, year, country, gdpPercap)\n\n\n\n\n\nSelect only year, country, and population, then sort the data by population\n\n\n\n\n\nDuring the last challenge, you needed to save the output of the select() function, then use it as input into the arrange() function\nThere is a simpler way to do this, called the “pipe”\nThe pipe is written like this: %&gt;%\n\nNewer versions of R also let you write it like this: |&gt;\n\n\n\n\n\n\nThe pipe takes the output from one function and passes it to the input of the next function\nYou can think of it as saying “and then”\n\nDo this and then do this, and then do this…\nDo this %&gt;% do this, %&gt;% do this…\n\n\n\n\n\n\nWe can even use the pipe just with one function:\n\nRead this as “start with gapminder and then select only year, country, and population”\n\n\n\ngapminder %&gt;% select(year, country, pop)\n\n# A tibble: 1,704 × 3\n   year country          pop\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1  1952 Afghanistan  8425333\n2  1957 Afghanistan  9240934\n3  1962 Afghanistan 10267083\n4  1967 Afghanistan 11537966\n5  1972 Afghanistan 13079460\n6  1977 Afghanistan 14880372\n# ℹ 1,698 more rows\n\n\n\n\n\n\nThis becomes very useful when we want to do multiple steps\n\nRead this as “start with gapminder, and then select only year, country, and population, and then arrange by year”\n\n\n\ngapminder %&gt;% select(year, country, pop) %&gt;% arrange(year)\n\n\n\n# A tibble: 1,704 × 3\n   year country         pop\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;\n1  1952 Afghanistan 8425333\n2  1952 Albania     1282697\n3  1952 Algeria     9279525\n4  1952 Angola      4232095\n# ℹ 1,700 more rows\n\n\n\n\n\n\nWe can make it easier to read by putting each step on its own line\n\n\ngapminder %&gt;%\n  select(year, country, pop) %&gt;%\n  arrange(year)\n\n# A tibble: 1,704 × 3\n   year country          pop\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1  1952 Afghanistan  8425333\n2  1952 Albania      1282697\n3  1952 Algeria      9279525\n4  1952 Angola       4232095\n5  1952 Argentina   17876956\n6  1952 Australia    8691212\n# ℹ 1,698 more rows\n\n\n\n\n\n\nThis way, you don’t have to save each intermediate step\nThis is a very useful way to manipulate data\nI will now use the pipe (%&gt;%) for the rest of the lesson\n\n\n\n\n\nUse the filter() function to only keep rows that meet a certain condition\nFor example, let’s only keep the data in Europe:\n\n\ngapminder %&gt;% filter(continent == \"Europe\")\n\n# A tibble: 360 × 6\n  country continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Albania Europe     1952    55.2 1282697     1601.\n2 Albania Europe     1957    59.3 1476505     1942.\n3 Albania Europe     1962    64.8 1728137     2313.\n4 Albania Europe     1967    66.2 1984060     2760.\n5 Albania Europe     1972    67.7 2263554     3313.\n6 Albania Europe     1977    68.9 2509048     3533.\n# ℹ 354 more rows\n\n\n\n\n\nUsing the pipe (%&gt;%) and the functions we have learned so far, filter the data to Asia, then select only the country, year, and population columns.\n\n\n\n\nFor example, we could change the units of population to millions of people:\n\n\ngapminder %&gt;% mutate(pop = pop/1000000)\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp   pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8.43      779.\n2 Afghanistan Asia       1957    30.3  9.24      821.\n3 Afghanistan Asia       1962    32.0 10.3       853.\n4 Afghanistan Asia       1967    34.0 11.5       836.\n5 Afghanistan Asia       1972    36.1 13.1       740.\n6 Afghanistan Asia       1977    38.4 14.9       786.\n# ℹ 1,698 more rows\n\n\n\n\n\n\nIf we provide a new column name, that column will be added\n\n\ngapminder %&gt;% mutate(pop_mil = pop/1000000)\n\n# A tibble: 1,704 × 7\n  country     continent  year lifeExp      pop gdpPercap pop_mil\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.    8.43\n2 Afghanistan Asia       1957    30.3  9240934      821.    9.24\n3 Afghanistan Asia       1962    32.0 10267083      853.   10.3 \n4 Afghanistan Asia       1967    34.0 11537966      836.   11.5 \n5 Afghanistan Asia       1972    36.1 13079460      740.   13.1 \n6 Afghanistan Asia       1977    38.4 14880372      786.   14.9 \n# ℹ 1,698 more rows\n\n\n\n\n\n\nThe gdpPercap column stands for Gross Domestic Product (GDP) per capita (per person)\nCalculate the total GDP using mutate()\n\nhint: You need to use both the pop and gdpPercap columns\n\n\n\n\n\n\nFor example, let’s calculate the overall mean population:\n\n\ngapminder %&gt;% summarize(mean_pop = mean(pop))\n\n# A tibble: 1 × 1\n   mean_pop\n      &lt;dbl&gt;\n1 29601212.\n\n\n\n\n\n\nAnother example: the total population over all the data:\n\n\ngapminder %&gt;% summarize(total_pop = sum(pop))\n\n# A tibble: 1 × 1\n    total_pop\n        &lt;dbl&gt;\n1 50440465801\n\n\n\n\n\n\nHowever, it is often more useful to calculate such summary statistics for particular groups\nTo do this, first specify the groups with group_by():\n\n\ngapminder %&gt;% group_by(continent)\n\n\n\n# A tibble: 1,704 × 6\n# Groups:   continent [5]\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n# ℹ 1,700 more rows\n\n\n\n\n\n\nNext, use summarize() to calculate the summary statistic:\n\n\ngapminder %&gt;%\n  group_by(continent) %&gt;%\n  summarize(mean_pop = mean(pop))\n\n# A tibble: 5 × 2\n  continent  mean_pop\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Africa     9916003.\n2 Americas  24504795.\n3 Asia      77038722.\n4 Europe    17169765.\n5 Oceania    8874672.\n\n\n\n\n\n\nmutate() calculates a new column (or over-writes an existing one) and keeps the number of rows the same\nsummarize() calculates a new column and decreases the number of rows\n\n\n\n\n\nSort data with arrange()\nNarrow down columns with select()\nFilter rows with filter()\nModify data with mutate()\nSummarize data with summarize()\nGroup data with group_by()\nUse the pipe (%&gt;%) to chain steps together"
  },
  {
    "objectID": "day4/index.html#refresher-vectors",
    "href": "day4/index.html#refresher-vectors",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Recall that a vector is a series of values that are all the same type\n\n\n# A numeric vector:\nc(1, 2, 3)\n\n[1] 1 2 3\n\n# A character vector:\nc(\"banana\", \"orange\", \"apple\")\n\n[1] \"banana\" \"orange\" \"apple\" \n\n# A logical vector:\nc(TRUE, FALSE, TRUE)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day4/index.html#about-dataframes",
    "href": "day4/index.html#about-dataframes",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "A dataframe is a collection of vectors\n\nbasically like a spreadsheet in Excel\n\n\n\n. . .\n\nToday we will learn to load and tidy (or “wrangle”) dataframes"
  },
  {
    "objectID": "day4/index.html#about-data-tidying-wrangling",
    "href": "day4/index.html#about-data-tidying-wrangling",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Data often come to us in a form that is not suitable for analysis\nData tidying (or “wrangling”) is the process of re-formatting the data so it can be analyzed\n\n\n\n\n\nGetty Images\n\n\n\n\n\n\nImage by Allison Horst"
  },
  {
    "objectID": "day4/index.html#set-up-project",
    "href": "day4/index.html#set-up-project",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Create a new project called gapminder-analysis in the data-analysis-course folder on your Desktop\n\nWe will use the “gapminder” dataset for the rest of the course\n\nInside that project, create a folder called data_raw to store raw data\n\nYou should never edit raw data directly (treat it as read-only)\n\nAlso create a file to write today’s code. You could call it data-tidying-practice.R"
  },
  {
    "objectID": "day4/index.html#set-up-project-1",
    "href": "day4/index.html#set-up-project-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Download the gapminder.csv file from this link, and put it in data_raw\n\nhttps://www.dropbox.com/s/fdirlsnxlzy53qq/gapminder.csv?dl=0"
  },
  {
    "objectID": "day4/index.html#about-r-packages",
    "href": "day4/index.html#about-r-packages",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "The functions we have used so far are included in R (called “Base R”)\nBut sometimes we need to do something that is not available in Base R\nPackages are collections of code that extend the functionality of R\n\nThere are nearly 200,000 packages currently available!"
  },
  {
    "objectID": "day4/index.html#install-tidyverse",
    "href": "day4/index.html#install-tidyverse",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Today we will use the tidyverse set of packages for working with data\nInstall tidyverse using install.packages():\n\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "day4/index.html#loading-packages",
    "href": "day4/index.html#loading-packages",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "The install.packages() function downloads the package to your computer\n\nYou only need to do this once per package (or when you want to update the package)\n\nBut R isn’t able to use the package yet\nThe library() function tells R to load a package so that we can use it"
  },
  {
    "objectID": "day4/index.html#load-tidyverse",
    "href": "day4/index.html#load-tidyverse",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Let’s load the tidyverse package with library()\n\nNote that you don’t need to use quotation marks for the package name\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "day4/index.html#load-tidyverse-1",
    "href": "day4/index.html#load-tidyverse-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "tidyverse actually includes multiple packages (dplyr, tidyr, readr, etc.)\n\nThese are all packages that are useful for loading and cleaning data"
  },
  {
    "objectID": "day4/index.html#load-data",
    "href": "day4/index.html#load-data",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Use the read_csv() function to load a spreadsheet as a dataframe\n\nThere are other functions for other file formats like .xls, .xlsx, .tsv, etc.\n\n\n\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")"
  },
  {
    "objectID": "day4/index.html#print-out-the-data",
    "href": "day4/index.html#print-out-the-data",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Inspect the data just like any other object (variable) in R: type the name of the object into the console\n\n\ngapminder\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#print-out-the-data-1",
    "href": "day4/index.html#print-out-the-data-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Notice that R tells us the number of rows and columns, as well as the data type of each column\n\nThe tidyverse package refers to dataframes as “tibbles”"
  },
  {
    "objectID": "day4/index.html#what-is-this-dataset-about",
    "href": "day4/index.html#what-is-this-dataset-about",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "What do you think this dataset is about?\nWhat do you think the columns mean?"
  },
  {
    "objectID": "day4/index.html#gapminder",
    "href": "day4/index.html#gapminder",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "This is a dataset of economic statistics from various countries over time, from https://gapminder.org\nThe meaning of some columns is obvious (country, continent, year), but not others\n\npop: Population\nlifeExp: Life expectancy (寿命)\ngdpPercap: GDP per capita (一人当たりの国内総生産)"
  },
  {
    "objectID": "day4/index.html#sort-data-with-arrange",
    "href": "day4/index.html#sort-data-with-arrange",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "First provide the name of the dataframe, then the column to sort by\n\n\narrange(gapminder, lifeExp)\n\n# A tibble: 1,704 × 6\n  country      continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Rwanda       Africa     1992    23.6 7290203      737.\n2 Afghanistan  Asia       1952    28.8 8425333      779.\n3 Gambia       Africa     1952    30    284320      485.\n4 Angola       Africa     1952    30.0 4232095     3521.\n5 Sierra Leone Africa     1952    30.3 2143249      880.\n6 Afghanistan  Asia       1957    30.3 9240934      821.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#sort-data-with-arrange-1",
    "href": "day4/index.html#sort-data-with-arrange-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "The default setting is to sort from small to large\n\nTo sort in the reverse (descending) direction, use desc()\n\n\n\narrange(gapminder, desc(lifeExp))\n\n# A tibble: 1,704 × 6\n  country          continent  year lifeExp       pop gdpPercap\n  &lt;chr&gt;            &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Japan            Asia       2007    82.6 127467972    31656.\n2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n3 Japan            Asia       2002    82   127065841    28605.\n4 Iceland          Europe     2007    81.8    301931    36181.\n5 Switzerland      Europe     2007    81.7   7554661    37506.\n6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#sort-data-with-arrange-2",
    "href": "day4/index.html#sort-data-with-arrange-2",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "You can sort on multiple columns\n\nTies will be sorted by the next column\n\n\n\narrange(gapminder, continent, lifeExp)\n\n# A tibble: 1,704 × 6\n  country      continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Rwanda       Africa     1992    23.6 7290203      737.\n2 Gambia       Africa     1952    30    284320      485.\n3 Angola       Africa     1952    30.0 4232095     3521.\n4 Sierra Leone Africa     1952    30.3 2143249      880.\n5 Mozambique   Africa     1952    31.3 6446316      469.\n6 Sierra Leone Africa     1957    31.6 2295678     1004.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#challenge",
    "href": "day4/index.html#challenge",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Sort the data by year, first going from smallest to biggest, then from biggest to smallest.\nWhat is the earliest year in the data?\nWhat is the latest year in the data?"
  },
  {
    "objectID": "day4/index.html#narrow-down-columns-with-select",
    "href": "day4/index.html#narrow-down-columns-with-select",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "First provide the name of the dataframe, then the columns to select\n\n\nselect(gapminder, year, country, gdpPercap)\n\n# A tibble: 1,704 × 3\n   year country     gdpPercap\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n1  1952 Afghanistan      779.\n2  1957 Afghanistan      821.\n3  1962 Afghanistan      853.\n4  1967 Afghanistan      836.\n5  1972 Afghanistan      740.\n6  1977 Afghanistan      786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#saving-your-output",
    "href": "day4/index.html#saving-your-output",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Notice that although we have used several functions, gapminder is still the same:\n\n\ngapminder\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#saving-your-output-1",
    "href": "day4/index.html#saving-your-output-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "This is because we have not saved any of the output\nTo do that, you need to create a new object with &lt;-\n\nYou can call the object whatever you want, but use a name that is easy to remember\n\n\n\ngapminder_gdp &lt;- select(gapminder, year, country, gdpPercap)"
  },
  {
    "objectID": "day4/index.html#challenge-1",
    "href": "day4/index.html#challenge-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Select only year, country, and population, then sort the data by population"
  },
  {
    "objectID": "day4/index.html#about-pipes",
    "href": "day4/index.html#about-pipes",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "During the last challenge, you needed to save the output of the select() function, then use it as input into the arrange() function\nThere is a simpler way to do this, called the “pipe”\nThe pipe is written like this: %&gt;%\n\nNewer versions of R also let you write it like this: |&gt;"
  },
  {
    "objectID": "day4/index.html#about-pipes-1",
    "href": "day4/index.html#about-pipes-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "The pipe takes the output from one function and passes it to the input of the next function\nYou can think of it as saying “and then”\n\nDo this and then do this, and then do this…\nDo this %&gt;% do this, %&gt;% do this…"
  },
  {
    "objectID": "day4/index.html#about-pipes-2",
    "href": "day4/index.html#about-pipes-2",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "We can even use the pipe just with one function:\n\nRead this as “start with gapminder and then select only year, country, and population”\n\n\n\ngapminder %&gt;% select(year, country, pop)\n\n# A tibble: 1,704 × 3\n   year country          pop\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1  1952 Afghanistan  8425333\n2  1957 Afghanistan  9240934\n3  1962 Afghanistan 10267083\n4  1967 Afghanistan 11537966\n5  1972 Afghanistan 13079460\n6  1977 Afghanistan 14880372\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#about-pipes-3",
    "href": "day4/index.html#about-pipes-3",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "This becomes very useful when we want to do multiple steps\n\nRead this as “start with gapminder, and then select only year, country, and population, and then arrange by year”\n\n\n\ngapminder %&gt;% select(year, country, pop) %&gt;% arrange(year)\n\n\n\n# A tibble: 1,704 × 3\n   year country         pop\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;\n1  1952 Afghanistan 8425333\n2  1952 Albania     1282697\n3  1952 Algeria     9279525\n4  1952 Angola      4232095\n# ℹ 1,700 more rows"
  },
  {
    "objectID": "day4/index.html#about-pipes-4",
    "href": "day4/index.html#about-pipes-4",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "We can make it easier to read by putting each step on its own line\n\n\ngapminder %&gt;%\n  select(year, country, pop) %&gt;%\n  arrange(year)\n\n# A tibble: 1,704 × 3\n   year country          pop\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1  1952 Afghanistan  8425333\n2  1952 Albania      1282697\n3  1952 Algeria      9279525\n4  1952 Angola       4232095\n5  1952 Argentina   17876956\n6  1952 Australia    8691212\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#about-pipes-5",
    "href": "day4/index.html#about-pipes-5",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "This way, you don’t have to save each intermediate step\nThis is a very useful way to manipulate data\nI will now use the pipe (%&gt;%) for the rest of the lesson"
  },
  {
    "objectID": "day4/index.html#subset-rows-with-filter",
    "href": "day4/index.html#subset-rows-with-filter",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Use the filter() function to only keep rows that meet a certain condition\nFor example, let’s only keep the data in Europe:\n\n\ngapminder %&gt;% filter(continent == \"Europe\")\n\n# A tibble: 360 × 6\n  country continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Albania Europe     1952    55.2 1282697     1601.\n2 Albania Europe     1957    59.3 1476505     1942.\n3 Albania Europe     1962    64.8 1728137     2313.\n4 Albania Europe     1967    66.2 1984060     2760.\n5 Albania Europe     1972    67.7 2263554     3313.\n6 Albania Europe     1977    68.9 2509048     3533.\n# ℹ 354 more rows"
  },
  {
    "objectID": "day4/index.html#challenge-2",
    "href": "day4/index.html#challenge-2",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Using the pipe (%&gt;%) and the functions we have learned so far, filter the data to Asia, then select only the country, year, and population columns."
  },
  {
    "objectID": "day4/index.html#modify-data-with-mutate",
    "href": "day4/index.html#modify-data-with-mutate",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "For example, we could change the units of population to millions of people:\n\n\ngapminder %&gt;% mutate(pop = pop/1000000)\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp   pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8.43      779.\n2 Afghanistan Asia       1957    30.3  9.24      821.\n3 Afghanistan Asia       1962    32.0 10.3       853.\n4 Afghanistan Asia       1967    34.0 11.5       836.\n5 Afghanistan Asia       1972    36.1 13.1       740.\n6 Afghanistan Asia       1977    38.4 14.9       786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#modify-data-with-mutate-1",
    "href": "day4/index.html#modify-data-with-mutate-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "If we provide a new column name, that column will be added\n\n\ngapminder %&gt;% mutate(pop_mil = pop/1000000)\n\n# A tibble: 1,704 × 7\n  country     continent  year lifeExp      pop gdpPercap pop_mil\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.    8.43\n2 Afghanistan Asia       1957    30.3  9240934      821.    9.24\n3 Afghanistan Asia       1962    32.0 10267083      853.   10.3 \n4 Afghanistan Asia       1967    34.0 11537966      836.   11.5 \n5 Afghanistan Asia       1972    36.1 13079460      740.   13.1 \n6 Afghanistan Asia       1977    38.4 14880372      786.   14.9 \n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#challenge-3",
    "href": "day4/index.html#challenge-3",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "The gdpPercap column stands for Gross Domestic Product (GDP) per capita (per person)\nCalculate the total GDP using mutate()\n\nhint: You need to use both the pop and gdpPercap columns"
  },
  {
    "objectID": "day4/index.html#calculate-summary-statistics-with-summarize",
    "href": "day4/index.html#calculate-summary-statistics-with-summarize",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "For example, let’s calculate the overall mean population:\n\n\ngapminder %&gt;% summarize(mean_pop = mean(pop))\n\n# A tibble: 1 × 1\n   mean_pop\n      &lt;dbl&gt;\n1 29601212."
  },
  {
    "objectID": "day4/index.html#calculate-summary-statistics-with-summarize-1",
    "href": "day4/index.html#calculate-summary-statistics-with-summarize-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Another example: the total population over all the data:\n\n\ngapminder %&gt;% summarize(total_pop = sum(pop))\n\n# A tibble: 1 × 1\n    total_pop\n        &lt;dbl&gt;\n1 50440465801"
  },
  {
    "objectID": "day4/index.html#use-group_by-to-do-calculations-per-group",
    "href": "day4/index.html#use-group_by-to-do-calculations-per-group",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "However, it is often more useful to calculate such summary statistics for particular groups\nTo do this, first specify the groups with group_by():\n\n\ngapminder %&gt;% group_by(continent)\n\n\n\n# A tibble: 1,704 × 6\n# Groups:   continent [5]\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n# ℹ 1,700 more rows"
  },
  {
    "objectID": "day4/index.html#use-group_by-to-do-calculations-per-group-1",
    "href": "day4/index.html#use-group_by-to-do-calculations-per-group-1",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Next, use summarize() to calculate the summary statistic:\n\n\ngapminder %&gt;%\n  group_by(continent) %&gt;%\n  summarize(mean_pop = mean(pop))\n\n# A tibble: 5 × 2\n  continent  mean_pop\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Africa     9916003.\n2 Americas  24504795.\n3 Asia      77038722.\n4 Europe    17169765.\n5 Oceania    8874672."
  },
  {
    "objectID": "day4/index.html#difference-between-mutate-and-summarize",
    "href": "day4/index.html#difference-between-mutate-and-summarize",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "mutate() calculates a new column (or over-writes an existing one) and keeps the number of rows the same\nsummarize() calculates a new column and decreases the number of rows"
  },
  {
    "objectID": "day4/index.html#summary",
    "href": "day4/index.html#summary",
    "title": "Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "Sort data with arrange()\nNarrow down columns with select()\nFilter rows with filter()\nModify data with mutate()\nSummarize data with summarize()\nGroup data with group_by()\nUse the pipe (%&gt;%) to chain steps together"
  },
  {
    "objectID": "day2/index.html",
    "href": "day2/index.html",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Git is version control software\nYou can think of it kind of like the “track comments” function in MS Word or Google Docs, but for code (plain text)\n\n\n\n\n\nTo share code\n\nImportant for reproducibility. Other people can’t reproduce your analysis if they can’t access your code\n\nTo have a history of all the things your tried in your analysis\n\nYou can go back and see what you have changed. Especially important when something breaks.\n\nTo organize how you develop your code\n\nYou will make comments about all your changes to your code (“commits”), so this forces you to think about how you are writing your code\n\n\n\n\n\n\nAn online tool for managing projects that use Git\nActs like a cloud backup tool for your code\nMakes it easy to share code with others\n\n\n\n\n\nYou need to install git on your computer and set up an account on https://github.com\n\n\n\n\n\nMac\n\nMay need to install Homebrew first\n\nWindows\nLinux\n\n\n\n\n\nNavigate to https://github.com/ and follow the prompts\n\n\n\n\nA PAT is a “Personal Access Token”. It is like an extra-secure password.\nThere is another method for authentication called SSH, but it’s a bit more complicated to set up. If you want to use SSH, see these instructions.\n\n\n\n\nGo to https://github.com/settings/tokens\n\nOr, from R, first install usethis with install.packages(\"usethis\"), then do\nusethis::create_github_token()\n\nLook over the scopes (permissions); “repo”, “user”, and “workflow” are recommended. Recommended scopes will be pre-selected if you used create_github_token().\nClick “Generate token”.\n\n\n\n\n\nCopy the generated PAT to your clipboard. DON’T CLOSE THE BROWSER WINDOW YET.\nInstall gitcreds in R with install.packages(\"gitcreds\")\nNext, run gitcreds::gitcreds_set().\nEnter the PAT that you copied from GitHub. Now you can close the browser window.\n\nDone!\n\n\n\n\nYour PAT will expire (after 30 days by default).\nYou then need to re-create a new one on GitHub and enter it again with gitcreds::gitcreds_set().\nUsing an expiration date is recommended for security\n\n\n\n\nIf you get an error like Could not find system git, try the following:\nGo to Tools -&gt; Global Options, choose the git/svn tab , then you need to browse for the git executable - presumably in C:\\Program Files\\Git\\bin\\git.exe\n\n\n\nYou need to let git know your GitHub username and email address:\ngit config --global user.name \"your_github_username\"\ngit config --global user.email \"your_email_adress\"\ngit config --global --list\n\n\n\n\nGit can allow you to have multiple versions of your code at the same time.\nThese are called “branches”.\nTell git to use the name “main” for the main branch:\n\ngit config --global init.defaultBranch main\n\n\n\n\nA ‘repo’ (short for repository) is a folder where you store all the code and other files needed for a project.\n\ngit tracks the content of a repo\n\n\n\n\nA local repo is just the project on your own computer\nA remote repo is a copy of the repo online (on GitHub)\n\nSomewhat confusingly, the remote repo is typically referred to by the name origin\n\n\n\n\n\nSometimes, you want to download a repo that doesn’t exist on your computer yet.\n\nCloning is copying an online repo to your computer\n\n\n\n\nOnce you have the repos set up, you need to keep them in sync.\n\nYou push changes from your local repo to the remote\nYou pull changes from the remote repo to your local one\n\n\n\n\n\nA commit is a single change made to a repo that you have stored in git’s history.\n\nThere are two steps to making a commit.\n\n\n\nA file that has been changed is not automatically added to git’s history.\n\nYou need to stage the file (or part of the file) that you want to add to a particular commit\nNext, you type a short message describing the change, the commit message\nFinally, you commit the change to log it in git’s history\n\n\n\n\nIf there are any files you don’t want git to track, you can ignore them by listing them in a special file called .gitignore.\nIt is usually a good idea to ignore raw data files and output files. We only want to track code (in other words, the analysis itself)\n\n\n\nWe will go through a typical git workflow together in class using RStudio.\nThis is explained in the “Intro to Git” markdown file, which you will copy to your computer when you clone the Day 2 repo."
  },
  {
    "objectID": "day2/index.html#what-is-git",
    "href": "day2/index.html#what-is-git",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Git is version control software\nYou can think of it kind of like the “track comments” function in MS Word or Google Docs, but for code (plain text)"
  },
  {
    "objectID": "day2/index.html#why-use-git",
    "href": "day2/index.html#why-use-git",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "To share code\n\nImportant for reproducibility. Other people can’t reproduce your analysis if they can’t access your code\n\nTo have a history of all the things your tried in your analysis\n\nYou can go back and see what you have changed. Especially important when something breaks.\n\nTo organize how you develop your code\n\nYou will make comments about all your changes to your code (“commits”), so this forces you to think about how you are writing your code"
  },
  {
    "objectID": "day2/index.html#what-is-github",
    "href": "day2/index.html#what-is-github",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "An online tool for managing projects that use Git\nActs like a cloud backup tool for your code\nMakes it easy to share code with others"
  },
  {
    "objectID": "day2/index.html#setup",
    "href": "day2/index.html#setup",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "You need to install git on your computer and set up an account on https://github.com"
  },
  {
    "objectID": "day2/index.html#instructions-to-install-git",
    "href": "day2/index.html#instructions-to-install-git",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Mac\n\nMay need to install Homebrew first\n\nWindows\nLinux"
  },
  {
    "objectID": "day2/index.html#setup-github-account",
    "href": "day2/index.html#setup-github-account",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Navigate to https://github.com/ and follow the prompts"
  },
  {
    "objectID": "day2/index.html#setup-github-authentication-pat",
    "href": "day2/index.html#setup-github-authentication-pat",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "A PAT is a “Personal Access Token”. It is like an extra-secure password.\nThere is another method for authentication called SSH, but it’s a bit more complicated to set up. If you want to use SSH, see these instructions."
  },
  {
    "objectID": "day2/index.html#create-pat-on-github",
    "href": "day2/index.html#create-pat-on-github",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Go to https://github.com/settings/tokens\n\nOr, from R, first install usethis with install.packages(\"usethis\"), then do\nusethis::create_github_token()\n\nLook over the scopes (permissions); “repo”, “user”, and “workflow” are recommended. Recommended scopes will be pre-selected if you used create_github_token().\nClick “Generate token”."
  },
  {
    "objectID": "day2/index.html#save-your-pat",
    "href": "day2/index.html#save-your-pat",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Copy the generated PAT to your clipboard. DON’T CLOSE THE BROWSER WINDOW YET.\nInstall gitcreds in R with install.packages(\"gitcreds\")\nNext, run gitcreds::gitcreds_set().\nEnter the PAT that you copied from GitHub. Now you can close the browser window.\n\nDone!"
  },
  {
    "objectID": "day2/index.html#a-few-more-notes-about-pat",
    "href": "day2/index.html#a-few-more-notes-about-pat",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Your PAT will expire (after 30 days by default).\nYou then need to re-create a new one on GitHub and enter it again with gitcreds::gitcreds_set().\nUsing an expiration date is recommended for security"
  },
  {
    "objectID": "day2/index.html#troubleshooting",
    "href": "day2/index.html#troubleshooting",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "If you get an error like Could not find system git, try the following:\nGo to Tools -&gt; Global Options, choose the git/svn tab , then you need to browse for the git executable - presumably in C:\\Program Files\\Git\\bin\\git.exe"
  },
  {
    "objectID": "day2/index.html#introduce-yourself-to-git",
    "href": "day2/index.html#introduce-yourself-to-git",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "You need to let git know your GitHub username and email address:\ngit config --global user.name \"your_github_username\"\ngit config --global user.email \"your_email_adress\"\ngit config --global --list"
  },
  {
    "objectID": "day2/index.html#change-some-default-settings",
    "href": "day2/index.html#change-some-default-settings",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Git can allow you to have multiple versions of your code at the same time.\nThese are called “branches”.\nTell git to use the name “main” for the main branch:\n\ngit config --global init.defaultBranch main"
  },
  {
    "objectID": "day2/index.html#about-repos",
    "href": "day2/index.html#about-repos",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "A ‘repo’ (short for repository) is a folder where you store all the code and other files needed for a project.\n\ngit tracks the content of a repo"
  },
  {
    "objectID": "day2/index.html#remote-and-local-repos",
    "href": "day2/index.html#remote-and-local-repos",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "A local repo is just the project on your own computer\nA remote repo is a copy of the repo online (on GitHub)\n\nSomewhat confusingly, the remote repo is typically referred to by the name origin"
  },
  {
    "objectID": "day2/index.html#cloning",
    "href": "day2/index.html#cloning",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Sometimes, you want to download a repo that doesn’t exist on your computer yet.\n\nCloning is copying an online repo to your computer"
  },
  {
    "objectID": "day2/index.html#pushing-and-pulling",
    "href": "day2/index.html#pushing-and-pulling",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "Once you have the repos set up, you need to keep them in sync.\n\nYou push changes from your local repo to the remote\nYou pull changes from the remote repo to your local one"
  },
  {
    "objectID": "day2/index.html#commits",
    "href": "day2/index.html#commits",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "A commit is a single change made to a repo that you have stored in git’s history.\n\nThere are two steps to making a commit."
  },
  {
    "objectID": "day2/index.html#staging-and-committing",
    "href": "day2/index.html#staging-and-committing",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "A file that has been changed is not automatically added to git’s history.\n\nYou need to stage the file (or part of the file) that you want to add to a particular commit\nNext, you type a short message describing the change, the commit message\nFinally, you commit the change to log it in git’s history"
  },
  {
    "objectID": "day2/index.html#the-.gitignore-file",
    "href": "day2/index.html#the-.gitignore-file",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "If there are any files you don’t want git to track, you can ignore them by listing them in a special file called .gitignore.\nIt is usually a good idea to ignore raw data files and output files. We only want to track code (in other words, the analysis itself)"
  },
  {
    "objectID": "day2/index.html#how-this-works-in-practice",
    "href": "day2/index.html#how-this-works-in-practice",
    "title": "Day 2: Git and GitHub",
    "section": "",
    "text": "We will go through a typical git workflow together in class using RStudio.\nThis is explained in the “Intro to Git” markdown file, which you will copy to your computer when you clone the Day 2 repo."
  },
  {
    "objectID": "final-report-desc.html",
    "href": "final-report-desc.html",
    "title": "Final Report Assignment",
    "section": "",
    "text": "The goal of the final project is to analyze a dataset with R and write a report about it using Quarto. Futhermore, you will present your analysis during the final class meeting on 2023-11-21."
  },
  {
    "objectID": "final-report-desc.html#dataset",
    "href": "final-report-desc.html#dataset",
    "title": "Final Report Assignment",
    "section": "Dataset",
    "text": "Dataset\nThe dataset comes from the Tidy Tuesday Project, which releases datasets for practicing data analysis skills once per week. There are five datasets to choose from. Each group will select one dataset during class on 2023-11-07:\n\nWorld’s Oldest People\nOlympics\nChocolate ratings\nTransit cost\nStudent to teacher ratios"
  },
  {
    "objectID": "final-report-desc.html#report-content",
    "href": "final-report-desc.html#report-content",
    "title": "Final Report Assignment",
    "section": "Report Content",
    "text": "Report Content\nYou should use the R skills we have learned in class to analyze the data.\nYour report should include the following components:\n\nIntroduction\n\nWhat is the dataset about?\nWhere does the dataset come from?\nWhat question(s) will you answer by analyzing the dataset?\n\nVisualization\n\nPlease generate at least two graphs that show relationships between variables in the data\n\nDiscussion\n\nWhat is the message in your data visualization?\nWhat insights can the dataset provide (in other words, what conclusions can you draw from the data)?\n\n\nIf you cite any references, please include a reference list at the end."
  },
  {
    "objectID": "final-report-desc.html#example-report",
    "href": "final-report-desc.html#example-report",
    "title": "Final Report Assignment",
    "section": "Example Report",
    "text": "Example Report\nI have made an example report that you can refer to when working on your project: https://github.com/data-analysis-chiba-2024/gapminder-report"
  },
  {
    "objectID": "final-report-desc.html#group-work",
    "href": "final-report-desc.html#group-work",
    "title": "Final Report Assignment",
    "section": "Group Work",
    "text": "Group Work\nThis is a group project (four members per group). Group members will be responsible for dividing the work amongst themselves. For example, two members could work on one graph, and the other two members could work on the other graph. You will be assigned to groups in class on 2023-11-07.\nPlease use git and github to share your work by pushing and pulling as we learned in class. I recommend that each person creates a copy of the report (you could name the file with your initials, such as report-jn.qmd) when you are working on it. Then, when you are ready to submit the final version one person should edit and push report.qmd. This is to avoid merge conflicts, that is, incompatible changes made to the same file by different people. There is a way to fix those, but it is an advanced topic that we weren’t able to learn in this class."
  },
  {
    "objectID": "final-report-desc.html#presentation",
    "href": "final-report-desc.html#presentation",
    "title": "Final Report Assignment",
    "section": "Presentation",
    "text": "Presentation\nYou will present your analysis in class on 2023-11-21. You can use whatever software you want to create the presentation. (We didn’t have time to cover it in class, but Quarto can be used to make slides too! Ask the instructor if you’re interested).\nYour presentation should include the same basic information as the paper:\n\nIntroduction\nVisualization\nDiscussion\n\nEach group will have 10 minutes to present, and up to 5 minutes to answer questions."
  },
  {
    "objectID": "final-report-desc.html#evaluation",
    "href": "final-report-desc.html#evaluation",
    "title": "Final Report Assignment",
    "section": "Evaluation",
    "text": "Evaluation\nThe instructor will evaluate each report and presentation according to the rubric.\nYou will also evaluate each other groups’ presentation (Form A; hard copy, turn in at the end of class on 2023-11-21), as well as the contribution of each other member of your group (Form B; on Moodle, due by 2023-11-21 11:59 PM).\nPlease see the rubric at the end of this description for evaluating other presentations and for your own reference."
  },
  {
    "objectID": "final-report-desc.html#language",
    "href": "final-report-desc.html#language",
    "title": "Final Report Assignment",
    "section": "Language",
    "text": "Language\nBoth the report and presentation must be in English"
  },
  {
    "objectID": "final-report-desc.html#submission",
    "href": "final-report-desc.html#submission",
    "title": "Final Report Assignment",
    "section": "Submission",
    "text": "Submission\nThe report (report.qmd) is due on 2023-11-20 11:59 PM. It should be submitted the same way as the homework assignments: by pushing to GitHub. Please also submit the assignment on Moodle as usual by entering the URL of your repo. Note that you should submit (commit) the report.qmd file, not the .docx file that it generates.\nThe presentation will be given in class on 2023-11-21."
  },
  {
    "objectID": "final-report-desc.html#rubric",
    "href": "final-report-desc.html#rubric",
    "title": "Final Report Assignment",
    "section": "Rubric",
    "text": "Rubric\n\n\n\n\n\n\n\n\n\n\n\n4 (excellent)\n3 (good)\n2 (needs improvement)\n1 (poor)\n\n\n\n\nIntroduction\nThe dataset is described succinctly and clearly, including where it comes from.\nThe overall purpose of the dataset is clear, but some details are lacking.\nOnly the title of the dataset is given; no information about where the data come from.\nIntroduction missing or no useful information provided\n\n\nVisualization\nAll graphs are clearly labeled and easy to read. The message conveyed by each graph is clear.\nSome labels may not be easy to understand (not changed from the default in the data). There is a pattern in the graph, but it is not well explained.\nCannot understand what the labels mean. No clear pattern in the graph or explanation given.\nOne or more of the graphs is missing.\n\n\nDiscussion\nThe message of the visualization is clearly explained. A conclusion is provided that draws insight from the data.\nSome interpretation of the visualization is provided, but the insights to be gained from the data are not clear.\nA general discussion of the dataset is provided, but there are no direct references to the visualization or concrete conclusions drawn.\nDiscussion missing, cannot be understood, or mostly unrelated to the dataset.\n\n\nStyle and grammar (some aspects only apply to the presentation)\nAll English grammar is correct. Style is consistent. Slides are easy to read.\nSome grammar may be incorrect, but meaning is still clear. Slight deviations in style (such as different formatting of references) may occur. Slides are generally easy to read, but may be a bit cluttered.\nThere are grammatical errors that obscure the meaning of what the authors are trying to say. Style is not consistent. Slides are poorly designed, at times hard to understand.\nEven basic English is frequently incorrect. The message is very hard to understand because of poor English. Slides have no consistent style and are very difficult to read.\n\n\n\nIn addition, your report will be scored on the following criteria:\n\nThe code should run without errors\nThe .docx file should be generated correctly from the .qmd file\nThe .docx file should not include any code chunks (code chunks should be hidden with |# echo: false)"
  },
  {
    "objectID": "final-report-desc.html#scoring",
    "href": "final-report-desc.html#scoring",
    "title": "Final Report Assignment",
    "section": "Scoring",
    "text": "Scoring\nPoints will be assigned for the final project as follows:\n\nFinal report: 45%\nFinal presentation: 45%\nParticipation (filling out Form A and B): 10%"
  },
  {
    "objectID": "day8/index.html",
    "href": "day8/index.html",
    "title": "Day 8: Quarto, Part II",
    "section": "",
    "text": "Quarto is a system for generating reports from code\nBy using Quarto, we can ensure our results are reproducible and derived directly from the data (and code)\n\n\n\n\n\nThe report (report.qmd) is due 2024-07-24 11:59PM\n\nPush your final commit on GitHub by the deadline\nSubmit the Word document on Moodle\n\nThe evaluation form is due 2024-07-31 11:59PM\n\nSubmit Excel sheet on Moodle\n\n\n\n\n\n\nPlease see the rubric in the final report instructions to understand how the paper will be graded\nYou will also evaluate each other’s final report using the rubric\n\nDownload the Excel file from Moodle, fill it out, and submit it on Moodle\nI will post anonymized versions of each report and code to Moodle for you to evaluate\n\n\n\n\n\n\nRead each report\nAssign a score according to the rubric (1 - 4 points per category)\nSubmit the evaluation form (Excel sheet) via Moodle"
  },
  {
    "objectID": "day8/index.html#recap-from-day-7",
    "href": "day8/index.html#recap-from-day-7",
    "title": "Day 8: Quarto, Part II",
    "section": "",
    "text": "Quarto is a system for generating reports from code\nBy using Quarto, we can ensure our results are reproducible and derived directly from the data (and code)"
  },
  {
    "objectID": "day8/index.html#due-dates",
    "href": "day8/index.html#due-dates",
    "title": "Day 8: Quarto, Part II",
    "section": "",
    "text": "The report (report.qmd) is due 2024-07-24 11:59PM\n\nPush your final commit on GitHub by the deadline\nSubmit the Word document on Moodle\n\nThe evaluation form is due 2024-07-31 11:59PM\n\nSubmit Excel sheet on Moodle"
  },
  {
    "objectID": "day8/index.html#grading",
    "href": "day8/index.html#grading",
    "title": "Day 8: Quarto, Part II",
    "section": "",
    "text": "Please see the rubric in the final report instructions to understand how the paper will be graded\nYou will also evaluate each other’s final report using the rubric\n\nDownload the Excel file from Moodle, fill it out, and submit it on Moodle\nI will post anonymized versions of each report and code to Moodle for you to evaluate"
  },
  {
    "objectID": "day8/index.html#how-to-fill-out-the-evaluation-form",
    "href": "day8/index.html#how-to-fill-out-the-evaluation-form",
    "title": "Day 8: Quarto, Part II",
    "section": "",
    "text": "Read each report\nAssign a score according to the rubric (1 - 4 points per category)\nSubmit the evaluation form (Excel sheet) via Moodle"
  },
  {
    "objectID": "day8/index.html#change-the-size-of-a-figure",
    "href": "day8/index.html#change-the-size-of-a-figure",
    "title": "Day 8: Quarto, Part II",
    "section": "Change the size of a figure",
    "text": "Change the size of a figure\n\nYou can adjust the size of the figure with chunk options fig.height and fig.width (units in inches)\nFor example:\n\n#| fig.height: 6\n#| fig.width: 6"
  },
  {
    "objectID": "day8/index.html#change-the-font-size",
    "href": "day8/index.html#change-the-font-size",
    "title": "Day 8: Quarto, Part II",
    "section": "Change the font size",
    "text": "Change the font size\n\nYou can adjust the overall font size of the figure like this:\n\n\nggplot(gapminder, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  theme_gray(base_size = 16)"
  },
  {
    "objectID": "day8/index.html#change-the-font-size-1",
    "href": "day8/index.html#change-the-font-size-1",
    "title": "Day 8: Quarto, Part II",
    "section": "Change the font size",
    "text": "Change the font size\n\nYou can adjust the overall font size of the figure like this:\n\n\nggplot(gapminder, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  theme_gray(base_size = 16)\n\n\n\nThere are other themes available too, but theme_gray() should be fine for the final paper"
  },
  {
    "objectID": "day8/index.html#add-a-pagebreak",
    "href": "day8/index.html#add-a-pagebreak",
    "title": "Day 8: Quarto, Part II",
    "section": "Add a pagebreak",
    "text": "Add a pagebreak\n\nYou can add a pagebreak to your document like this:\n\n{{&lt; pagebreak &gt;}}"
  },
  {
    "objectID": "day8/index.html#final-report",
    "href": "day8/index.html#final-report",
    "title": "Day 8: Quarto, Part II",
    "section": "Final report",
    "text": "Final report\n\nThe rest of the class time is to work on your final report. I will answer any questions you may have about the report."
  },
  {
    "objectID": "day1/index.html",
    "href": "day1/index.html",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Research topic 1: Ecology and evolution of ferns\n\nAlso teach Biodiversity and Japan\n\nResearch topic 2: Development of software for data science\nhttps://www.joelnitta.com\n\n\n\n\n\n\n\n\n\n\n\nBorn and raised in California\nFourth generation Japanese-American\nFirst came to Japan as high school exchange student\n\n\n\n\n\n\n\n\n\n\n\nAnswer the question: “Why are you interested in data analysis?”\nIntroduce yourself and discuss with your neighbor\n\n\n\n\n\n\nhttps://www.odelama.com/data-analysis/\n\n\n\n\n\nObtaining insight from data\nImportant for many careers (academic and industry)\n\n\nEmployment of data scientists is projected to grow 35% from 2022 to 2032, much faster than the average for all occupations.\n\n\nhttps://www.bls.gov/ooh/math/data-scientists.htm\n\n\n\n\nWho has used Excel? Who has used a programming language?\nWhat are the advantages and disadvantages of each for data analysis?\n\nDiscuss with your neighbor\n\n\n\n\n\nProgramming allows you to record every step of data analysis\n\nThis means you can repeat your analysis!\n\n\nIt takes some time to get used to, but eventually you will feel more comfortable with it because you can re-trace your steps and have confidence in your results.\n\n\n\nWhen might you want to repeat an analysis? Why?\n\nDiscuss with your neighbor\n\n\n\n\n\nIf new data comes in and you need to update an analysis\nIf you want to double-check your own results\nIf you want to repeat somebody else’s analysis\nIf you switch between different projects and can’t remember exactly what you were doing\n\n\n\n\nThe goal of this class is to learn the fundamentals of reproducible data analysis by doing it yourself.\nBy the end of the course, you will be able to:\n\nload, clean, and visualize data using R\ntrack changes to code using Git and GitHub\nwrite a reproducible report using Quarto\n\n\n\n\n\nI expect you to participate in discussions\nI expect you to ask questions\n\n\n\n\n\nThis class is conducted in English\nBut, you can ask questions in Japanese and I will explain in Japanese if needed\n\n\n\n\n\nR for Data Science. https://r4ds.had.co.nz/\n\nAvailable in Japanese from Amazon or O’Reilly\n\nHappy Git with R. https://happygitwithr.com/\nIntroduction to Reproducible Publications with RStudio https://ucsbcarpentry.github.io/Reproducible-Publications-with-RStudio-Quarto/index.html\n\n\n\n\n\nThere will be a homework assignment on GitHub for each class, starting next week.\nYou submit the assignment by making a commit in Git (more about this on Day 2)\n\n\n\n\n\nYou will need to analyze a dataset of your own choosing for your final project, due 2024-07-24 11:59 PM\nThe last homework assignment is due 2024-07-10 11:59 PM, so you have at least 2 weeks to work on the final project\n\n\n\n\n\nDay 1 (2024-06-06): Introduction: Why code? Why reproducibility?\nDay 2 (2024-06-13): Git and GitHub\nDay 3 (2024-06-20): Basic usage of R and RStudio\nDay 4 (Media Day): Data loading and tidying with tidyverse\n\n\n\n\n\nDay 5 (Media Day): Data tidying, part II\nDay 6 (2024-07-08): Data visualization with ggplot2\n\nNOTE different date/time than usual: 6th period (17:50~19:20)\n\nDay 7 (2024-07-11): Writing documents with Quarto\nDay 8 (2024-07-18): Quarto, part II\n\n\n\n\n\nHomework (4 assignments) 50%\nFinal report 50%\n\nNo late submissions allowed\nOnly the top three homework assignments will be used for grading (so you get one free exception if you forget to turn it in etc.)\n\n\n\n\nI will teach a workshop on using the “targets” R package for data analysis on 2024-07-17 (exact time and location TBA).\nAnybody who participates in the workshop will receive extra credit\n\n\n\n\n\nAll slides (and other info) available athttps://data-analysis-chiba-2024.github.io/\n\n\n\n\n\nAssignments (GitHub classroom repos) will be posted on Moodle\nCheck Moodle every week\n\n\n\n\nBy appointment: contact me at joelnitta@chiba.u-jp\n\n\n\n\n\n\n\nWho has used ChatGPT before?\n\nhttps://chat.openai.com/\n\nYou may use ChatGPT for your homework and final project\nBut first you need to know how to use it\n\n\n\n\n\nChatGPT makes statistical predictions about words based on training data (it does not “think”)\nChatGPT is designed to produce sentences that sound as natural as possible\nChatGPT may lie to you or make up facts (called “hallucination”; this is especially common when it lacks adequate training data)\n\n\n\n\n\nDo try by yourself first (without ChatGPT)\nDo ask it detailed, specific questions (prompts)\n\nhttps://www.promptingguide.ai/ (日本語)\n\nDo double-check the results: does ChatGPT’s code produce the expected result?\nDo make sure you understand the code that ChatGPT provides\n\n\n\n\n\nDon’t copy-paste directly from ChatGPT for your report.\n\nTyping the code yourself will help you remember it and understand what you are doing. Copy-pasting text for a paper is plagiarism.\n\nDon’t submit an answer from ChatGPT without trying/checking it yourself first\n\nChatGPT could very well be wrong!\n\n\n\n\n\n\nInstall R\nInstall RStudio\n\n\n\n\nWe will follow instructions for Day 2 to set up Git"
  },
  {
    "objectID": "day1/index.html#instructor-joel-nitta",
    "href": "day1/index.html#instructor-joel-nitta",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Research topic 1: Ecology and evolution of ferns\n\nAlso teach Biodiversity and Japan\n\nResearch topic 2: Development of software for data science\nhttps://www.joelnitta.com"
  },
  {
    "objectID": "day1/index.html#instructor-joel-nitta-1",
    "href": "day1/index.html#instructor-joel-nitta-1",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Born and raised in California\nFourth generation Japanese-American\nFirst came to Japan as high school exchange student"
  },
  {
    "objectID": "day1/index.html#ice-breaker",
    "href": "day1/index.html#ice-breaker",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Answer the question: “Why are you interested in data analysis?”\nIntroduce yourself and discuss with your neighbor\n\n\n\n\n\n\nhttps://www.odelama.com/data-analysis/"
  },
  {
    "objectID": "day1/index.html#what-is-data-analysis",
    "href": "day1/index.html#what-is-data-analysis",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Obtaining insight from data\nImportant for many careers (academic and industry)\n\n\nEmployment of data scientists is projected to grow 35% from 2022 to 2032, much faster than the average for all occupations.\n\n\nhttps://www.bls.gov/ooh/math/data-scientists.htm"
  },
  {
    "objectID": "day1/index.html#why-programming",
    "href": "day1/index.html#why-programming",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Who has used Excel? Who has used a programming language?\nWhat are the advantages and disadvantages of each for data analysis?\n\nDiscuss with your neighbor"
  },
  {
    "objectID": "day1/index.html#why-programming-1",
    "href": "day1/index.html#why-programming-1",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Programming allows you to record every step of data analysis\n\nThis means you can repeat your analysis!\n\n\nIt takes some time to get used to, but eventually you will feel more comfortable with it because you can re-trace your steps and have confidence in your results."
  },
  {
    "objectID": "day1/index.html#why-reproducibility",
    "href": "day1/index.html#why-reproducibility",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "When might you want to repeat an analysis? Why?\n\nDiscuss with your neighbor"
  },
  {
    "objectID": "day1/index.html#why-reproducibility-1",
    "href": "day1/index.html#why-reproducibility-1",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "If new data comes in and you need to update an analysis\nIf you want to double-check your own results\nIf you want to repeat somebody else’s analysis\nIf you switch between different projects and can’t remember exactly what you were doing"
  },
  {
    "objectID": "day1/index.html#goals-of-this-class",
    "href": "day1/index.html#goals-of-this-class",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "The goal of this class is to learn the fundamentals of reproducible data analysis by doing it yourself.\nBy the end of the course, you will be able to:\n\nload, clean, and visualize data using R\ntrack changes to code using Git and GitHub\nwrite a reproducible report using Quarto"
  },
  {
    "objectID": "day1/index.html#expectations-of-this-class",
    "href": "day1/index.html#expectations-of-this-class",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "I expect you to participate in discussions\nI expect you to ask questions"
  },
  {
    "objectID": "day1/index.html#language-of-this-class",
    "href": "day1/index.html#language-of-this-class",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "This class is conducted in English\nBut, you can ask questions in Japanese and I will explain in Japanese if needed"
  },
  {
    "objectID": "day1/index.html#recommended-reading",
    "href": "day1/index.html#recommended-reading",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "R for Data Science. https://r4ds.had.co.nz/\n\nAvailable in Japanese from Amazon or O’Reilly\n\nHappy Git with R. https://happygitwithr.com/\nIntroduction to Reproducible Publications with RStudio https://ucsbcarpentry.github.io/Reproducible-Publications-with-RStudio-Quarto/index.html"
  },
  {
    "objectID": "day1/index.html#homework-assignments",
    "href": "day1/index.html#homework-assignments",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "There will be a homework assignment on GitHub for each class, starting next week.\nYou submit the assignment by making a commit in Git (more about this on Day 2)"
  },
  {
    "objectID": "day1/index.html#final-project",
    "href": "day1/index.html#final-project",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "You will need to analyze a dataset of your own choosing for your final project, due 2024-07-24 11:59 PM\nThe last homework assignment is due 2024-07-10 11:59 PM, so you have at least 2 weeks to work on the final project"
  },
  {
    "objectID": "day1/index.html#schedule",
    "href": "day1/index.html#schedule",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Day 1 (2024-06-06): Introduction: Why code? Why reproducibility?\nDay 2 (2024-06-13): Git and GitHub\nDay 3 (2024-06-20): Basic usage of R and RStudio\nDay 4 (Media Day): Data loading and tidying with tidyverse"
  },
  {
    "objectID": "day1/index.html#schedule-contd",
    "href": "day1/index.html#schedule-contd",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Day 5 (Media Day): Data tidying, part II\nDay 6 (2024-07-08): Data visualization with ggplot2\n\nNOTE different date/time than usual: 6th period (17:50~19:20)\n\nDay 7 (2024-07-11): Writing documents with Quarto\nDay 8 (2024-07-18): Quarto, part II"
  },
  {
    "objectID": "day1/index.html#grades",
    "href": "day1/index.html#grades",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Homework (4 assignments) 50%\nFinal report 50%\n\nNo late submissions allowed\nOnly the top three homework assignments will be used for grading (so you get one free exception if you forget to turn it in etc.)"
  },
  {
    "objectID": "day1/index.html#extra-credit",
    "href": "day1/index.html#extra-credit",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "I will teach a workshop on using the “targets” R package for data analysis on 2024-07-17 (exact time and location TBA).\nAnybody who participates in the workshop will receive extra credit"
  },
  {
    "objectID": "day1/index.html#course-website-and-slides",
    "href": "day1/index.html#course-website-and-slides",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "All slides (and other info) available athttps://data-analysis-chiba-2024.github.io/"
  },
  {
    "objectID": "day1/index.html#moodle",
    "href": "day1/index.html#moodle",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Assignments (GitHub classroom repos) will be posted on Moodle\nCheck Moodle every week"
  },
  {
    "objectID": "day1/index.html#office-hours",
    "href": "day1/index.html#office-hours",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "By appointment: contact me at joelnitta@chiba.u-jp"
  },
  {
    "objectID": "day1/index.html#chatgpt",
    "href": "day1/index.html#chatgpt",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Who has used ChatGPT before?\n\nhttps://chat.openai.com/\n\nYou may use ChatGPT for your homework and final project\nBut first you need to know how to use it"
  },
  {
    "objectID": "day1/index.html#chatgpt-1",
    "href": "day1/index.html#chatgpt-1",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "ChatGPT makes statistical predictions about words based on training data (it does not “think”)\nChatGPT is designed to produce sentences that sound as natural as possible\nChatGPT may lie to you or make up facts (called “hallucination”; this is especially common when it lacks adequate training data)"
  },
  {
    "objectID": "day1/index.html#chatgpt-policies-dos",
    "href": "day1/index.html#chatgpt-policies-dos",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Do try by yourself first (without ChatGPT)\nDo ask it detailed, specific questions (prompts)\n\nhttps://www.promptingguide.ai/ (日本語)\n\nDo double-check the results: does ChatGPT’s code produce the expected result?\nDo make sure you understand the code that ChatGPT provides"
  },
  {
    "objectID": "day1/index.html#chatgpt-policies-donts",
    "href": "day1/index.html#chatgpt-policies-donts",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Don’t copy-paste directly from ChatGPT for your report.\n\nTyping the code yourself will help you remember it and understand what you are doing. Copy-pasting text for a paper is plagiarism.\n\nDon’t submit an answer from ChatGPT without trying/checking it yourself first\n\nChatGPT could very well be wrong!"
  },
  {
    "objectID": "day1/index.html#setting-up-rstudio",
    "href": "day1/index.html#setting-up-rstudio",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "Install R\nInstall RStudio"
  },
  {
    "objectID": "day1/index.html#setting-up-git",
    "href": "day1/index.html#setting-up-git",
    "title": "Day 1: Introduction to “Reproducible Data Analysis”",
    "section": "",
    "text": "We will follow instructions for Day 2 to set up Git"
  }
]