[
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "What is SSH?\n\nSecure Shell Protocol\nAuthentication method that uses public and private keys (like a padlock and key)\npublic key goes on GitHub\nprivate key stays on your computer\n\n\n(more detailed instructions available on the Software Carpentry website)\n\n\n\nEnter this in your terminal (it lists files in a folder):\n\nls -al ~/.ssh\n\nIf any of these files show up, you already have keys available that you can use to log into GitHub\n\nid_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub\n\n\n\n\nIf no such keys are already present, we need to create a private/public key pair.\nUse this command (the -t option specifies which type of algorithm to use and -C attaches a comment to the key):\n\nssh-keygen -t ed25519 -C \"you@youremail.com\"\n(use your own email address)\n\nIt will ask where you want you want to save the key. Use the default location.\nAdd a passphrase if you want (more secure, but you will have to enter it frequently).\nThen, you should see something like this:\n\nYour identification has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519\nYour public key has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519.pub\nThis tells you the location of your private and public keys\n\n\n\n\nFirst, get the content of the public key:\n\ncat ~/.ssh/id_ed25519.pub\nIt should include a long string of letters and numbers.\nCopy that exact line with command + c (mac) or control + c (Windows)\n\n\n\n\nGo to https://github.com, click on your profile icon in the top right corner to see the drop-down menu\nClick “Settings,” then “SSH and GPG keys”\nClick the “New SSH key” button on the right side\nEnter a name that you will remember (for example, “Joel’s Laptop”), paste your SSH key into the field, and click “Add SSH key”\n\n\n\n\n\nRun this command to check that it worked\n\nssh -T git@github.com\nNow, you can use git commands without providing a password every time"
  },
  {
    "objectID": "appendix.html#setup-github-authentication-ssh",
    "href": "appendix.html#setup-github-authentication-ssh",
    "title": "Appendix",
    "section": "",
    "text": "What is SSH?\n\nSecure Shell Protocol\nAuthentication method that uses public and private keys (like a padlock and key)\npublic key goes on GitHub\nprivate key stays on your computer\n\n\n(more detailed instructions available on the Software Carpentry website)\n\n\n\nEnter this in your terminal (it lists files in a folder):\n\nls -al ~/.ssh\n\nIf any of these files show up, you already have keys available that you can use to log into GitHub\n\nid_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub\n\n\n\n\nIf no such keys are already present, we need to create a private/public key pair.\nUse this command (the -t option specifies which type of algorithm to use and -C attaches a comment to the key):\n\nssh-keygen -t ed25519 -C \"you@youremail.com\"\n(use your own email address)\n\nIt will ask where you want you want to save the key. Use the default location.\nAdd a passphrase if you want (more secure, but you will have to enter it frequently).\nThen, you should see something like this:\n\nYour identification has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519\nYour public key has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519.pub\nThis tells you the location of your private and public keys\n\n\n\n\nFirst, get the content of the public key:\n\ncat ~/.ssh/id_ed25519.pub\nIt should include a long string of letters and numbers.\nCopy that exact line with command + c (mac) or control + c (Windows)\n\n\n\n\nGo to https://github.com, click on your profile icon in the top right corner to see the drop-down menu\nClick “Settings,” then “SSH and GPG keys”\nClick the “New SSH key” button on the right side\nEnter a name that you will remember (for example, “Joel’s Laptop”), paste your SSH key into the field, and click “Add SSH key”\n\n\n\n\n\nRun this command to check that it worked\n\nssh -T git@github.com\nNow, you can use git commands without providing a password every time"
  },
  {
    "objectID": "day6/day06_ggplot2.html",
    "href": "day6/day06_ggplot2.html",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "By the end of this class, you should be able to do the following:\n\nUse ggplot2 to generate publication-quality graphics.\nApply geometry and aesthetic layers to a ggplot plot.\nManipulate the aesthetics of a plot using different colors, shapes, and lines.\nImprove data visualization through transforming scales and paneling by group.\nSave a plot created with ggplot to disk."
  },
  {
    "objectID": "day6/day06_ggplot2.html#learning-objectives",
    "href": "day6/day06_ggplot2.html#learning-objectives",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "",
    "text": "By the end of this class, you should be able to do the following:\n\nUse ggplot2 to generate publication-quality graphics.\nApply geometry and aesthetic layers to a ggplot plot.\nManipulate the aesthetics of a plot using different colors, shapes, and lines.\nImprove data visualization through transforming scales and paneling by group.\nSave a plot created with ggplot to disk."
  },
  {
    "objectID": "day6/day06_ggplot2.html#about-plotting-and-ggplot2",
    "href": "day6/day06_ggplot2.html#about-plotting-and-ggplot2",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "About plotting and ggplot2",
    "text": "About plotting and ggplot2\nPlotting our data is one of the best ways to quickly explore it and the various relationships between variables.\nToday we’ll be learning about the ggplot2 package, because it has a consistent syntax and can be used to produce publication-quality graphics.\nWe do not have time to cover nearly everything there is to know about ggplot2. For more information, I highly recommend the book written by the author of ggplot2, Hadley Wickham: ggplot2: Elegant Graphics for Data Analysis.\nggplot2 is built on the grammar of graphics, the idea that any plot can be built from the same set of components: a data set, mapping aesthetics, and graphical layers:\n\nData sets are the data that you, the user, provide.\nMapping aesthetics are what connect the data to the graphics. They tell ggplot2 how to use your data to affect how the graph looks, such as changing what is plotted on the X or Y axis, or the size or color of different data points.\nLayers are the actual graphical output from ggplot2. Layers determine what kinds of plot are shown (scatterplot, histogram, etc.), the coordinate system used (rectangular, polar, others), and other important aspects of the plot. The idea of layers of graphics may be familiar to you if you have used image editing programs like Photoshop, Illustrator, or Inkscape.\n\nLet’s start off building an example using the gapminder data from earlier. The most basic function is ggplot, which lets R know that we’re creating a new plot. Any of the arguments we give the ggplot function are the global options for the plot: they apply to all layers on the plot."
  },
  {
    "objectID": "day6/day06_ggplot2.html#getting-started",
    "href": "day6/day06_ggplot2.html#getting-started",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Getting started",
    "text": "Getting started\nToday we will continue using the local project that you created before, gapminder-analysis, located in the data-analysis-course folder on your Desktop. Open it by clicking on the gapminder-analysis.Rproj file.\nSince ggplot2 is included in tidyverse, we will first load the tidyverse set of packages. Also load the scales package, which is used for labeling plots.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nNext, load the data as before.\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")\n\n\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe are now ready to plot the data."
  },
  {
    "objectID": "day6/day06_ggplot2.html#first-plot",
    "href": "day6/day06_ggplot2.html#first-plot",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "First plot",
    "text": "First plot\nLet’s start off building an example using the gapminder data from earlier. The most basic function is ggplot, which lets R know that we’re creating a new plot. Any of the arguments we give the ggplot function are the global options for the plot: they apply to all layers on the plot.\n\nggplot(data = gapminder)\n\n\n\n\n\n\n\n\nHere we called ggplot and told it what data we want to show on our figure. This is not enough information for ggplot to actually draw anything. It only creates a blank slate for other elements to be added to.\nNow we’re going to add in the mapping aesthetics using the aes function. aes tells ggplot how variables in the data map to aesthetic properties of the figure, such as which columns of the data should be used for the x and y locations.\n\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))\n\n\n\n\n\n\n\n\nHere we told ggplot we want to plot the “gdpPercap” column of the gapminder data frame on the x-axis, and the “lifeExp” column on the y-axis. Notice that we didn’t need to explicitly pass aes these columns (e.g. x = gapminder[, \"gdpPercap\"]), this is because ggplot is smart enough to know to look in the data for that column!\nThe final part of making our plot is to tell ggplot how we want to visually represent the data. We do this by adding a new layer to the plot using one of the geom functions.\n\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\nHere we used geom_point, which tells ggplot we want to visually represent the relationship between x and y as a scatterplot of points."
  },
  {
    "objectID": "day6/day06_ggplot2.html#layers",
    "href": "day6/day06_ggplot2.html#layers",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Layers",
    "text": "Layers\nUsing a scatterplot probably isn’t the best for visualizing change over time. Instead, let’s tell ggplot to visualize the data as a line plot:\n\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, color = continent)) +\n  geom_line()\n\n\n\n\n\n\n\n\nInstead of adding a geom_point layer, we’ve added a geom_line layer.\nHowever, the result doesn’t look quite as we might have expected: it seems to be jumping around a lot in each continent. Let’s try to separate the data by country, plotting one line for each country:\n\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country, color = continent)) +\n  geom_line()\n\n\n\n\n\n\n\n\nWe’ve added the group aesthetic, which tells ggplot to draw a line for each country.\nBut what if we want to visualize both lines and points on the plot? We can add another layer to the plot:\n\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country, color = continent)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\nIt’s important to note that each layer is drawn on top of the previous layer. In this example, the points have been drawn on top of the lines. Here’s a demonstration:\n\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country)) +\n  geom_line(mapping = aes(color = continent)) +\n  geom_point()\n\n\n\n\n\n\n\n\nIn this example, the aesthetic mapping of color has been moved from the global plot options in ggplot to the geom_line layer so it no longer applies to the points. Now we can clearly see that the points are drawn on top of the lines.\n\nTip: Setting an aesthetic to a value instead of a mapping\nSo far, we’ve seen how to use an aesthetic (such as color) as a mapping to a variable in the data. For example, when we use geom_line(mapping = aes(color=continent)), ggplot will give a different color to each continent. But what if we want to change the color of all lines to blue? You may think that geom_line(mapping = aes(color=\"blue\")) should work, but it doesn’t. Since we don’t want to create a mapping to a specific variable, we can move the color specification outside of the aes() function, like this: geom_line(color=\"blue\")."
  },
  {
    "objectID": "day6/day06_ggplot2.html#transformations",
    "href": "day6/day06_ggplot2.html#transformations",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Transformations",
    "text": "Transformations\nCurrently it’s hard to see the relationship between the points due to some strong outliers in GDP per capita. We can change the scale of units on the x axis using the scale functions. These control the mapping between the data values and visual values of an aesthetic. We can also modify the transparency of the points, using the alpha function, which is especially helpful when you have a large amount of data which is very clustered.\n\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()\n\n\n\n\n\n\n\n\nThe scale_x_log10 function applied a transformation to the coordinate system of the plot, so that each multiple of 10 is evenly spaced from left to right. For example, a GDP per capita of 1,000 is the same horizontal distance away from a value of 10,000 as the 10,000 value is from 100,000. This helps to visualize the spread of the data along the x-axis.\nYou may not be used to reading scientific notation. We can change the way the labels on the x-axis appear using the labels argument of the scale_x_log10() function:\n\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10(labels = label_comma())"
  },
  {
    "objectID": "day6/day06_ggplot2.html#multi-panel-figures",
    "href": "day6/day06_ggplot2.html#multi-panel-figures",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Multi-panel figures",
    "text": "Multi-panel figures\nEarlier we visualized the change in life expectancy over time across all countries in one plot. Alternatively, we can split this out over multiple panels by adding a layer of facet panels.\nWe start by making a subset of data including only some countries located in Asia. (Otherwise, there are too many countries to plot).\n\ngapminder_asia &lt;- filter(\n  gapminder,\n  country %in% c(\"Japan\", \"China\", \"Korea, Rep.\", \"Taiwan\")\n)\n\nUse facet_wrap() to create the facets. Note that within facet_wrap(), you need to specify the variable to use for grouping the facets with vars(). Here, we group the facets by country; in other words, each facet is one country.\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp\n  )\n) +\n  geom_line() +\n  facet_wrap(vars(country))"
  },
  {
    "objectID": "day6/day06_ggplot2.html#modifying-labels",
    "href": "day6/day06_ggplot2.html#modifying-labels",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Modifying labels",
    "text": "Modifying labels\nTo clean this figure up for a publication we need to change some of the labels. The y axis should read “Life expectancy”, rather than the column name in the data frame. It’s also a good idea to indicate the units of the data (years for life expectancy).\nYou can change these using the labs() function. You set the value of each label as a character string (for example, x = \"Year\", etc.):\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp\n  )\n) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\", # x axis title\n    y = \"Life expectancy (years)\", # y axis title\n    title = \"Figure 1\", # main title of figure\n    subtitle = \"Life expectancy of selected countries in Asia over time\"\n  )"
  },
  {
    "objectID": "day6/day06_ggplot2.html#exporting-the-plot",
    "href": "day6/day06_ggplot2.html#exporting-the-plot",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Exporting the plot",
    "text": "Exporting the plot\nFirst, re-run the code above, and save the output in R to an object, which we will call gapminder_asia_plot.\n\ngapminder_asia_plot &lt;- ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp\n  )\n) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life expectancy (years)\",\n    title = \"Figure 1\",\n    subtitle = \"Life expectancy of selected countries in Asia over time\"\n  )\n\nNext, use the ggsave() function to export the plot to a file. You can specify the dimension and resolution of your plot by adjusting the appropriate arguments (width, height and dpi) to create high quality graphics for publication. In order to save the plot from above, we first assign it to a variable lifeExp_plot, then tell ggsave to save that plot in pdf format. You can also specify other formats like pdf or jpg.\n\nggsave(plot = gapminder_asia_plot, file = \"gapminder_asia.pdf\")\n\n\nTip: Don’t commit output\nAs a general rule, you should not commit the output of code to your repository. That is because you can reproduce the output from the code (which you should commit) and the data (which is read-only). Best practice is to create a folder for storing results called results/, and add this folder to your .gitignore so that anything that it contains will be excluded from your git repo.\nTo save the above plot to the results folder, modify the file argument to look like this (make sure to create results first!):\n\nggsave(plot = gapminder_asia_plot, file = \"results/gapminder_asia.pdf\")"
  },
  {
    "objectID": "day6/day06_ggplot2.html#submitting-the-homework",
    "href": "day6/day06_ggplot2.html#submitting-the-homework",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Submitting the homework",
    "text": "Submitting the homework\nGo to Moodle, click on the Day 6 Homework assignment, and click on the link to accept the assignment. This will create the repo in your GitHub account.\nNext, clone the remote repo to your local machine. Then, edit the file day_06_homework.R file in RStudio. Make sure that your code runs without errors. Once you have done so, commit your changes and push to the remote. Don’t forget to push! If you don’t push, your work will not be submitted.\nYou can double check that you’ve successfully submitted (pushed) the homework by visiting your GitHub repo in your browser (use the same link in Moodle that you clicked to accept the assignment). Make sure the homework file there shows the same changes that you made in RStudio.\nBe sure to do this BY THE DEADLINE, or your work will not be counted."
  },
  {
    "objectID": "day6/day06_ggplot2.html#attributions",
    "href": "day6/day06_ggplot2.html#attributions",
    "title": "Reproducible Data Analysis Day 6: Data visualization with ggplot2",
    "section": "Attributions",
    "text": "Attributions\nThese materials were modified by Joel H. Nitta from those posted at https://swcarpentry.github.io/r-novice-gapminder/ under the Creative Commons Attribution (CC BY 4.0) license."
  },
  {
    "objectID": "day8/index.html#recap-from-day-7",
    "href": "day8/index.html#recap-from-day-7",
    "title": "Reproducible data analysis",
    "section": "Recap from Day 7",
    "text": "Recap from Day 7\n\nQuarto is a system for generating reports from code\nBy using Quarto, we can ensure our results are reproducible and derived directly from the data (and code)"
  },
  {
    "objectID": "day8/index.html#due-dates",
    "href": "day8/index.html#due-dates",
    "title": "Reproducible data analysis",
    "section": "Due dates",
    "text": "Due dates\n\nThe report (report.qmd) is due 2025-07-30 11:59PM\n\nPush your final commit on GitHub by the deadline\nSubmit the Word document on Moodle\n\nThe evaluation form is due 2025-08-01 11:59PM\n\nSubmit Excel sheet on Moodle"
  },
  {
    "objectID": "day8/index.html#grading",
    "href": "day8/index.html#grading",
    "title": "Reproducible data analysis",
    "section": "Grading",
    "text": "Grading\n\nPlease see the rubric in the final report instructions to understand how the paper will be graded\nYou will also evaluate each other’s final report using the rubric\n\nDownload the Excel file from Moodle, fill it out, and submit it on Moodle\nI will post anonymized versions of each report and code to Moodle for you to evaluate"
  },
  {
    "objectID": "day8/index.html#how-to-fill-out-the-evaluation-form",
    "href": "day8/index.html#how-to-fill-out-the-evaluation-form",
    "title": "Reproducible data analysis",
    "section": "How to fill out the evaluation form",
    "text": "How to fill out the evaluation form\n\nRead each report\nAssign a score according to the rubric (1 - 4 points per category)\nSubmit the evaluation form (Excel sheet) via Moodle"
  },
  {
    "objectID": "day8/index.html#change-the-size-of-a-figure",
    "href": "day8/index.html#change-the-size-of-a-figure",
    "title": "Reproducible data analysis",
    "section": "Change the size of a figure",
    "text": "Change the size of a figure\n\nYou can adjust the size of the figure with chunk options fig.height and fig.width (units in inches)\nFor example:\n\n#| fig.height: 6\n#| fig.width: 6"
  },
  {
    "objectID": "day8/index.html#change-the-font-size",
    "href": "day8/index.html#change-the-font-size",
    "title": "Reproducible data analysis",
    "section": "Change the font size",
    "text": "Change the font size\n\nYou can adjust the overall font size of the figure like this:\n\n\nggplot(gapminder, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  theme_gray(base_size = 16)"
  },
  {
    "objectID": "day8/index.html#change-the-font-size-1",
    "href": "day8/index.html#change-the-font-size-1",
    "title": "Reproducible data analysis",
    "section": "Change the font size",
    "text": "Change the font size\n\nYou can adjust the overall font size of the figure like this:\n\n\nggplot(gapminder, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  theme_gray(base_size = 16)\n\n\n\nThere are other themes available too, but theme_gray() should be fine for the final paper"
  },
  {
    "objectID": "day8/index.html#add-a-pagebreak",
    "href": "day8/index.html#add-a-pagebreak",
    "title": "Reproducible data analysis",
    "section": "Add a pagebreak",
    "text": "Add a pagebreak\n\nYou can add a pagebreak to your document like this:\n\n{{&lt; pagebreak &gt;}}"
  },
  {
    "objectID": "day8/index.html#final-report",
    "href": "day8/index.html#final-report",
    "title": "Reproducible data analysis",
    "section": "Final report",
    "text": "Final report\n\nThe rest of the class time is to work on your final report. I will answer any questions you may have about the report."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Data Analysis",
    "section": "",
    "text": "The ability to analyze data using code is increasingly in demand across academic disciplines from sciences to the humanities, as well as industry.\nUsing code instead of point-and-click software means that analyses can be reproducible, which allows them to be re-used and trusted.\nIn this course, students will learn how to use the R programming language among other tools for reproducible data analysis. Emphasis will be placed on practical usage and best practices to ensure reproducibility. No prior programming experience is required, but it will be helpful if students have a topic that they are interested in analyzing for the final report. All students are expected to have access to a modern computer (laptop) capable of installing and running R, RStudio, Git, and Quarto."
  },
  {
    "objectID": "index.html#goals",
    "href": "index.html#goals",
    "title": "Reproducible Data Analysis",
    "section": "Goals",
    "text": "Goals\nThe goal of this course is to learn how to conduct reproducible data analysis using R.\nBy the end of the course, students should be able to:\n\nLoad, clean, and visualize data using R\nTrack changes to code using Git and GitHub\nWrite a reproducible report using Quarto"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Reproducible Data Analysis",
    "section": "Slides",
    "text": "Slides\n\nDay 1 (2025-06-12): Introduction: Why code? Why reproducibility?\nDay 2 (2025-06-19): Git and GitHub\nDay 3 (2025-06-26): Basic usage of R and RStudio\nDay 4 (2025-07-03): Data loading and tidying with tidyverse\nDay 5 (Media Day): Joining data\nDay 6 (2025-07-10): Data visualization with ggplot2\nDay 7 (2025-07-17): Writing documents with Quarto\nDay 8 (2025-07-24): Quarto, part II"
  },
  {
    "objectID": "index.html#recordings",
    "href": "index.html#recordings",
    "title": "Reproducible Data Analysis",
    "section": "Recordings",
    "text": "Recordings\n\nDay 5: Joining data\n\nFor other lecture recordings, see Moodle."
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "Reproducible Data Analysis",
    "section": "Materials",
    "text": "Materials\n\nDay 2: Git and GitHub\nDay 3: R and RStudio\nDay 4: Data loading and tidying\nDay 5: Joining data (R for Data Science)\nDay 6: ggplot2\nDay 7: Introduction to Reproducible Publications with Quarto (The Carpentries Lesson)\nFinal Report Example"
  },
  {
    "objectID": "index.html#important-deadlines",
    "href": "index.html#important-deadlines",
    "title": "Reproducible Data Analysis",
    "section": "Important Deadlines",
    "text": "Important Deadlines\n\n2025-06-25 11:59PM: Day 2 homework due\n2025-07-02 11:59PM: Day 3 homework due\n2025-07-09 11:59PM: Day 4 homework due\n2025-07-16 11:59PM: Day 5 homework due\n2025-07-30 11:59PM: Final paper due"
  },
  {
    "objectID": "index.html#about-homework-sets",
    "href": "index.html#about-homework-sets",
    "title": "Reproducible Data Analysis",
    "section": "About homework sets",
    "text": "About homework sets\nAll homework assignments (except Day 2) are submitted as R scripts.\nYour code must run without errors.\nThe easiest way to check this is to restart RStudio by closing and opening it, then opening the R script and pressing the “Source” button. Your code should run without errors, and any expected objects such as answer_1, etc. should show up in the environment panel.\nThe process for the final paper is similar, but instead of clicking “Source”, click “Render”.\nPlease check this before submitting your assignments!"
  },
  {
    "objectID": "index.html#extra-practice",
    "href": "index.html#extra-practice",
    "title": "Reproducible Data Analysis",
    "section": "Extra Practice",
    "text": "Extra Practice\nThe following are interactive tutorials in Japanese that you can run in your web browser. They were designed for the 情報処理演習 course. Note that although the tutorials are used as homework in the 情報処理演習 course, they are NOT required assignments for this course. I only provide them here so you can use them for extra practice if you want. Please note that bandwidth is limited to run the tutorials, so they may not always be available.\n以下のリンクは元々は「情報処理演習」のために作成された、webブラウザの中で実行できるRコードのチュートリアルです。\n注意：以下のチュートリアルは「情報処理演習」の宿題に使われていますが、本授業の宿題ではありません。 復習のためだけに掲載されています。\nなお、使用量に限りがありますので、同時に数人以上使われている場合は接続できない可能性があります。\n\nチュートリアルについて\nR入門\nベクトルについて\nデータをファイルから読み込む\nデータの整理（1）\nデータの整理（2）\nデータの可視化（1）\nデータの可視化（2）"
  },
  {
    "objectID": "index.html#office-hours",
    "href": "index.html#office-hours",
    "title": "Reproducible Data Analysis",
    "section": "Office Hours",
    "text": "Office Hours\nBy appointment, please send an email to joelnitta@chiba-u.jp"
  },
  {
    "objectID": "index.html#syllabus",
    "href": "index.html#syllabus",
    "title": "Reproducible Data Analysis",
    "section": "Syllabus",
    "text": "Syllabus\nSyllabus in English"
  },
  {
    "objectID": "day5/index.html#overview",
    "href": "day5/index.html#overview",
    "title": "Reproducible data analysis",
    "section": "Overview",
    "text": "Overview\n\nSo far, we have been working with a single dataframe\nBut sometimes, data comes to us as multiple dataframes\n\nThis is also known as a “database”\n\nWe will learn how to join data across dataframes"
  },
  {
    "objectID": "day5/index.html#recommended-reading",
    "href": "day5/index.html#recommended-reading",
    "title": "Reproducible data analysis",
    "section": "Recommended Reading",
    "text": "Recommended Reading\n\n\nHadely Wickham, R for Data Science (2e)\n\nChapter 19, “Joins”"
  },
  {
    "objectID": "day5/index.html#set-up",
    "href": "day5/index.html#set-up",
    "title": "Reproducible data analysis",
    "section": "Set up",
    "text": "Set up\n\nWe will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\n\nThis is actually a different dataset, so the name for the project isn’t ideal. Naming things is hard!\n\nCreate a new file in that project called joining-practice.R\n\nWe will save all the demonstration code in that script"
  },
  {
    "objectID": "day5/index.html#about-the-nycflights13-data",
    "href": "day5/index.html#about-the-nycflights13-data",
    "title": "Reproducible data analysis",
    "section": "About the nycflights13 data",
    "text": "About the nycflights13 data\n\n\n\nThe main dataframe in nycflights13 is called flights and includes data about flights that departed from New York in 2013\n\n\n\n\n\n\nhttps://www.express.co.uk/travel/articles/1440362/us-holidays-jetblue-flights-travel-low-cost-budget-heathrow-gatwick"
  },
  {
    "objectID": "day5/index.html#about-the-nycflights13-data-1",
    "href": "day5/index.html#about-the-nycflights13-data-1",
    "title": "Reproducible data analysis",
    "section": "About the nycflights13 data",
    "text": "About the nycflights13 data\n\nYou can read the helpfile with ?flights\nYou can view it by typing flights:\n\n\nflights\n\n# A tibble: 336,776 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 336,770 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "day5/index.html#about-the-nycflights13-data-2",
    "href": "day5/index.html#about-the-nycflights13-data-2",
    "title": "Reproducible data analysis",
    "section": "About the nycflights13 data",
    "text": "About the nycflights13 data\n\nThe package also includes several other related dataframes:\n\nweather: hourly meterological data for each airport\nplanes: construction information about each plane\nairports: airport names and locations\nairlines: translation between two letter carrier codes and airline names\n\nWe can read the helpfile for each one and view it in the same way as flights (for example, ?weather)"
  },
  {
    "objectID": "day5/index.html#about-keys",
    "href": "day5/index.html#about-keys",
    "title": "Reproducible data analysis",
    "section": "About keys",
    "text": "About keys\n\nDataframes often include a special column called the primary key\nThe values of the primary key are unique to each row. In other words, we can identify a row using the primary key.\nThe primary key is often the first column in the data, but not always"
  },
  {
    "objectID": "day5/index.html#about-keys-1",
    "href": "day5/index.html#about-keys-1",
    "title": "Reproducible data analysis",
    "section": "About keys",
    "text": "About keys\n\n\n\nLet’s look at an example. The primary key for planes is tailnum\n\nThe “tail number” is a unique code on the tail of each airplane\n\n\n\n\n\n\n\nhttps://www.quora.com/Is-there-a-general-name-for-the-identifying-numbers-on-the-sides-of-airplanes"
  },
  {
    "objectID": "day5/index.html#about-keys-planes",
    "href": "day5/index.html#about-keys-planes",
    "title": "Reproducible data analysis",
    "section": "About keys: planes",
    "text": "About keys: planes\n\nplanes\n\n# A tibble: 3,322 × 9\n  tailnum  year type               manufacturer model engines seats speed engine\n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;              &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n1 N10156   2004 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n2 N102UW   1998 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n3 N103US   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n4 N104UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n5 N10575   2002 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n6 N105UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,316 more rows"
  },
  {
    "objectID": "day5/index.html#about-keys-planes-1",
    "href": "day5/index.html#about-keys-planes-1",
    "title": "Reproducible data analysis",
    "section": "About keys: planes",
    "text": "About keys: planes\nNotice that the values of tailnum appear unique, while the values of other columns may be repeated.\nBut we should actually check this…"
  },
  {
    "objectID": "day5/index.html#verifying-the-primary-key",
    "href": "day5/index.html#verifying-the-primary-key",
    "title": "Reproducible data analysis",
    "section": "Verifying the primary key",
    "text": "Verifying the primary key\nWe can verify that the primary is indeed unique by counting how many times each tailnum occurs in planes:\n\nplanes |&gt;\n  count(tailnum)\n\n# A tibble: 3,322 × 2\n  tailnum     n\n  &lt;chr&gt;   &lt;int&gt;\n1 N10156      1\n2 N102UW      1\n3 N103US      1\n4 N104UW      1\n5 N10575      1\n6 N105UW      1\n# ℹ 3,316 more rows"
  },
  {
    "objectID": "day5/index.html#verifying-the-primary-key-1",
    "href": "day5/index.html#verifying-the-primary-key-1",
    "title": "Reproducible data analysis",
    "section": "Verifying the primary key",
    "text": "Verifying the primary key\nWhat we are really concerned with, is whether any tail number occurs more than once. Let’s check that with filter:\n\nplanes |&gt;\n  count(tailnum) |&gt;\n  filter(n &gt; 1)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: tailnum &lt;chr&gt;, n &lt;int&gt;\n\n\n\nGood!"
  },
  {
    "objectID": "day5/index.html#verifying-the-primary-key-2",
    "href": "day5/index.html#verifying-the-primary-key-2",
    "title": "Reproducible data analysis",
    "section": "Verifying the primary key",
    "text": "Verifying the primary key\nAnother important thing to check is missing values. We can’t identify a row if its identifier is missing!\n\nplanes |&gt;\n  filter(is.na(tailnum))\n\n# A tibble: 0 × 9\n# ℹ 9 variables: tailnum &lt;chr&gt;, year &lt;int&gt;, type &lt;chr&gt;, manufacturer &lt;chr&gt;,\n#   model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\nAlso good!"
  },
  {
    "objectID": "day5/index.html#primary-keys-of-other-dataframes",
    "href": "day5/index.html#primary-keys-of-other-dataframes",
    "title": "Reproducible data analysis",
    "section": "Primary keys of other dataframes",
    "text": "Primary keys of other dataframes\n\nOK, so we know the primary key of planes is tailnum.\nWhat about the other dataframes?"
  },
  {
    "objectID": "day5/index.html#airports",
    "href": "day5/index.html#airports",
    "title": "Reproducible data analysis",
    "section": "airports",
    "text": "airports\nThe primary key of airports is its three-letter airport code, which is named in the the dataframe faa:\n\nairports\n\n# A tibble: 1,458 × 8\n  faa   name                             lat   lon   alt    tz dst   tzone      \n  &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;      \n1 04G   Lansdowne Airport               41.1 -80.6  1044    -5 A     America/Ne…\n2 06A   Moton Field Municipal Airport   32.5 -85.7   264    -6 A     America/Ch…\n3 06C   Schaumburg Regional             42.0 -88.1   801    -6 A     America/Ch…\n4 06N   Randall Airport                 41.4 -74.4   523    -5 A     America/Ne…\n5 09J   Jekyll Island Airport           31.1 -81.4    11    -5 A     America/Ne…\n6 0A9   Elizabethton Municipal Airport  36.4 -82.2  1593    -5 A     America/Ne…\n# ℹ 1,452 more rows"
  },
  {
    "objectID": "day5/index.html#challenge-check-the-key",
    "href": "day5/index.html#challenge-check-the-key",
    "title": "Reproducible data analysis",
    "section": "Challenge: Check the key",
    "text": "Challenge: Check the key\nBut (like I mentioned before) it’s a good idea to verify that faa is indeed a valid primary key! Can you do it?"
  },
  {
    "objectID": "day5/index.html#compound-keys",
    "href": "day5/index.html#compound-keys",
    "title": "Reproducible data analysis",
    "section": "Compound keys",
    "text": "Compound keys\n\nSometimes, no single column is provided as a key. Instead, multiple columns may be combined that uniquely identify each row.\nFor example, in the weather dataframe, the combination of origin and time_hour combined are unique."
  },
  {
    "objectID": "day5/index.html#verify-the-compound-key",
    "href": "day5/index.html#verify-the-compound-key",
    "title": "Reproducible data analysis",
    "section": "Verify the compound key",
    "text": "Verify the compound key\n\nWe can also verify a compound key, much like before.\n\nThis time, we need to add group_by() before counting:\n\n\n\nweather |&gt;\n  group_by(origin, time_hour) |&gt;\n  count() |&gt;\n  filter(n &gt; 1)\n\n# A tibble: 0 × 3\n# Groups:   origin, time_hour [0]\n# ℹ 3 variables: origin &lt;chr&gt;, time_hour &lt;dttm&gt;, n &lt;int&gt;\n\n\n\nGood!"
  },
  {
    "objectID": "day5/index.html#keys-are-used-to-match-dataframes",
    "href": "day5/index.html#keys-are-used-to-match-dataframes",
    "title": "Reproducible data analysis",
    "section": "Keys are used to match dataframes",
    "text": "Keys are used to match dataframes\n\nThe reason we care about keys is that they can be used to link dataframes"
  },
  {
    "objectID": "day5/index.html#summary-of-keys-in-nycflights13",
    "href": "day5/index.html#summary-of-keys-in-nycflights13",
    "title": "Reproducible data analysis",
    "section": "Summary of keys in nycflights13",
    "text": "Summary of keys in nycflights13\n\nVariables making up a primary key are colored grey, and are connected to their corresponding foreign keys with arrows."
  },
  {
    "objectID": "day5/index.html#summary-of-keys",
    "href": "day5/index.html#summary-of-keys",
    "title": "Reproducible data analysis",
    "section": "Summary of keys",
    "text": "Summary of keys\n\nA primary key in one dataframe is a foreign key in another dataframe\nAlso notice that a given column may have different names in different dataframes (compare faa of the airports dataframe to origin of the flights dataframe)"
  },
  {
    "objectID": "day5/index.html#types-of-joins",
    "href": "day5/index.html#types-of-joins",
    "title": "Reproducible data analysis",
    "section": "Types of joins",
    "text": "Types of joins\n\nNow that we understand the theory behind joining (you need keys!), we can learn about joining functions. There are two main kinds:\n\nMutating joins add new columns to a dataframe (like the mutate() function)\nFiltering joins filter the rows of a dataframe (like the filter() function)\n\nWe will start with mutating joins."
  },
  {
    "objectID": "day5/index.html#make-a-smaller-demo-dataset",
    "href": "day5/index.html#make-a-smaller-demo-dataset",
    "title": "Reproducible data analysis",
    "section": "Make a smaller demo dataset",
    "text": "Make a smaller demo dataset\n\nMutating joins add columns to the right side, so they may be hard to see if your dataframe already has many columns.\nLet’s make a smaller one called flights2 for demo purposes:"
  },
  {
    "objectID": "day5/index.html#left_join",
    "href": "day5/index.html#left_join",
    "title": "Reproducible data analysis",
    "section": "left_join()",
    "text": "left_join()\n\nThe most frequently used join\n\nAdds new columns to the dataframe you’re joining to\n\nFor example, add the airline carrier name to the flights data:"
  },
  {
    "objectID": "day5/index.html#challenge-join-the-weather-data",
    "href": "day5/index.html#challenge-join-the-weather-data",
    "title": "Reproducible data analysis",
    "section": "Challenge: join the weather data",
    "text": "Challenge: join the weather data\nLet’s say we want to know more about the weather on the day of each flight.\nHow can we join the weather data to the flight data?"
  },
  {
    "objectID": "day5/index.html#specifying-the-key",
    "href": "day5/index.html#specifying-the-key",
    "title": "Reproducible data analysis",
    "section": "Specifying the key",
    "text": "Specifying the key\n\nYou may have noticed a message like this in the output:\n\nJoining with `by = join_by(carrier)`"
  },
  {
    "objectID": "day5/index.html#other-mutating-joins",
    "href": "day5/index.html#other-mutating-joins",
    "title": "Reproducible data analysis",
    "section": "Other mutating joins",
    "text": "Other mutating joins\n*_join(x, y)\n\nleft_join(x, y): keep all rows in x\nright_join(x, y): keep all rows in y\ninner_join(x, y): keep only rows in common between x and y\nfull_join(x, y): keep all rows in both x and y\n\nWe don’t have time to cover them in detail, but please try them out!"
  },
  {
    "objectID": "day5/index.html#filtering-joins",
    "href": "day5/index.html#filtering-joins",
    "title": "Reproducible data analysis",
    "section": "Filtering joins",
    "text": "Filtering joins\n\nFiltering joins are different from mutating joins in that they do not add new data\nInstead, we only use them to filter data"
  },
  {
    "objectID": "day5/index.html#semi_join",
    "href": "day5/index.html#semi_join",
    "title": "Reproducible data analysis",
    "section": "semi_join()",
    "text": "semi_join()\n\nsemi_join(x, y): Keep all rows in x that have a match in y"
  },
  {
    "objectID": "day5/index.html#anti_join",
    "href": "day5/index.html#anti_join",
    "title": "Reproducible data analysis",
    "section": "anti_join()",
    "text": "anti_join()\n\nanti_join(x, y): Keep all rows in x that don’t have a match in y\nUseful to check for implicit missing data"
  },
  {
    "objectID": "day5/index.html#summary",
    "href": "day5/index.html#summary",
    "title": "Reproducible data analysis",
    "section": "Summary",
    "text": "Summary\n\nKeys are columns that we use to join dataframes\nMutating joins add columns to a dataframe\nFiltering joins filter the rows of a dataframe\n\nKnowing how to join data will greatly expand the kinds of data analysis you can do. Now you are not limited to a single dataframe, but have the ability to combine dataframes together as needed."
  },
  {
    "objectID": "day2/index.html#what-is-git",
    "href": "day2/index.html#what-is-git",
    "title": "Reproducible data analysis",
    "section": "What is Git?",
    "text": "What is Git?\n\nGit is version control software\nYou can think of it kind of like the “track comments” function in MS Word or Google Docs, but for code (plain text)"
  },
  {
    "objectID": "day2/index.html#why-use-git",
    "href": "day2/index.html#why-use-git",
    "title": "Reproducible data analysis",
    "section": "Why use Git?",
    "text": "Why use Git?\n\nTo share code\n\nImportant for reproducibility. Other people can’t reproduce your analysis if they can’t access your code\n\nTo have a history of all the things your tried in your analysis\n\nYou can go back and see what you have changed. Especially important when something breaks.\n\nTo organize how you develop your code\n\nYou will make comments about all your changes to your code (“commits”), so this forces you to think about how you are writing your code"
  },
  {
    "objectID": "day2/index.html#what-is-github",
    "href": "day2/index.html#what-is-github",
    "title": "Reproducible data analysis",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nAn online tool for managing projects that use Git\nActs like a cloud backup tool for your code\nMakes it easy to share code with others"
  },
  {
    "objectID": "day2/index.html#setup",
    "href": "day2/index.html#setup",
    "title": "Reproducible data analysis",
    "section": "Setup",
    "text": "Setup\n\nYou need to install git on your computer and set up an account on https://github.com"
  },
  {
    "objectID": "day2/index.html#instructions-to-install-git",
    "href": "day2/index.html#instructions-to-install-git",
    "title": "Reproducible data analysis",
    "section": "Instructions to install git",
    "text": "Instructions to install git\n\nMac\n\nFirst check if git is already installed by running git in the terminal\nIf you do need to install git, install Homebrew first\n\nWindows\nLinux"
  },
  {
    "objectID": "day2/index.html#setup-github-account",
    "href": "day2/index.html#setup-github-account",
    "title": "Reproducible data analysis",
    "section": "Setup GitHub account",
    "text": "Setup GitHub account\n\nNavigate to https://github.com/ and follow the prompts"
  },
  {
    "objectID": "day2/index.html#setup-github-authentication-pat",
    "href": "day2/index.html#setup-github-authentication-pat",
    "title": "Reproducible data analysis",
    "section": "Setup GitHub authentication: PAT",
    "text": "Setup GitHub authentication: PAT\nA PAT is a “Personal Access Token”. It is like an extra-secure password.\nThere is another method for authentication called SSH, but it’s a bit more complicated to set up. If you want to use SSH, see these instructions."
  },
  {
    "objectID": "day2/index.html#create-pat-on-github",
    "href": "day2/index.html#create-pat-on-github",
    "title": "Reproducible data analysis",
    "section": "Create PAT on GitHub",
    "text": "Create PAT on GitHub\n\nGo to https://github.com/settings/tokens\n\nOr, from R, first install usethis with install.packages(\"usethis\"), then do\nusethis::create_github_token()\n\nLook over the scopes (permissions); “repo”, “user”, and “workflow” are recommended. Recommended scopes will be pre-selected if you used create_github_token().\nClick “Generate token”."
  },
  {
    "objectID": "day2/index.html#save-your-pat",
    "href": "day2/index.html#save-your-pat",
    "title": "Reproducible data analysis",
    "section": "Save your PAT",
    "text": "Save your PAT\n\nCopy the generated PAT to your clipboard. DON’T CLOSE THE BROWSER WINDOW YET.\nInstall gitcreds in R with install.packages(\"gitcreds\")\nNext, run gitcreds::gitcreds_set().\nEnter the PAT that you copied from GitHub. Now you can close the browser window.\n\nDone!"
  },
  {
    "objectID": "day2/index.html#a-few-more-notes-about-pat",
    "href": "day2/index.html#a-few-more-notes-about-pat",
    "title": "Reproducible data analysis",
    "section": "A few more notes about PAT",
    "text": "A few more notes about PAT\n\nYour PAT will expire (after 30 days by default).\nYou then need to re-create a new one on GitHub and enter it again with gitcreds::gitcreds_set().\nUsing an expiration date is recommended for security"
  },
  {
    "objectID": "day2/index.html#troubleshooting",
    "href": "day2/index.html#troubleshooting",
    "title": "Reproducible data analysis",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nIf you get an error like Could not find system git, try the following:\nGo to Tools -&gt; Global Options, choose the git/svn tab , then you need to browse for the git executable - presumably in C:\\Program Files\\Git\\bin\\git.exe"
  },
  {
    "objectID": "day2/index.html#introduce-yourself-to-git",
    "href": "day2/index.html#introduce-yourself-to-git",
    "title": "Reproducible data analysis",
    "section": "Introduce yourself to git",
    "text": "Introduce yourself to git\nYou need to let git know your GitHub username and email address:\ngit config --global user.name \"your_github_username\"\ngit config --global user.email \"your_email_adress\"\ngit config --global --list"
  },
  {
    "objectID": "day2/index.html#change-some-default-settings",
    "href": "day2/index.html#change-some-default-settings",
    "title": "Reproducible data analysis",
    "section": "Change some default settings",
    "text": "Change some default settings\n\nGit can allow you to have multiple versions of your code at the same time.\nThese are called “branches”.\nTell git to use the name “main” for the main branch:\n\ngit config --global init.defaultBranch main"
  },
  {
    "objectID": "day2/index.html#about-repos",
    "href": "day2/index.html#about-repos",
    "title": "Reproducible data analysis",
    "section": "About repos",
    "text": "About repos\n\nA ‘repo’ (short for repository) is a folder where you store all the code and other files needed for a project.\n\ngit tracks the content of a repo"
  },
  {
    "objectID": "day2/index.html#remote-and-local-repos",
    "href": "day2/index.html#remote-and-local-repos",
    "title": "Reproducible data analysis",
    "section": "Remote and local repos",
    "text": "Remote and local repos\n\nA local repo is just the project on your own computer\nA remote repo is a copy of the repo online (on GitHub)\n\nSomewhat confusingly, the remote repo is typically referred to by the name origin"
  },
  {
    "objectID": "day2/index.html#cloning",
    "href": "day2/index.html#cloning",
    "title": "Reproducible data analysis",
    "section": "Cloning",
    "text": "Cloning\nSometimes, you want to download a repo that doesn’t exist on your computer yet.\n\nCloning is copying an online repo to your computer"
  },
  {
    "objectID": "day2/index.html#pushing-and-pulling",
    "href": "day2/index.html#pushing-and-pulling",
    "title": "Reproducible data analysis",
    "section": "Pushing and pulling",
    "text": "Pushing and pulling\nOnce you have the repos set up, you need to keep them in sync.\n\nYou push changes from your local repo to the remote\nYou pull changes from the remote repo to your local one"
  },
  {
    "objectID": "day2/index.html#commits",
    "href": "day2/index.html#commits",
    "title": "Reproducible data analysis",
    "section": "Commits",
    "text": "Commits\n\nA commit is a single change made to a repo that you have stored in git’s history.\n\nThere are two steps to making a commit."
  },
  {
    "objectID": "day2/index.html#staging-and-committing",
    "href": "day2/index.html#staging-and-committing",
    "title": "Reproducible data analysis",
    "section": "Staging and committing",
    "text": "Staging and committing\nA file that has been changed is not automatically added to git’s history.\n\nYou need to stage the file (or part of the file) that you want to add to a particular commit\nNext, you type a short message describing the change, the commit message\nFinally, you commit the change to log it in git’s history"
  },
  {
    "objectID": "day2/index.html#the-.gitignore-file",
    "href": "day2/index.html#the-.gitignore-file",
    "title": "Reproducible data analysis",
    "section": "The .gitignore file",
    "text": "The .gitignore file\nIf there are any files you don’t want git to track, you can ignore them by listing them in a special file called .gitignore.\nIt is usually a good idea to ignore raw data files and output files. We only want to track code (in other words, the analysis itself)"
  },
  {
    "objectID": "day2/index.html#how-this-works-in-practice",
    "href": "day2/index.html#how-this-works-in-practice",
    "title": "Reproducible data analysis",
    "section": "How this works in practice",
    "text": "How this works in practice\nWe will go through a typical git workflow together in class using RStudio.\nThis is explained in the “Intro to Git” markdown file, which you will copy to your computer when you clone the Day 2 repo."
  },
  {
    "objectID": "day3/day03_intro_to_r.html",
    "href": "day3/day03_intro_to_r.html",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "",
    "text": "By the end of this class, you should\n\nBe able to explain what R and RStudio are, what they are used for, and how they relate to each other.\nDescribe the purpose of the RStudio Script, Console, Environment, and Plots panes.\nOrganize files and directories for a set of analyses as an R Project, and understand the purpose of the working directory.\nUse the built-in RStudio help interface to search for more information on R functions.\nDemonstrate how to provide sufficient information for troubleshooting with the R user community."
  },
  {
    "objectID": "day3/day03_intro_to_r.html#learning-objectives",
    "href": "day3/day03_intro_to_r.html#learning-objectives",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "",
    "text": "By the end of this class, you should\n\nBe able to explain what R and RStudio are, what they are used for, and how they relate to each other.\nDescribe the purpose of the RStudio Script, Console, Environment, and Plots panes.\nOrganize files and directories for a set of analyses as an R Project, and understand the purpose of the working directory.\nUse the built-in RStudio help interface to search for more information on R functions.\nDemonstrate how to provide sufficient information for troubleshooting with the R user community."
  },
  {
    "objectID": "day3/day03_intro_to_r.html#what-is-r-what-is-rstudio",
    "href": "day3/day03_intro_to_r.html#what-is-r-what-is-rstudio",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "What is R? What is RStudio?",
    "text": "What is R? What is RStudio?\nThe term “R” is used to refer to both the programming language and the software that interprets the scripts written using it.\nRStudio is a popular way to write R scripts and interact with the R software. To function correctly, RStudio needs R and therefore both need to be installed on your computer."
  },
  {
    "objectID": "day3/day03_intro_to_r.html#why-learn-r",
    "href": "day3/day03_intro_to_r.html#why-learn-r",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Why learn R?",
    "text": "Why learn R?\n\nR does not involve lots of pointing and clicking, and that’s a good thing\nIn R, the results of your analysis rely on a series of written commands, and not on remembering a succession of pointing and clicking. That is a good thing! So, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results. With a stored series of commands in an R script, you can repeat running them and R will process the new dataset exactly the same way as before.\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\nWorking with scripts forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n\nR code is great for reproducibility\nReproducibility is when someone else, including your future self, can obtain the same results from the same dataset when using the same analysis.\nR integrates with other tools to generate manuscripts from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript are updated automatically.\nR is widely used in academia and in industries such as pharma and biotech. These organisations expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n\nR is interdisciplinary and extensible\nWith 10,000+ packages that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyze your data. For instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more.\n\n\nR works on data of all shapes and sizes\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you.\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient.\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n\nR produces high-quality graphics\nThe plotting functionalities in R are endless, and allow you to adjust any aspect of your graph to visualize your data more effectively.\n\n\nR has a large and welcoming community\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, RStudio community, and Slack channels such as\nthe R for Data Science online community (https://www.rfordatasci.com/). In addition, there are numerous online and in person meetups organised globally through organisations such as R Ladies Global (https://rladies.org/).\n\n\nNot only is R free, but it is also open-source and cross-platform\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs."
  },
  {
    "objectID": "day3/day03_intro_to_r.html#knowing-your-way-around-rstudio",
    "href": "day3/day03_intro_to_r.html#knowing-your-way-around-rstudio",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Knowing your way around RStudio",
    "text": "Knowing your way around RStudio\nLet’s start by learning about RStudio, which is an Integrated Development Environment (IDE) for working with R.\nThe RStudio IDE open-source product is free under the Affero General Public License (AGPL) v3. The RStudio IDE is also available with a commercial license and priority email support from RStudio, PBC.\nWe will use RStudio IDE to write code, navigate the files on our computer, inspect the variables we are going to create, and visualize the plots we will generate. RStudio can also be used for other things (e.g., version control, developing packages, writing Shiny apps) that we will not cover during the workshop.\n\n\n\nRStudio interface screenshot. Clockwise from top left: Source,Environment/History, Files/Plots/Packages/Help/Viewer,Console\n\n\nRStudio is divided into 4 “panes”:\n\nThe Source for your scripts and documents (top-left, in the default layout)\nYour Environment/History (top-right) which shows all the objects in your working space (Environment) and your command history (History)\nYour Files/Plots/Packages/Help/Viewer (bottom-right)\nThe R Console (bottom-left)\n\nThe placement of these panes and their content can be customized (see menu, Tools -&gt; Global Options -&gt; Pane Layout). For ease of use, settings such as background color, font color, font size, and zoom level can also be adjusted in this menu (Global Options -&gt; Appearance).\nOne of the advantages of using RStudio is that all the information you need to write code is available in a single window. Additionally, with many shortcuts, autocompletion, and highlighting for the major file types you use while developing in R, RStudio will make typing easier and less error-prone."
  },
  {
    "objectID": "day3/day03_intro_to_r.html#creating-a-r-project",
    "href": "day3/day03_intro_to_r.html#creating-a-r-project",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Creating a R Project",
    "text": "Creating a R Project\nIt is good practice to keep a set of related data, analyses, and text self-contained in a single folder, called the working directory. All of the scripts within this folder can then use relative paths to files that indicate where inside the project a file is located (as opposed to absolute paths, which point to where a file is on a specific computer). Working this way allows you to move your project around on your computer and share it with others without worrying about whether or not the underlying scripts will still work.\nRStudio provides a helpful set of tools to do this through its “Projects” interface, which not only creates a working directory for you, but also remembers its location (allowing you to quickly navigate to it) and optionally preserves custom settings and (re-)open files to assist resume work after a break. Go through the steps for creating an “R Project” for this tutorial below.\n\nStart RStudio.\nUnder the File menu, click on New Project. Choose New Directory, then New Project.\nEnter a name for this new folder (I recommend “day03-practice”), and choose a convenient location for it (I recommend creating a folder called “data-analysis-course” on the desktop). This will be your working directory for this project.\nClick on Create Project (check the box that says “Create a git repository”).\n\n\nThe .RProj file\nLet’s review what happened: we created a new R project, and RStudio opened the project.\nLook at the file pane in the lower-right. You should see some files that were newly created by RStudio: .gitgnore and day03-practice.Rproj.\nWe learned about .gitignore last week. By default, RStudio creates a .gitignore file for you that lists files that your project should ignore; you can open it to see what is says if you want, but leave it as it is.\nThe .Rproj file contains settings used by RStudio for your project. Generally, you don’t edit it by hand. But it does have one other very useful function: when you want to start working on a project, you can double-click that file, and RStudio will open with the project loaded. Let’s try this. I think this is the easiest way to re-open a project.\n\n\nChange default settings\nClick “Tools” -&gt; “Global Options”, then under “Workspace” de-select “Restore .RData into workspace at startup” and set “Save workspace to .RData on exit” to “Never”.\nA workspace is your current working environment in R which includes any user-defined object. By default, all of these objects will be saved, and automatically loaded, when you reopen your project. Saving a workspace to .RData can be cumbersome, especially if you are working with larger datasets, and it can lead to hard to debug errors by having objects in memory you forgot you had. Therefore, it is often a good idea to turn this off.\n\n\n\nSet ‘Save workspace to .RData on exit’ to ‘Never’"
  },
  {
    "objectID": "day3/day03_intro_to_r.html#creating-objects-in-r",
    "href": "day3/day03_intro_to_r.html#creating-objects-in-r",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Creating objects in R",
    "text": "Creating objects in R\nYou can get output from R simply by typing math in the console:\n\n3 + 5\n\n[1] 8\n\n12 / 7\n\n[1] 1.714286\n\n\nHowever, to do useful and interesting things, we need to assign values to objects. To create an object, we need to give it a name followed by the assignment operator &lt;-, and the value we want to give it:\n\nweight_kg &lt;- 55\n\n&lt;- is the assignment operator. It assigns values on the right to the object on the left. So, after executing x &lt;- 3, the value of x is 3. For historical reasons, you can also use = for assignments, but not in every context. Because of the slight differences in syntax, it is good practice to always use &lt;- for assignments.\nIn RStudio, typing Alt + - (push Alt at the same time as the - key) will write &lt;- in a single keystroke in a PC, while typing Option + - (push Option at the same time as the - key) does the same in a Mac.\nObjects can be given almost any name such as x, current_temperature, or subject_id. Here are some further guidelines on naming objects:\n\nYou want your object names to be explicit and not too long.\nThey cannot start with a number (2x is not valid, but x2 is).\nR is case sensitive, so for example, weight_kg is different from Weight_kg.\nThere are some names that cannot be used because they are the names of fundamental functions in R (e.g., if, else, for, see here for a complete list). In general, even if it’s allowed, it’s best to not use other function names (e.g., c, T, mean, data, df, weights). If in doubt, check the help to see if the name is already in use.\nIt’s best to avoid dots (.) within names. Many function names in R itself have them and dots also have a special meaning (methods) in R and other programming languages. To avoid confusion, don’t include dots in names.\nIt is recommended to use nouns for object names and verbs for function names.\nBe consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Styles can include “lower_snake”, “UPPER_SNAKE”, “lowerCamelCase”, “UpperCamelCase”, etc. Using a consistent coding style makes your code clearer to read for your future self and your collaborators. In R, three popular style guides come from Google, Jean Fan and the tidyverse. The tidyverse style is very comprehensive and may seem overwhelming at first. You can install the lintr package to automatically check for issues in the styling of your code.\n\n\nMore about objects\nWhat are known as objects in R are known as variables in many other programming languages. Depending on the context, object and variable can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg &lt;- 55 # doesn't print anything\n(weight_kg &lt;- 55) # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg # and so does typing the name of the object\n\n[1] 55\n\n\nNow that R has weight_kg in memory, we can do arithmetic with it. For instance, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg):\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one:\n\nweight_kg &lt;- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nThis means that assigning a value to one object does not change the values of other objects. For example, let’s store the animal’s weight in pounds in a new object, weight_lb:\n\nweight_lb &lt;- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg &lt;- 100\n\nWhat do you think is the current content of the object weight_lb? 126.5 or 220?\n\n\nSaving your code\nUp to now, your code has been in the console. This is useful for quick queries but not so helpful if you want to revisit your work for any reason. A script can be opened by pressing Ctrl + Shift + N. It is wise to save your script file immediately. To do this press Ctrl + S. This will open a dialogue box where you can decide where to save your script file, and what to name it. The .R file extension is added automatically and ensures your file will open with RStudio.\nDon’t forget to save your work periodically by pressing Ctrl + S.\n\n\nComments\nThe comment character in R is #. Anything to the right of a # in a script will be ignored by R. It is useful to leave notes and explanations in your scripts. For convenience, RStudio provides a keyboard shortcut to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard Ctrl + Shift + C. If you only want to comment out one line, you can put the cursor at any location of that line (i.e. no need to select the whole line), then press Ctrl + Shift + C.\n\n\nFunctions and their arguments\nFunctions are “canned scripts” that automate more complicated sets of commands including operations assignments, etc. Many functions are predefined, or can be made available by importing R packages (more on that later). A function usually takes one or more inputs called arguments. Functions often (but not always) return a value. A typical example would be the function sqrt(). The input (the argument) must be a number, and the return value (in fact, the output) is the square root of that number. Executing a function (‘running it’) is called calling the function. An example of a function call is:\n\nweight_kg &lt;- sqrt(10)\n\nHere, the value of 10 is given to the sqrt() function, the sqrt() function calculates the square root, and returns the value which is then assigned to the object weight_kg. This function takes one argument, other functions might take several.\nThe return ‘value’ of a function need not be numerical (like that of sqrt()), and it also does not need to be a single item: it can be a set of things, or even a dataset. We’ll see that when we read data files into R.\nArguments can be anything, not only numbers or filenames, but also other objects. Exactly what each argument means differs per function, and must be looked up in the documentation (see below). Some functions take arguments which may either be specified by the user, or, if left out, take on a default value: these are called options. Options are typically used to alter the way the function operates, such as whether it ignores ‘bad values’, or what symbol to use in a plot. However, if you want something specific, you can specify a value of your choice which will be used instead of the default.\nLet’s try a function that can take multiple arguments: round().\n\nround(3.14159)\n\n[1] 3\n\n\nHere, we’ve called round() with just one argument, 3.14159, and it has returned the value 3. That’s because the default is to round to the nearest whole number. If we want more digits we can see how to do that by getting information about the round function. We can use args(round) to find what arguments it takes, or look at the help for this function using ?round.\n\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n\n\n?round\n\nWe see that if we want a different number of digits, we can type digits = 2 or however many we want.\n\nround(3.14159, digits = 2)\n\n[1] 3.14"
  },
  {
    "objectID": "day3/day03_intro_to_r.html#vectors-and-data-types",
    "href": "day3/day03_intro_to_r.html#vectors-and-data-types",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Vectors and data types",
    "text": "Vectors and data types\nA vector is the most common and basic data type in R, and is pretty much the workhorse of R. A vector is composed by a series of values, which can be either numbers or characters. We can assign a series of values to a vector using the c() function. For example we can create a vector of animal weights and assign it to a new object weight_g:\n\nweight_g &lt;- c(50, 60, 65, 82)\nweight_g\n\n[1] 50 60 65 82\n\n\nA vector can also contain characters:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\")\nanimals\n\n[1] \"mouse\" \"rat\"   \"dog\"  \n\n\nThe quotes around “mouse”, “rat”, etc. are essential here. Without the quotes R will assume objects have been created called mouse, rat and dog. As these objects don’t exist in R’s memory, there will be an error message.\nThere are many functions that allow you to inspect the content of a vector. length() tells you how many elements are in a particular vector:\n\nlength(weight_g)\n\n[1] 4\n\nlength(animals)\n\n[1] 3\n\n\nAn important feature of a vector, is that all of the elements are the same type of data. The function typeof() indicates what kind of object you are working with (notice that R confusingly calls numeric data “double”):\n\ntypeof(weight_g)\n\n[1] \"double\"\n\ntypeof(animals)\n\n[1] \"character\"\n\n\nThe function str() provides an overview of the structure of an object and its elements. It is a useful function when working with large and complex objects:\n\nstr(weight_g)\n\n num [1:4] 50 60 65 82\n\nstr(animals)\n\n chr [1:3] \"mouse\" \"rat\" \"dog\"\n\n\nYou can use the c() function to add other elements to your vector:\n\nweight_g &lt;- c(weight_g, 90) # add to the end of the vector\nweight_g &lt;- c(30, weight_g) # add to the beginning of the vector\nweight_g\n\n[1] 30 50 60 65 82 90\n\n\nIn the first line, we take the original vector weight_g, add the value 90 to the end of it, and save the result back into weight_g. Then we add the value 30 to the beginning, again saving the result back into weight_g.\nWe can do this over and over again to grow a vector, or assemble a dataset. As we program, this may be useful to add results that we are collecting or calculating.\nAn atomic vector is the simplest R data type and is a linear vector of a single type. Above, we saw 2 of the 6 main atomic vector types that R uses: \"character\" and \"numeric\" (or \"double\"). These are the basic building blocks that all R objects are built from. The other 4 atomic vector types are:\n\n\"logical\" for TRUE and FALSE (the boolean data type)\n\"integer\" for integer numbers (e.g., 2L, the L indicates to R that it’s an integer)\n\"complex\" to represent complex numbers with real and imaginary parts (e.g., 1 + 4i) and that’s all we’re going to say about them\n\"raw\" for bitstreams that we won’t discuss further\n\nYou can check the type of your vector using the typeof() function and inputting your vector as the argument.\nVectors are one of the many data structures that R uses. Other important ones are lists (list), matrices (matrix), data frames (data.frame), factors (factor) and arrays (array)."
  },
  {
    "objectID": "day3/day03_intro_to_r.html#subsetting-vectors",
    "href": "day3/day03_intro_to_r.html#subsetting-vectors",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Subsetting vectors",
    "text": "Subsetting vectors\nIf we want to extract one or several values from a vector, we must provide one or several indices in square brackets. For instance:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[2]\n\n[1] \"rat\"\n\nanimals[c(3, 2)]\n\n[1] \"dog\" \"rat\"\n\n\nWe can also repeat the indices to create an object with more elements than the original one:\n\nmore_animals &lt;- animals[c(1, 2, 3, 2, 1, 4)]\nmore_animals\n\n[1] \"mouse\" \"rat\"   \"dog\"   \"rat\"   \"mouse\" \"cat\"  \n\n\nR indices start at 1. Programming languages like Fortran, MATLAB, Julia, and R start counting at 1, because that’s what human beings typically do. Languages in the C family (including C++, Java, Perl, and Python) count from 0 because that’s simpler for computers to do.\n\nConditional subsetting\nAnother common way of subsetting is by using a logical vector. TRUE will select the element with the same index, while FALSE will not:\n\nweight_g &lt;- c(21, 34, 39, 54, 55)\nweight_g[c(TRUE, FALSE, FALSE, TRUE, TRUE)]\n\n[1] 21 54 55\n\n\nTypically, these logical vectors are not typed by hand, but are the output of other functions or logical tests. For instance, if you wanted to select only the values above 50:\n\nweight_g &gt; 50 # will return logicals with TRUE for the indices that meet the condition\n\n[1] FALSE FALSE FALSE  TRUE  TRUE\n\n## so we can use this to select only the values above 50\nweight_g[weight_g &gt; 50]\n\n[1] 54 55\n\n\nYou can combine multiple tests using & (both conditions are true, AND) or | (at least one of the conditions is true, OR):\n\nweight_g[weight_g &gt; 30 & weight_g &lt; 50]\n\n[1] 34 39\n\nweight_g[weight_g &lt;= 30 | weight_g == 55]\n\n[1] 21 55\n\nweight_g[weight_g &gt;= 30 & weight_g == 21]\n\nnumeric(0)\n\n\nHere, &gt; for “greater than”, &lt; stands for “less than”, &lt;= for “less than or equal to”, and == for “equal to”. The double equal sign == is a test for numerical equality between the left and right hand sides, and should not be confused with the single = sign, which performs variable assignment (similar to &lt;-).\nA common task is to search for certain strings in a vector. One could use the “or” operator | to test for equality to multiple values, but this can quickly become tedious. The function %in% allows you to test if any of the elements of a search vector are found:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\", \"cat\", \"cat\")\n\n# return both rat and cat\nanimals[animals == \"cat\" | animals == \"rat\"]\n\n[1] \"rat\" \"cat\" \"cat\"\n\n# return a logical vector that is TRUE for the elements within animals\n# that are found in the character vector and FALSE for those that are not\nanimals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\", \"bird\", \"fish\")\n\n[1] FALSE  TRUE  TRUE  TRUE  TRUE\n\n# use the logical vector created by %in% to return elements from animals\n# that are found in the character vector\nanimals[animals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\", \"bird\", \"fish\")]\n\n[1] \"rat\" \"dog\" \"cat\" \"cat\""
  },
  {
    "objectID": "day3/day03_intro_to_r.html#submitting-the-homework",
    "href": "day3/day03_intro_to_r.html#submitting-the-homework",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Submitting the homework",
    "text": "Submitting the homework\nGo to Moodle, click on the Day 3 Homework assignment, and click on the link to accept the assignment. This will create the repo in your GitHub account.\nNext, clone the remote repo to your local machine. Then, edit the file day_03_homework.R file in RStudio. Make sure that your code runs without errors. Once you have done so, commit your changes and push to the remote. Don’t forget to push! If you don’t push, your work will not be submitted.\nYou can double check that you’ve successfully submitted (pushed) the homework by visiting your GitHub repo in your browser (use the same link in Moodle that you clicked to accept the assignment). Make sure the homework file there shows the same changes that you made in RStudio.\nBe sure to do this BY THE DEADLINE, or your work will not be counted."
  },
  {
    "objectID": "day3/day03_intro_to_r.html#attributions",
    "href": "day3/day03_intro_to_r.html#attributions",
    "title": "Reproducible Data Analysis Day 3: Introduction to R and RStudio",
    "section": "Attributions",
    "text": "Attributions\nThese materials were modified by Joel H. Nitta from the Data Carpentry “Data Analysis and Visualization in R for Ecologists” lesson (https://datacarpentry.org/R-ecology-lesson) under the CC BY Attribution 4.0 International license."
  },
  {
    "objectID": "day4/index.html#announcements-about-the-website",
    "href": "day4/index.html#announcements-about-the-website",
    "title": "Reproducible data analysis",
    "section": "Announcements: About the website",
    "text": "Announcements: About the website\n\nI updated the website\n\nMaterials (readings) are now easier to access\nExtra practice has been added"
  },
  {
    "objectID": "day4/index.html#announcements-about-homework",
    "href": "day4/index.html#announcements-about-homework",
    "title": "Reproducible data analysis",
    "section": "Announcements: About homework",
    "text": "Announcements: About homework\n\nI will demonstrate one more time how to access and submit the homework assignment\nYou can find the detailed explanation in the Day 2 materials"
  },
  {
    "objectID": "day4/index.html#refresher-vectors",
    "href": "day4/index.html#refresher-vectors",
    "title": "Reproducible data analysis",
    "section": "Refresher: vectors",
    "text": "Refresher: vectors\n\nRecall that a vector is a series of values that are all the same type\n\n\n# A numeric vector:\nc(1, 2, 3)\n\n[1] 1 2 3\n\n# A character vector:\nc(\"banana\", \"orange\", \"apple\")\n\n[1] \"banana\" \"orange\" \"apple\" \n\n# A logical vector:\nc(TRUE, FALSE, TRUE)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day4/index.html#about-dataframes",
    "href": "day4/index.html#about-dataframes",
    "title": "Reproducible data analysis",
    "section": "About dataframes",
    "text": "About dataframes\n\nA dataframe is a collection of vectors\n\nbasically like a spreadsheet in Excel\n\n\n\n\n\nToday we will learn to load and tidy (or “wrangle”) dataframes"
  },
  {
    "objectID": "day4/index.html#about-data-tidying-wrangling",
    "href": "day4/index.html#about-data-tidying-wrangling",
    "title": "Reproducible data analysis",
    "section": "About data tidying (“wrangling”)",
    "text": "About data tidying (“wrangling”)\n\nData often come to us in a form that is not suitable for analysis\nData tidying (or “wrangling”) is the process of re-formatting the data so it can be analyzed"
  },
  {
    "objectID": "day4/index.html#set-up-project",
    "href": "day4/index.html#set-up-project",
    "title": "Reproducible data analysis",
    "section": "Set up project",
    "text": "Set up project\n\nCreate a new project called gapminder-analysis in the data-analysis-course folder on your Desktop\n\nWe will use the “gapminder” dataset for the rest of the course\n\nInside that project, create a folder called data_raw to store raw data\n\nYou should never edit raw data directly (treat it as read-only)\n\nAlso create a file to write today’s code. You could call it data-tidying-practice.R"
  },
  {
    "objectID": "day4/index.html#set-up-project-1",
    "href": "day4/index.html#set-up-project-1",
    "title": "Reproducible data analysis",
    "section": "Set up project",
    "text": "Set up project\n\nDownload the gapminder.csv file from Moodle and put it in data_raw\n\nIt is also available from here"
  },
  {
    "objectID": "day4/index.html#about-r-packages",
    "href": "day4/index.html#about-r-packages",
    "title": "Reproducible data analysis",
    "section": "About R Packages",
    "text": "About R Packages\n\nThe functions we have used so far are included in R (called “Base R”)\nBut sometimes we need to do something that is not available in Base R\nPackages are collections of code that extend the functionality of R\n\nThere are nearly 200,000 packages currently available!"
  },
  {
    "objectID": "day4/index.html#install-tidyverse",
    "href": "day4/index.html#install-tidyverse",
    "title": "Reproducible data analysis",
    "section": "Install tidyverse",
    "text": "Install tidyverse\n\nToday we will use the tidyverse set of packages for working with data\nInstall tidyverse using install.packages():\n\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "day4/index.html#loading-packages",
    "href": "day4/index.html#loading-packages",
    "title": "Reproducible data analysis",
    "section": "Loading packages",
    "text": "Loading packages\n\nThe install.packages() function downloads the package to your computer\n\nYou only need to do this once per package (or when you want to update the package)\n\nBut R isn’t able to use the package yet\nThe library() function tells R to load a package so that we can use it"
  },
  {
    "objectID": "day4/index.html#load-tidyverse",
    "href": "day4/index.html#load-tidyverse",
    "title": "Reproducible data analysis",
    "section": "Load tidyverse",
    "text": "Load tidyverse\n\nLet’s load the tidyverse package with library()\n\nNote that you don’t need to use quotation marks for the package name\n\n\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "day4/index.html#load-tidyverse-1",
    "href": "day4/index.html#load-tidyverse-1",
    "title": "Reproducible data analysis",
    "section": "Load tidyverse",
    "text": "Load tidyverse\n\ntidyverse actually includes multiple packages (dplyr, tidyr, readr, etc.)\n\nThese are all packages that are useful for loading and cleaning data"
  },
  {
    "objectID": "day4/index.html#load-data",
    "href": "day4/index.html#load-data",
    "title": "Reproducible data analysis",
    "section": "Load data",
    "text": "Load data\n\nUse the read_csv() function to load a spreadsheet as a dataframe\n\nThere are other functions for other file formats like .xls, .xlsx, .tsv, etc.\n\n\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")"
  },
  {
    "objectID": "day4/index.html#print-out-the-data",
    "href": "day4/index.html#print-out-the-data",
    "title": "Reproducible data analysis",
    "section": "Print out the data",
    "text": "Print out the data\n\nInspect the data just like any other object (variable) in R: type the name of the object into the console\n\n\ngapminder\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#print-out-the-data-1",
    "href": "day4/index.html#print-out-the-data-1",
    "title": "Reproducible data analysis",
    "section": "Print out the data",
    "text": "Print out the data\n\nNotice that R tells us the number of rows and columns, as well as the data type of each column\n\nThe tidyverse package refers to dataframes as “tibbles”"
  },
  {
    "objectID": "day4/index.html#what-is-this-dataset-about",
    "href": "day4/index.html#what-is-this-dataset-about",
    "title": "Reproducible data analysis",
    "section": "What is this dataset about?",
    "text": "What is this dataset about?\n\nWhat do you think this dataset is about?\nWhat do you think the columns mean?"
  },
  {
    "objectID": "day4/index.html#gapminder",
    "href": "day4/index.html#gapminder",
    "title": "Reproducible data analysis",
    "section": "Gapminder",
    "text": "Gapminder\n\nThis is a dataset of economic statistics from various countries over time, from https://gapminder.org\nThe meaning of some columns is obvious (country, continent, year), but not others\n\npop: Population\nlifeExp: Life expectancy (寿命)\ngdpPercap: GDP per capita (一人当たりの国内総生産)"
  },
  {
    "objectID": "day4/index.html#sort-data-with-arrange",
    "href": "day4/index.html#sort-data-with-arrange",
    "title": "Reproducible data analysis",
    "section": "Sort data with arrange()",
    "text": "Sort data with arrange()\n\nFirst provide the name of the dataframe, then the column to sort by\n\n\narrange(gapminder, lifeExp)\n\n# A tibble: 1,704 × 6\n  country      continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Rwanda       Africa     1992    23.6 7290203      737.\n2 Afghanistan  Asia       1952    28.8 8425333      779.\n3 Gambia       Africa     1952    30    284320      485.\n4 Angola       Africa     1952    30.0 4232095     3521.\n5 Sierra Leone Africa     1952    30.3 2143249      880.\n6 Afghanistan  Asia       1957    30.3 9240934      821.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#sort-data-with-arrange-1",
    "href": "day4/index.html#sort-data-with-arrange-1",
    "title": "Reproducible data analysis",
    "section": "Sort data with arrange()",
    "text": "Sort data with arrange()\n\nThe default setting is to sort from small to large\n\nTo sort in the reverse (descending) direction, use desc()\n\n\n\narrange(gapminder, desc(lifeExp))\n\n# A tibble: 1,704 × 6\n  country          continent  year lifeExp       pop gdpPercap\n  &lt;chr&gt;            &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Japan            Asia       2007    82.6 127467972    31656.\n2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n3 Japan            Asia       2002    82   127065841    28605.\n4 Iceland          Europe     2007    81.8    301931    36181.\n5 Switzerland      Europe     2007    81.7   7554661    37506.\n6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#sort-data-with-arrange-2",
    "href": "day4/index.html#sort-data-with-arrange-2",
    "title": "Reproducible data analysis",
    "section": "Sort data with arrange()",
    "text": "Sort data with arrange()\n\nYou can sort on multiple columns\n\nTies will be sorted by the next column\n\n\n\narrange(gapminder, continent, lifeExp)\n\n# A tibble: 1,704 × 6\n  country      continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Rwanda       Africa     1992    23.6 7290203      737.\n2 Gambia       Africa     1952    30    284320      485.\n3 Angola       Africa     1952    30.0 4232095     3521.\n4 Sierra Leone Africa     1952    30.3 2143249      880.\n5 Mozambique   Africa     1952    31.3 6446316      469.\n6 Sierra Leone Africa     1957    31.6 2295678     1004.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#challenge",
    "href": "day4/index.html#challenge",
    "title": "Reproducible data analysis",
    "section": "Challenge",
    "text": "Challenge\n\nSort the data by year, first going from smallest to biggest, then from biggest to smallest.\nWhat is the earliest year in the data?\nWhat is the latest year in the data?"
  },
  {
    "objectID": "day4/index.html#narrow-down-columns-with-select",
    "href": "day4/index.html#narrow-down-columns-with-select",
    "title": "Reproducible data analysis",
    "section": "Narrow down columns with select()",
    "text": "Narrow down columns with select()\n\nFirst provide the name of the dataframe, then the columns to select\n\n\nselect(gapminder, year, country, gdpPercap)\n\n# A tibble: 1,704 × 3\n   year country     gdpPercap\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n1  1952 Afghanistan      779.\n2  1957 Afghanistan      821.\n3  1962 Afghanistan      853.\n4  1967 Afghanistan      836.\n5  1972 Afghanistan      740.\n6  1977 Afghanistan      786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#saving-your-output",
    "href": "day4/index.html#saving-your-output",
    "title": "Reproducible data analysis",
    "section": "Saving your output",
    "text": "Saving your output\n\nNotice that although we have used several functions, gapminder is still the same:\n\n\ngapminder\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#saving-your-output-1",
    "href": "day4/index.html#saving-your-output-1",
    "title": "Reproducible data analysis",
    "section": "Saving your output",
    "text": "Saving your output\n\nThis is because we have not saved any of the output\nTo do that, you need to create a new object with &lt;-\n\nYou can call the object whatever you want, but use a name that is easy to remember\n\n\n\ngapminder_gdp &lt;- select(gapminder, year, country, gdpPercap)"
  },
  {
    "objectID": "day4/index.html#challenge-1",
    "href": "day4/index.html#challenge-1",
    "title": "Reproducible data analysis",
    "section": "Challenge",
    "text": "Challenge\n\nSelect only year, country, and population, then sort the data by population"
  },
  {
    "objectID": "day4/index.html#about-pipes",
    "href": "day4/index.html#about-pipes",
    "title": "Reproducible data analysis",
    "section": "About pipes",
    "text": "About pipes\n\nDuring the last challenge, you needed to save the output of the select() function, then use it as input into the arrange() function\nThere is a simpler way to do this, called the “pipe”\nThe pipe is written like this: |&gt;\n\nSome packages also write it like this: %&gt;%"
  },
  {
    "objectID": "day4/index.html#about-pipes-1",
    "href": "day4/index.html#about-pipes-1",
    "title": "Reproducible data analysis",
    "section": "About pipes",
    "text": "About pipes\n\nThe pipe takes the output from one function and passes it to the input of the next function\nYou can think of it as saying “and then”\n\nDo this and then do this, and then do this…\nDo this |&gt; do this, |&gt; do this…"
  },
  {
    "objectID": "day4/index.html#about-pipes-2",
    "href": "day4/index.html#about-pipes-2",
    "title": "Reproducible data analysis",
    "section": "About pipes",
    "text": "About pipes\n\nWe can even use the pipe just with one function:\n\nRead this as “start with gapminder and then select only year, country, and population”\n\n\n\ngapminder |&gt; select(year, country, pop)\n\n# A tibble: 1,704 × 3\n   year country          pop\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1  1952 Afghanistan  8425333\n2  1957 Afghanistan  9240934\n3  1962 Afghanistan 10267083\n4  1967 Afghanistan 11537966\n5  1972 Afghanistan 13079460\n6  1977 Afghanistan 14880372\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#about-pipes-3",
    "href": "day4/index.html#about-pipes-3",
    "title": "Reproducible data analysis",
    "section": "About pipes",
    "text": "About pipes\n\nThis becomes very useful when we want to do multiple steps\n\nRead this as “start with gapminder, and then select only year, country, and population, and then arrange by year”\n\n\n\ngapminder |&gt;\n  select(year, country, pop) |&gt;\n  arrange(year)\n\n\n\n# A tibble: 1,704 × 3\n   year country         pop\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;\n1  1952 Afghanistan 8425333\n2  1952 Albania     1282697\n3  1952 Algeria     9279525\n4  1952 Angola      4232095\n# ℹ 1,700 more rows"
  },
  {
    "objectID": "day4/index.html#about-pipes-4",
    "href": "day4/index.html#about-pipes-4",
    "title": "Reproducible data analysis",
    "section": "About pipes",
    "text": "About pipes\n\nWe can make it easier to read by putting each step on its own line\n\n\ngapminder |&gt;\n  select(year, country, pop) |&gt;\n  arrange(year)\n\n# A tibble: 1,704 × 3\n   year country          pop\n  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1  1952 Afghanistan  8425333\n2  1952 Albania      1282697\n3  1952 Algeria      9279525\n4  1952 Angola       4232095\n5  1952 Argentina   17876956\n6  1952 Australia    8691212\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#about-pipes-5",
    "href": "day4/index.html#about-pipes-5",
    "title": "Reproducible data analysis",
    "section": "About pipes",
    "text": "About pipes\n\nThis way, you don’t have to save each intermediate step\nThis is a very useful way to manipulate data\nI will now use the pipe (|&gt;) for the rest of the lesson"
  },
  {
    "objectID": "day4/index.html#subset-rows-with-filter",
    "href": "day4/index.html#subset-rows-with-filter",
    "title": "Reproducible data analysis",
    "section": "Subset rows with filter()",
    "text": "Subset rows with filter()\n\nUse the filter() function to only keep rows that meet a certain condition\nFor example, let’s only keep the data in Europe:\n\n\ngapminder |&gt; filter(continent == \"Europe\")\n\n# A tibble: 360 × 6\n  country continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Albania Europe     1952    55.2 1282697     1601.\n2 Albania Europe     1957    59.3 1476505     1942.\n3 Albania Europe     1962    64.8 1728137     2313.\n4 Albania Europe     1967    66.2 1984060     2760.\n5 Albania Europe     1972    67.7 2263554     3313.\n6 Albania Europe     1977    68.9 2509048     3533.\n# ℹ 354 more rows"
  },
  {
    "objectID": "day4/index.html#challenge-2",
    "href": "day4/index.html#challenge-2",
    "title": "Reproducible data analysis",
    "section": "Challenge",
    "text": "Challenge\nUsing the pipe (|&gt;) and the functions we have learned so far, filter the data to Asia, then select only the country, year, and population columns."
  },
  {
    "objectID": "day4/index.html#modify-data-with-mutate",
    "href": "day4/index.html#modify-data-with-mutate",
    "title": "Reproducible data analysis",
    "section": "Modify data with mutate()",
    "text": "Modify data with mutate()\n\nFor example, we could change the units of population to millions of people:\n\n\ngapminder |&gt; mutate(pop = pop / 1000000)\n\n# A tibble: 1,704 × 6\n  country     continent  year lifeExp   pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8.43      779.\n2 Afghanistan Asia       1957    30.3  9.24      821.\n3 Afghanistan Asia       1962    32.0 10.3       853.\n4 Afghanistan Asia       1967    34.0 11.5       836.\n5 Afghanistan Asia       1972    36.1 13.1       740.\n6 Afghanistan Asia       1977    38.4 14.9       786.\n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#modify-data-with-mutate-1",
    "href": "day4/index.html#modify-data-with-mutate-1",
    "title": "Reproducible data analysis",
    "section": "Modify data with mutate()",
    "text": "Modify data with mutate()\n\nIf we provide a new column name, that column will be added\n\n\ngapminder |&gt; mutate(pop_mil = pop / 1000000)\n\n# A tibble: 1,704 × 7\n  country     continent  year lifeExp      pop gdpPercap pop_mil\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.    8.43\n2 Afghanistan Asia       1957    30.3  9240934      821.    9.24\n3 Afghanistan Asia       1962    32.0 10267083      853.   10.3 \n4 Afghanistan Asia       1967    34.0 11537966      836.   11.5 \n5 Afghanistan Asia       1972    36.1 13079460      740.   13.1 \n6 Afghanistan Asia       1977    38.4 14880372      786.   14.9 \n# ℹ 1,698 more rows"
  },
  {
    "objectID": "day4/index.html#challenge-3",
    "href": "day4/index.html#challenge-3",
    "title": "Reproducible data analysis",
    "section": "Challenge",
    "text": "Challenge\n\nThe gdpPercap column stands for Gross Domestic Product (GDP) per capita (per person)\nCalculate the total GDP using mutate()\n\nhint: You need to use both the pop and gdpPercap columns"
  },
  {
    "objectID": "day4/index.html#calculate-summary-statistics-with-summarize",
    "href": "day4/index.html#calculate-summary-statistics-with-summarize",
    "title": "Reproducible data analysis",
    "section": "Calculate summary statistics with summarize()",
    "text": "Calculate summary statistics with summarize()\n\nFor example, let’s calculate the overall mean population:\n\n\ngapminder |&gt; summarize(mean_pop = mean(pop))\n\n# A tibble: 1 × 1\n   mean_pop\n      &lt;dbl&gt;\n1 29601212."
  },
  {
    "objectID": "day4/index.html#calculate-summary-statistics-with-summarize-1",
    "href": "day4/index.html#calculate-summary-statistics-with-summarize-1",
    "title": "Reproducible data analysis",
    "section": "Calculate summary statistics with summarize()",
    "text": "Calculate summary statistics with summarize()\n\nAnother example: the total population over all the data:\n\n\ngapminder |&gt; summarize(total_pop = sum(pop))\n\n# A tibble: 1 × 1\n    total_pop\n        &lt;dbl&gt;\n1 50440465801"
  },
  {
    "objectID": "day4/index.html#use-group_by-to-do-calculations-per-group",
    "href": "day4/index.html#use-group_by-to-do-calculations-per-group",
    "title": "Reproducible data analysis",
    "section": "Use group_by() to do calculations per group",
    "text": "Use group_by() to do calculations per group\n\nHowever, it is often more useful to calculate such summary statistics for particular groups\nTo do this, first specify the groups with group_by():\n\n\ngapminder |&gt; group_by(continent)\n\n\n\n# A tibble: 1,704 × 6\n# Groups:   continent [5]\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n# ℹ 1,700 more rows"
  },
  {
    "objectID": "day4/index.html#use-group_by-to-do-calculations-per-group-1",
    "href": "day4/index.html#use-group_by-to-do-calculations-per-group-1",
    "title": "Reproducible data analysis",
    "section": "Use group_by() to do calculations per group",
    "text": "Use group_by() to do calculations per group\n\nNext, use summarize() to calculate the summary statistic:\n\n\ngapminder |&gt;\n  group_by(continent) |&gt;\n  summarize(mean_pop = mean(pop))\n\n# A tibble: 5 × 2\n  continent  mean_pop\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Africa     9916003.\n2 Americas  24504795.\n3 Asia      77038722.\n4 Europe    17169765.\n5 Oceania    8874672."
  },
  {
    "objectID": "day4/index.html#difference-between-mutate-and-summarize",
    "href": "day4/index.html#difference-between-mutate-and-summarize",
    "title": "Reproducible data analysis",
    "section": "Difference between mutate() and summarize()",
    "text": "Difference between mutate() and summarize()\n\nmutate() calculates a new column (or over-writes an existing one) and keeps the number of rows the same\nsummarize() calculates a new column and decreases the number of rows"
  },
  {
    "objectID": "day4/index.html#summary",
    "href": "day4/index.html#summary",
    "title": "Reproducible data analysis",
    "section": "Summary",
    "text": "Summary\n\nSort data with arrange()\nNarrow down columns with select()\nFilter rows with filter()\nModify data with mutate()\nSummarize data with summarize()\nGroup data with group_by()\nUse the pipe (|&gt;) to chain steps together"
  },
  {
    "objectID": "day4/day04_tidy.html",
    "href": "day4/day04_tidy.html",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "By the end of this class, you should\n\nUnderstand what packages are and how to use them\nBe able to load data into R\nBe able to use the six main data frame manipulation functions (and pipes) in dplyr"
  },
  {
    "objectID": "day4/day04_tidy.html#learning-objectives",
    "href": "day4/day04_tidy.html#learning-objectives",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "",
    "text": "By the end of this class, you should\n\nUnderstand what packages are and how to use them\nBe able to load data into R\nBe able to use the six main data frame manipulation functions (and pipes) in dplyr"
  },
  {
    "objectID": "day4/day04_tidy.html#what-is-data-wrangling",
    "href": "day4/day04_tidy.html#what-is-data-wrangling",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "What is data wrangling?",
    "text": "What is data wrangling?\nManipulation of data frames means many things to many researchers: we often select certain observations (rows) or variables (columns), we often group the data by a certain variable(s), or we even calculate summary statistics. This is collectively referred to as “Data Wrangling” (to “wrangle” means to organize something unruly, like livestock)."
  },
  {
    "objectID": "day4/day04_tidy.html#create-the-project",
    "href": "day4/day04_tidy.html#create-the-project",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Create the project",
    "text": "Create the project\nAs before, create a new project to practice today’s code in the data-analysis-course folder on your Desktop. Call it gapminder-analysis, since we will be analyzing a dataset called “gapminder” (we will continue to use this dataset for the remainder of the course). Also, create a folder called data_raw inside the project.\nToday we will be loading data from an external file (gapminder.csv). Download the file from this link, and put it in the data_raw folder in your project: https://www.dropbox.com/s/fdirlsnxlzy53qq/gapminder.csv?dl=0"
  },
  {
    "objectID": "day4/day04_tidy.html#installing-and-loading-packages",
    "href": "day4/day04_tidy.html#installing-and-loading-packages",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Installing and loading packages",
    "text": "Installing and loading packages\nFor this lesson, we will use functions that are not included in R by default (“Base R”). Packages are collections of code that expand R’s functionality. There are nearly 200,000 packages available on CRAN, the biggest repository of R packages.\nTo install a new package, use the install.packages() function, specifying the name of the package in quotation marks. Here, we will install a package called tidyverse:\n\ninstall.packages(\"tidyverse\")\n\nActually the “tidyverse” is a collection of R packages designed for data science, including readr(for loading data), dplyr (for data manipulation), ggplot (for plotting), and others. These packages are specifically designed to work harmoniously together. Some of these packages will be covered along this course, but you can find more complete information here: https://www.tidyverse.org/.\nYou only have to install the package once, which downloads it to your computer. But each time you want to use the package in an R session, you need to load it with the library() function, like this:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNotice that since tidyverse contains multiple packages, it loads each of those and prints a message for each.\nSomewhat confusingly, you don’t need to put the name of the pacakge quotation marks when using library(), but you do when using install.packages(). Also, you can only load one package at a time using library(), so if you needed to load multiple packages, you would need to do it like this (this example shows two packages included in tidyverse):\n\nlibrary(dplyr)\nlibrary(ggplot)"
  },
  {
    "objectID": "day4/day04_tidy.html#loading-data",
    "href": "day4/day04_tidy.html#loading-data",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Loading data",
    "text": "Loading data\nWe can use the read_csv() function from the readr package included in tidyverse to load the data into R.\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nR loads the data as a dataframe, also called a “tibble”. But what is a dataframe?"
  },
  {
    "objectID": "day4/day04_tidy.html#what-are-dataframes",
    "href": "day4/day04_tidy.html#what-are-dataframes",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "What are dataframes?",
    "text": "What are dataframes?\nWhen we loaded the data into R, it got stored as an object of class tibble, which is a special kind of dataframe (the difference is not important for our purposes, but you can learn more about tibbles here). Dataframes are the de facto data structure for most tabular data, and what we use for statistics and plotting. Data frames can be created by hand, but most commonly they are generated by functions like read_csv(); in other words, when importing spreadsheets from your hard drive or the web.\nA dataframe is the representation of data in the format of a table where the columns are vectors that all have the same length. Because columns are vectors, each column must contain a single type of data (e.g., characters, integers, factors). For example, here is a figure depicting a dataframe comprising a numeric, a character, and a logical vector."
  },
  {
    "objectID": "day4/day04_tidy.html#inspect-the-data",
    "href": "day4/day04_tidy.html#inspect-the-data",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Inspect the data",
    "text": "Inspect the data\nYou can see the contents of a dataframe by typing its name in the R console:\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nR gives you some useful summary information: the number of rows (1,704) and columns (6) and the type of each column (chr is character, dbl is numeric)."
  },
  {
    "objectID": "day4/day04_tidy.html#about-the-gapminder-dataset",
    "href": "day4/day04_tidy.html#about-the-gapminder-dataset",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "About the “gapminder” dataset",
    "text": "About the “gapminder” dataset\nThis dataset includes economic statistics from various countries over time, from https://gapminder.org.\nThe meaning of some columns is obvious (country, continent, year), but not others. Here is a short explanation of those:\n\npop: Population\nlifeExp: Life expectancy (寿命)\ngdpPercap: GDP per capita (一人当たりの国内総生産)"
  },
  {
    "objectID": "day4/day04_tidy.html#sort-data-with-arrange",
    "href": "day4/day04_tidy.html#sort-data-with-arrange",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Sort data with arrange()",
    "text": "Sort data with arrange()\nFirst provide the name of the dataframe, then the column to sort by:\n\narrange(gapminder, lifeExp)\n\n# A tibble: 1,704 × 6\n   country      continent  year lifeExp     pop gdpPercap\n   &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Rwanda       Africa     1992    23.6 7290203      737.\n 2 Afghanistan  Asia       1952    28.8 8425333      779.\n 3 Gambia       Africa     1952    30    284320      485.\n 4 Angola       Africa     1952    30.0 4232095     3521.\n 5 Sierra Leone Africa     1952    30.3 2143249      880.\n 6 Afghanistan  Asia       1957    30.3 9240934      821.\n 7 Cambodia     Asia       1977    31.2 6978607      525.\n 8 Mozambique   Africa     1952    31.3 6446316      469.\n 9 Sierra Leone Africa     1957    31.6 2295678     1004.\n10 Burkina Faso Africa     1952    32.0 4469979      543.\n# ℹ 1,694 more rows\n\n\nThe default setting is to sort from small to large. To sort in the reverse (descending) direction, use desc():\n\narrange(gapminder, desc(lifeExp))\n\n# A tibble: 1,704 × 6\n   country          continent  year lifeExp       pop gdpPercap\n   &lt;chr&gt;            &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Japan            Asia       2007    82.6 127467972    31656.\n 2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n 3 Japan            Asia       2002    82   127065841    28605.\n 4 Iceland          Europe     2007    81.8    301931    36181.\n 5 Switzerland      Europe     2007    81.7   7554661    37506.\n 6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n 7 Australia        Oceania    2007    81.2  20434176    34435.\n 8 Spain            Europe     2007    80.9  40448191    28821.\n 9 Sweden           Europe     2007    80.9   9031088    33860.\n10 Israel           Asia       2007    80.7   6426679    25523.\n# ℹ 1,694 more rows\n\n\nYou can sort on multiple columns. Ties will be sorted by the next column:\n\narrange(gapminder, continent, lifeExp)\n\n# A tibble: 1,704 × 6\n   country       continent  year lifeExp     pop gdpPercap\n   &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Rwanda        Africa     1992    23.6 7290203      737.\n 2 Gambia        Africa     1952    30    284320      485.\n 3 Angola        Africa     1952    30.0 4232095     3521.\n 4 Sierra Leone  Africa     1952    30.3 2143249      880.\n 5 Mozambique    Africa     1952    31.3 6446316      469.\n 6 Sierra Leone  Africa     1957    31.6 2295678     1004.\n 7 Burkina Faso  Africa     1952    32.0 4469979      543.\n 8 Angola        Africa     1957    32.0 4561361     3828.\n 9 Gambia        Africa     1957    32.1  323150      521.\n10 Guinea-Bissau Africa     1952    32.5  580653      300.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "day4/day04_tidy.html#narrow-down-columns-with-select",
    "href": "day4/day04_tidy.html#narrow-down-columns-with-select",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Narrow down columns with select()",
    "text": "Narrow down columns with select()\nFirst provide the name of the dataframe, then the columns to select:\n\nselect(gapminder, year, country, gdpPercap)\n\n# A tibble: 1,704 × 3\n    year country     gdpPercap\n   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1  1952 Afghanistan      779.\n 2  1957 Afghanistan      821.\n 3  1962 Afghanistan      853.\n 4  1967 Afghanistan      836.\n 5  1972 Afghanistan      740.\n 6  1977 Afghanistan      786.\n 7  1982 Afghanistan      978.\n 8  1987 Afghanistan      852.\n 9  1992 Afghanistan      649.\n10  1997 Afghanistan      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "day4/day04_tidy.html#saving-your-output",
    "href": "day4/day04_tidy.html#saving-your-output",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Saving your output",
    "text": "Saving your output\nNotice that although we have used several functions, gapminder is still the same:\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nThis is because we have not saved any of the output. To do that, you need to create a new object with &lt;-. You can call the object whatever you want, but use a name that is easy to remember:\n\ngapminder_gdp &lt;- select(gapminder, year, country, gdpPercap)"
  },
  {
    "objectID": "day4/day04_tidy.html#about-pipes",
    "href": "day4/day04_tidy.html#about-pipes",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "About pipes",
    "text": "About pipes\nDuring data analysis, we often need to perform several intermediate steps. It is not convenient to save the output of each since you have to think of names for each output object, and may not even use them for anything later. A better way to do this is using something called the “pipe”. The pipe is written like this: |&gt; (some packages also write it like this: %&gt;%).\nThe pipe takes the output from one function and passes it to the input of the next function. You can think of it as saying “and then”:\n\nDo this and then do this, and then do this…\nDo this |&gt; do this, |&gt; do this…\n\nWe can even use the pipe just with one function. Read the following as “start with gapminder and then select only year, country, and population”:\n\ngapminder |&gt; select(year, country, pop)\n\n# A tibble: 1,704 × 3\n    year country          pop\n   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1  1952 Afghanistan  8425333\n 2  1957 Afghanistan  9240934\n 3  1962 Afghanistan 10267083\n 4  1967 Afghanistan 11537966\n 5  1972 Afghanistan 13079460\n 6  1977 Afghanistan 14880372\n 7  1982 Afghanistan 12881816\n 8  1987 Afghanistan 13867957\n 9  1992 Afghanistan 16317921\n10  1997 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nThis becomes very useful when we want to do multiple steps. Read this as “start with gapminder, and then select only year, country, and population, and then arrange by year”:\n\ngapminder |&gt;\n  select(year, country, pop) |&gt;\n  arrange(year)\n\n# A tibble: 1,704 × 3\n    year country          pop\n   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1  1952 Afghanistan  8425333\n 2  1952 Albania      1282697\n 3  1952 Algeria      9279525\n 4  1952 Angola       4232095\n 5  1952 Argentina   17876956\n 6  1952 Australia    8691212\n 7  1952 Austria      6927772\n 8  1952 Bahrain       120447\n 9  1952 Bangladesh  46886859\n10  1952 Belgium      8730405\n# ℹ 1,694 more rows\n\n\nWe can make it easier to read by putting each step on its own line (the result is exactly the same, since R ignores spaces and line breaks):\n\ngapminder |&gt;\n  select(year, country, pop) |&gt;\n  arrange(year)\n\n# A tibble: 1,704 × 3\n    year country          pop\n   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1  1952 Afghanistan  8425333\n 2  1952 Albania      1282697\n 3  1952 Algeria      9279525\n 4  1952 Angola       4232095\n 5  1952 Argentina   17876956\n 6  1952 Australia    8691212\n 7  1952 Austria      6927772\n 8  1952 Bahrain       120447\n 9  1952 Bangladesh  46886859\n10  1952 Belgium      8730405\n# ℹ 1,694 more rows\n\n\nPipes are very useful because you don’t have to save each intermediate step. This is a very useful way to manipulate data. Therefore, the rest of the lesson will use the pipe, to help you get used to it."
  },
  {
    "objectID": "day4/day04_tidy.html#subset-rows-with-filter",
    "href": "day4/day04_tidy.html#subset-rows-with-filter",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Subset rows with filter()",
    "text": "Subset rows with filter()\nUse the filter() function to only keep rows that meet a certain condition. For example, let’s only keep the data in Europe:\n\ngapminder |&gt; filter(continent == \"Europe\")\n\n# A tibble: 360 × 6\n   country continent  year lifeExp     pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Albania Europe     1952    55.2 1282697     1601.\n 2 Albania Europe     1957    59.3 1476505     1942.\n 3 Albania Europe     1962    64.8 1728137     2313.\n 4 Albania Europe     1967    66.2 1984060     2760.\n 5 Albania Europe     1972    67.7 2263554     3313.\n 6 Albania Europe     1977    68.9 2509048     3533.\n 7 Albania Europe     1982    70.4 2780097     3631.\n 8 Albania Europe     1987    72   3075321     3739.\n 9 Albania Europe     1992    71.6 3326498     2497.\n10 Albania Europe     1997    73.0 3428038     3193.\n# ℹ 350 more rows"
  },
  {
    "objectID": "day4/day04_tidy.html#modify-data-with-mutate",
    "href": "day4/day04_tidy.html#modify-data-with-mutate",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Modify data with mutate()",
    "text": "Modify data with mutate()\nFor example, we could change the units of population to millions of people:\n\ngapminder |&gt; mutate(pop = pop / 1000000)\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp   pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8.43      779.\n 2 Afghanistan Asia       1957    30.3  9.24      821.\n 3 Afghanistan Asia       1962    32.0 10.3       853.\n 4 Afghanistan Asia       1967    34.0 11.5       836.\n 5 Afghanistan Asia       1972    36.1 13.1       740.\n 6 Afghanistan Asia       1977    38.4 14.9       786.\n 7 Afghanistan Asia       1982    39.9 12.9       978.\n 8 Afghanistan Asia       1987    40.8 13.9       852.\n 9 Afghanistan Asia       1992    41.7 16.3       649.\n10 Afghanistan Asia       1997    41.8 22.2       635.\n# ℹ 1,694 more rows\n\n\nIf we provide a new column name, that column will be added\n\ngapminder |&gt; mutate(pop_mil = pop / 1000000)\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap pop_mil\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.    8.43\n 2 Afghanistan Asia       1957    30.3  9240934      821.    9.24\n 3 Afghanistan Asia       1962    32.0 10267083      853.   10.3 \n 4 Afghanistan Asia       1967    34.0 11537966      836.   11.5 \n 5 Afghanistan Asia       1972    36.1 13079460      740.   13.1 \n 6 Afghanistan Asia       1977    38.4 14880372      786.   14.9 \n 7 Afghanistan Asia       1982    39.9 12881816      978.   12.9 \n 8 Afghanistan Asia       1987    40.8 13867957      852.   13.9 \n 9 Afghanistan Asia       1992    41.7 16317921      649.   16.3 \n10 Afghanistan Asia       1997    41.8 22227415      635.   22.2 \n# ℹ 1,694 more rows"
  },
  {
    "objectID": "day4/day04_tidy.html#calculate-summary-statistics-with-summarize",
    "href": "day4/day04_tidy.html#calculate-summary-statistics-with-summarize",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Calculate summary statistics with summarize()",
    "text": "Calculate summary statistics with summarize()\nFor example, let’s calculate the overall mean population:\n\ngapminder |&gt; summarize(mean_pop = mean(pop))\n\n# A tibble: 1 × 1\n   mean_pop\n      &lt;dbl&gt;\n1 29601212.\n\n\nAs another example, let’s calculate the total population over all the data:\n\ngapminder |&gt; summarize(total_pop = sum(pop))\n\n# A tibble: 1 × 1\n    total_pop\n        &lt;dbl&gt;\n1 50440465801"
  },
  {
    "objectID": "day4/day04_tidy.html#use-group_by-to-do-calculations-per-group",
    "href": "day4/day04_tidy.html#use-group_by-to-do-calculations-per-group",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Use group_by() to do calculations per group",
    "text": "Use group_by() to do calculations per group\nHowever, it is often more useful to calculate such summary statistics for particular groups. To do this, first specify the groups with group_by():\n\ngapminder |&gt; group_by(continent)\n\n# A tibble: 1,704 × 6\n# Groups:   continent [5]\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nNext, use summarize() to calculate the summary statistic:\n\ngapminder |&gt;\n  group_by(continent) |&gt;\n  summarize(mean_pop = mean(pop))\n\n# A tibble: 5 × 2\n  continent  mean_pop\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Africa     9916003.\n2 Americas  24504795.\n3 Asia      77038722.\n4 Europe    17169765.\n5 Oceania    8874672.\n\n\nsummarize() and mutate() are related since they both create new columns (or over-write existing ones). You can remember the key difference between them is that mutate() keeps the number of rows the same, whereas summarize() always decreases the number of rows."
  },
  {
    "objectID": "day4/day04_tidy.html#summary",
    "href": "day4/day04_tidy.html#summary",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Summary",
    "text": "Summary\nHere is a list of the data-wrangling commands we have learned so far:\n\nSort data with arrange()\nNarrow down columns with select()\nFilter rows with filter()\nModify data with mutate()\nSummarize data with summarize()\nGroup data with group_by()\n\nBy combining these functions, each of which is fairly simple, with the pipe (|&gt;), you can construct sophisticated data analysis pipelines."
  },
  {
    "objectID": "day4/day04_tidy.html#submitting-the-homework",
    "href": "day4/day04_tidy.html#submitting-the-homework",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Submitting the homework",
    "text": "Submitting the homework\nGo to Moodle, click on the Day 4 Homework assignment, and click on the link to accept the assignment. This will create the repo in your GitHub account.\nNext, clone the remote repo to your local machine. Then, edit the file day_04_homework.R file in RStudio. Make sure that your code runs without errors. Once you have done so, commit your changes and push to the remote. Don’t forget to push! If you don’t push, your work will not be submitted.\nYou can double check that you’ve successfully submitted (pushed) the homework by visiting your GitHub repo in your browser (use the same link in Moodle that you clicked to accept the assignment). Make sure the homework file there shows the same changes that you made in RStudio.\nBe sure to do this BY THE DEADLINE, or your work will not be counted."
  },
  {
    "objectID": "day4/day04_tidy.html#attributions",
    "href": "day4/day04_tidy.html#attributions",
    "title": "Reproducible Data Analysis Day 4: Data loading and tidying with tidyverse",
    "section": "Attributions",
    "text": "Attributions\nThese materials were modified by Joel H. Nitta from those posted at https://swcarpentry.github.io/r-novice-gapminder/ and https://datacarpentry.org/R-ecology-lesson under the Creative Commons Attribution (CC BY 4.0) license."
  },
  {
    "objectID": "day3/index.html#recordings",
    "href": "day3/index.html#recordings",
    "title": "Reproducible data analysis",
    "section": "Recordings",
    "text": "Recordings\n\nI will record lectures starting from today and post them on Moodle\nThis does not mean you can skip class. The best way to learn is to come to class and ask questions!"
  },
  {
    "objectID": "day3/index.html#what-to-do-if-the-git-pane-doesnt-work",
    "href": "day3/index.html#what-to-do-if-the-git-pane-doesnt-work",
    "title": "Reproducible data analysis",
    "section": "What to do if the Git pane doesn’t work",
    "text": "What to do if the Git pane doesn’t work"
  },
  {
    "objectID": "day3/index.html#what-to-do-if-the-git-pane-doesnt-work-1",
    "href": "day3/index.html#what-to-do-if-the-git-pane-doesnt-work-1",
    "title": "Reproducible data analysis",
    "section": "What to do if the Git pane doesn’t work",
    "text": "What to do if the Git pane doesn’t work\n\nFinish editing the homework assignment\nIn the terminal, do the following commands:\n\ngit add FILENAME (for example, git add day03_homework.R)\ngit commit -m \"Finish homework\"\ngit push"
  },
  {
    "objectID": "day3/index.html#why-use-a-programming-language",
    "href": "day3/index.html#why-use-a-programming-language",
    "title": "Reproducible data analysis",
    "section": "Why use a programming language?",
    "text": "Why use a programming language?\n\nProgramming makes your analysis reproducible, because you have an exact, written record of what you have done"
  },
  {
    "objectID": "day3/index.html#what-is-reproducibility",
    "href": "day3/index.html#what-is-reproducibility",
    "title": "Reproducible data analysis",
    "section": "What is reproducibility?",
    "text": "What is reproducibility?\n\nThe ability for other people (including your future self!) to reproduce your analysis results\n\nGives you confidence in your results\nMakes it easier to switch between projects"
  },
  {
    "objectID": "day3/index.html#why-learn-r",
    "href": "day3/index.html#why-learn-r",
    "title": "Reproducible data analysis",
    "section": "Why learn R?",
    "text": "Why learn R?\n\nR is free\nR is extensible\nR produces high-quality graphics\nR has a large and welcoming community"
  },
  {
    "objectID": "day3/index.html#r-vs.-rstudio",
    "href": "day3/index.html#r-vs.-rstudio",
    "title": "Reproducible data analysis",
    "section": "R vs. RStudio",
    "text": "R vs. RStudio\n\nR is the programming language\nRStudio is software to use R and write R code\nWe will always use R through RStudio! (don’t click on the icon for R)"
  },
  {
    "objectID": "day3/index.html#introduction-to-rstudio",
    "href": "day3/index.html#introduction-to-rstudio",
    "title": "Reproducible data analysis",
    "section": "Introduction to RStudio",
    "text": "Introduction to RStudio\n\nWe will start by navigating RStudio\nThere are four main panels\n\nSource (where you write your code)\nEnvironment (lists the objects in your R session)\nR Console (where you talk to R)\nFiles and Plots (shows the files in your project, and any plots you make)"
  },
  {
    "objectID": "day3/index.html#projects",
    "href": "day3/index.html#projects",
    "title": "Reproducible data analysis",
    "section": "Projects",
    "text": "Projects\n\nAn R Project is a folder that contains all the files you need for a particular data analysis project\n\nBasically the same thing as a repo (if you are using git)\n\nProjects help organize code and files so we don’t get lost"
  },
  {
    "objectID": "day3/index.html#create-a-new-project",
    "href": "day3/index.html#create-a-new-project",
    "title": "Reproducible data analysis",
    "section": "Create a new project",
    "text": "Create a new project\n\nSo far, we have only cloned projects from GitHub\nToday you will create a new project on your computer"
  },
  {
    "objectID": "day3/index.html#create-a-new-project-1",
    "href": "day3/index.html#create-a-new-project-1",
    "title": "Reproducible data analysis",
    "section": "Create a new project",
    "text": "Create a new project\n\nIn RStudio, click File ➡︎ New Project ➡︎ New Directory ➡︎ New Project (again)\n\nEnter the name of the project (folder) and where to put it\nI recommend putting it somewhere easy to find\n\nLet’s put call this project day03-practice and put it in the data-analysis-course folder on the Desktop\nClick “Create a git repository”, since we are using git"
  },
  {
    "objectID": "day3/index.html#create-a-new-project-2",
    "href": "day3/index.html#create-a-new-project-2",
    "title": "Reproducible data analysis",
    "section": "Create a new project",
    "text": "Create a new project\n\nRStudio will restart, and you will see in the File pane that we are located in the new project\nRStudio has created two files automatically, day03-practice.Rproj and .gitignore\n\nCommit these files with the commit message “Initial commit” (or whatever you want, but that is often used as a first commit message for a new project)\n\nNow we are ready to start using R!"
  },
  {
    "objectID": "day3/index.html#r-as-a-calculator",
    "href": "day3/index.html#r-as-a-calculator",
    "title": "Reproducible data analysis",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nYou can execute R code to calculate numbers directly in the console by typing the calculation then pressing “Enter”\nTry something like this:\n\n\n2 + 2\n\n[1] 4"
  },
  {
    "objectID": "day3/index.html#r-as-a-calculator-1",
    "href": "day3/index.html#r-as-a-calculator-1",
    "title": "Reproducible data analysis",
    "section": "R as a calculator",
    "text": "R as a calculator\n\n5 * 10\n\n[1] 50\n\n2 / 3\n\n[1] 0.6666667\n\n(2 + 1)^2\n\n[1] 9\n\n\nCongratulations! You are now an R programmer!"
  },
  {
    "objectID": "day3/index.html#objects-variables",
    "href": "day3/index.html#objects-variables",
    "title": "Reproducible data analysis",
    "section": "Objects (variables)",
    "text": "Objects (variables)\n\nR can do much more than act like a calculator\nOne very useful thing is the ability to store values in variables, often called “objects” in R\nWe assign values to objects using the arrow symbol: &lt;-\n\n\nx &lt;- 2 + 2\n\n\nHowever, R does not show you the value of x when you assign it"
  },
  {
    "objectID": "day3/index.html#objects-variables-1",
    "href": "day3/index.html#objects-variables-1",
    "title": "Reproducible data analysis",
    "section": "Objects (variables)",
    "text": "Objects (variables)\nTo check the value of x, type x in the console and press “Enter”\n\nx\n\n[1] 4\n\n\nThe value of x is also shown in the Environment panel (top-right panel)"
  },
  {
    "objectID": "day3/index.html#objects-variables-2",
    "href": "day3/index.html#objects-variables-2",
    "title": "Reproducible data analysis",
    "section": "Objects (variables)",
    "text": "Objects (variables)\nNow that we have saved a value to x, we can do additional calculations with it:\n\nx * 10\n\n[1] 40"
  },
  {
    "objectID": "day3/index.html#objects-variables-3",
    "href": "day3/index.html#objects-variables-3",
    "title": "Reproducible data analysis",
    "section": "Objects (variables)",
    "text": "Objects (variables)\nWe can then use that code to build a new object:\n\ny &lt;- x * 10\ny\n\n[1] 40"
  },
  {
    "objectID": "day3/index.html#objects-variables-4",
    "href": "day3/index.html#objects-variables-4",
    "title": "Reproducible data analysis",
    "section": "Objects (variables)",
    "text": "Objects (variables)\nBut notice that the objects don’t “react” to each other (in other words, assigning a value to one object does not change the values of other objects):\n\nx &lt;- 5\n# What is value of x?\nx\n\n[1] 5\n\n\n\n\n# What is the value of y?\n# (remember, y &lt;- x * 10)\n\n\n\n\ny\n\n[1] 40"
  },
  {
    "objectID": "day3/index.html#workspace-settings-and-using-the-.rproj-file",
    "href": "day3/index.html#workspace-settings-and-using-the-.rproj-file",
    "title": "Reproducible data analysis",
    "section": "Workspace settings and using the .Rproj file",
    "text": "Workspace settings and using the .Rproj file\n\nBefore continuing, we need to change some of the default settings in R\nI’ll also demonstrate how to use the .Rproj file to open a project\nQuit RStudio (we will open it again soon) by clicking File ➡︎ Quit Session"
  },
  {
    "objectID": "day3/index.html#use-the-.rproj-file-to-open-the-project",
    "href": "day3/index.html#use-the-.rproj-file-to-open-the-project",
    "title": "Reproducible data analysis",
    "section": "Use the .Rproj file to open the project",
    "text": "Use the .Rproj file to open the project\n\nOpen your project by navigating to data-analysis-course/day03-practice on your Desktop and clicking on day03-practice.Rproj."
  },
  {
    "objectID": "day3/index.html#change-workspace-settings",
    "href": "day3/index.html#change-workspace-settings",
    "title": "Reproducible data analysis",
    "section": "Change Workspace settings",
    "text": "Change Workspace settings\n\nWhat do you see in RStudio when you open your project?"
  },
  {
    "objectID": "day3/index.html#change-workspace-settings-1",
    "href": "day3/index.html#change-workspace-settings-1",
    "title": "Reproducible data analysis",
    "section": "Change Workspace settings",
    "text": "Change Workspace settings\n\nNotice in the “Environment” pane (upper-right) that x and y are still there, even though the code that we typed last time is gone!\n\nIn other words, we don’t know how we got x and y\nThis is bad for reproducibility!"
  },
  {
    "objectID": "day3/index.html#change-workspace-settings-2",
    "href": "day3/index.html#change-workspace-settings-2",
    "title": "Reproducible data analysis",
    "section": "Change Workspace settings",
    "text": "Change Workspace settings\n\nThe contents of the R session (the “environment”) should only show what we have done using code during that session\n\nWe will change the default settings to avoid this behavior"
  },
  {
    "objectID": "day3/index.html#change-workspace-settings-3",
    "href": "day3/index.html#change-workspace-settings-3",
    "title": "Reproducible data analysis",
    "section": "Change Workspace settings",
    "text": "Change Workspace settings\n\nClick on Tools ➡︎ Global Options\n\nUncheck “Restore .RData into workspace at startup”\nSelect “Never” for “Save workspace to .RData on exit”\nClick “OK”\n\nYou can also delete the .RData file, which is where those data were stored"
  },
  {
    "objectID": "day3/index.html#saving-code",
    "href": "day3/index.html#saving-code",
    "title": "Reproducible data analysis",
    "section": "Saving code",
    "text": "Saving code\n\nSo far, we have only typed code directly into R\n\n\n\nIt is much more useful to save your code in a file (called a “script”) so that you can run it again without typing everything all over again"
  },
  {
    "objectID": "day3/index.html#saving-code-1",
    "href": "day3/index.html#saving-code-1",
    "title": "Reproducible data analysis",
    "section": "Saving code",
    "text": "Saving code\n\nClick File ➡︎ New File ➡︎ R Script\nClick the disk icon or File ➡︎ Save As... to give your file a name (let’s say, “practice.R”) and save it."
  },
  {
    "objectID": "day3/index.html#running-code-from-a-file",
    "href": "day3/index.html#running-code-from-a-file",
    "title": "Reproducible data analysis",
    "section": "Running code from a file",
    "text": "Running code from a file\n\nType the same code as before in your new file: x &lt;- 2 + 2 and hit the “Enter” key\n\n\n\nNotice that R does not run the code, since this is the file editing pane, not the R console\nWe need to send the code to the console (that is, send it to R)"
  },
  {
    "objectID": "day3/index.html#running-code-from-a-file-1",
    "href": "day3/index.html#running-code-from-a-file-1",
    "title": "Reproducible data analysis",
    "section": "Running code from a file",
    "text": "Running code from a file\n\nOne way to do this is to copy-and-paste it. But that is annoying.\nThe better way is to use the keyboard shortcut: control (Window) or command (Mac) + the enter key. Try it!\nYou can also either press the “Run” button in RStudio to run one line at a time, or the “Source” button to run all of the contents of your script"
  },
  {
    "objectID": "day3/index.html#comments",
    "href": "day3/index.html#comments",
    "title": "Reproducible data analysis",
    "section": "Comments",
    "text": "Comments\n\nIn addition to the actual code, it is very useful to include notes in your script so you can remember why you did things\nThese notes are called “comments”\nYou write a comment by starting with #. Anything after that will be ignored by R"
  },
  {
    "objectID": "day3/index.html#comments-1",
    "href": "day3/index.html#comments-1",
    "title": "Reproducible data analysis",
    "section": "Comments",
    "text": "Comments\n\n# This is a comment.\n# Let's use R like a calculator:\n22 / 7\n\n[1] 3.142857"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments",
    "href": "day3/index.html#functions-and-arguments",
    "title": "Reproducible data analysis",
    "section": "Functions and arguments",
    "text": "Functions and arguments\n\n\nThe next step in our R journey is to learn about functions\nA function takes input, does something to it, and returns output\nFor example, let’s try using the round function, which rounds numbers"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments-1",
    "href": "day3/index.html#functions-and-arguments-1",
    "title": "Reproducible data analysis",
    "section": "Functions and arguments",
    "text": "Functions and arguments\n\nThe input to the function is indicated by using parentheses, like this:\n\nfunction_name(input)\n\nTry it with round:\n\n\nround(3.142857)\n\n[1] 3"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments-2",
    "href": "day3/index.html#functions-and-arguments-2",
    "title": "Reproducible data analysis",
    "section": "Functions and arguments",
    "text": "Functions and arguments\n\nIn addition to the input, functions also have various settings, which are called “arguments”\n\n\n\nFor example, say we want to round to greater precision. We can use the digits argument to round to 3 digits.\n\n\nround(3.142857, digits = 3)\n\n[1] 3.143"
  },
  {
    "objectID": "day3/index.html#functions-and-arguments-3",
    "href": "day3/index.html#functions-and-arguments-3",
    "title": "Reproducible data analysis",
    "section": "Functions and arguments",
    "text": "Functions and arguments\n\nR will recognize the input and arguments by their order, so you don’t actually have to specify the argument name (this can save you some typing):\n\n\nround(3.142857, 3)\n\n[1] 3.143\n\n\n\nBut you need to remember the order yourself! If you aren’t sure, it’s always better to be explicit and include the argument name"
  },
  {
    "objectID": "day3/index.html#getting-help",
    "href": "day3/index.html#getting-help",
    "title": "Reproducible data analysis",
    "section": "Getting help",
    "text": "Getting help\n\nThis is all fine if you already know everything about what the function does, but nobody knows everything about R!\nTo see the settings (arguments) of a function, type a question mark followed by the name of the function, like this: ?round\nA description will appear in the help panel on the lower right."
  },
  {
    "objectID": "day3/index.html#getting-help-1",
    "href": "day3/index.html#getting-help-1",
    "title": "Reproducible data analysis",
    "section": "Getting help",
    "text": "Getting help\n\nGoogling or asking ChatGPT* are also OK\n*but always be sure to check what ChatGPT tells you!"
  },
  {
    "objectID": "day3/index.html#vectors",
    "href": "day3/index.html#vectors",
    "title": "Reproducible data analysis",
    "section": "Vectors",
    "text": "Vectors\n\nSo far, we have been doing calculations on one value at a time. But we want to be able to calculate many things at once.\nWe can do that with vectors, which are a series of values\nYou make a vector with the c() function\n\n(from now on I will always refer to functions by their name plus the parentheses, since you always need them to actually use the function)"
  },
  {
    "objectID": "day3/index.html#vectors-1",
    "href": "day3/index.html#vectors-1",
    "title": "Reproducible data analysis",
    "section": "Vectors",
    "text": "Vectors\n\n# Create a vector of numbers\n# (a \"numeric vector\")\nnumbers &lt;- c(1, 2, 3, 4, 5)\nnumbers\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "day3/index.html#vectors-2",
    "href": "day3/index.html#vectors-2",
    "title": "Reproducible data analysis",
    "section": "Vectors",
    "text": "Vectors\nWe can now do use the vector as input. Say we want to double each of the numbers:\n\nnumbers * 2\n\n[1]  2  4  6  8 10\n\n\n…or obtain their mean value:\n\nmean(numbers)\n\n[1] 3\n\n\n\nAlmost everything you do in R relies on objects, functions, and vectors"
  },
  {
    "objectID": "day3/index.html#data-types",
    "href": "day3/index.html#data-types",
    "title": "Reproducible data analysis",
    "section": "Data types",
    "text": "Data types\n\nVectors have a rule: each item (called an “element”) of the vector must be of the same data type\nThe basic data types in R include:\n\nNumeric (numbers, also confusingly called \"double\")\nCharacter (words)\nLogical (TRUE or FALSE)"
  },
  {
    "objectID": "day3/index.html#data-types-1",
    "href": "day3/index.html#data-types-1",
    "title": "Reproducible data analysis",
    "section": "Data types",
    "text": "Data types\n\n# A numeric vector:\nc(1, 2, 3)\n\n[1] 1 2 3\n\n# A character vector:\nc(\"banana\", \"orange\", \"apple\")\n\n[1] \"banana\" \"orange\" \"apple\" \n\n# A logical vector:\nc(TRUE, FALSE, TRUE)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day3/index.html#data-types-2",
    "href": "day3/index.html#data-types-2",
    "title": "Reproducible data analysis",
    "section": "Data types",
    "text": "Data types\nWe can check the type of the vector using the typeof() function.\n\nnums &lt;- c(1, 2, 3)\ntypeof(nums)\n\n[1] \"double\"\n\nfruit &lt;- c(\"banana\", \"orange\", \"apple\")\ntypeof(fruit)\n\n[1] \"character\"\n\ntf &lt;- c(TRUE, FALSE, TRUE)\ntypeof(tf)\n\n[1] \"logical\""
  },
  {
    "objectID": "day3/index.html#data-types-3",
    "href": "day3/index.html#data-types-3",
    "title": "Reproducible data analysis",
    "section": "Data types",
    "text": "Data types\n\nWhat do you think happens if you try to combine data of different types?\nTry it!\n\n\nmixed &lt;- c(1, 2, \"banana\", \"orange\")"
  },
  {
    "objectID": "day3/index.html#data-types-4",
    "href": "day3/index.html#data-types-4",
    "title": "Reproducible data analysis",
    "section": "Data types",
    "text": "Data types\n\nmixed &lt;- c(1, 2, \"banana\", \"orange\")\nmixed\n\n[1] \"1\"      \"2\"      \"banana\" \"orange\"\n\ntypeof(mixed)\n\n[1] \"character\"\n\n\n\n\nThe numeric data and the character data were all forced to be character (even though \"1\" may look like a number, the quotation marks show you that it is stored as a character)"
  },
  {
    "objectID": "day3/index.html#comparisons",
    "href": "day3/index.html#comparisons",
    "title": "Reproducible data analysis",
    "section": "Comparisons",
    "text": "Comparisons\n\nWe will finish by demonstrating a very useful thing in programming: comparing values\nThe comparison symbols are:\n\n&gt; greater than\n&lt; less than\n== equals (be careful! use two equals signs, not one)\n!= not equal"
  },
  {
    "objectID": "day3/index.html#comparisons-1",
    "href": "day3/index.html#comparisons-1",
    "title": "Reproducible data analysis",
    "section": "Comparisons",
    "text": "Comparisons\n\nThe comparisons will return a logical vector:\n\n\n# Here are some ages of people\nages &lt;- c(21, 8, 40)\n\n# Which of these people are adults?\nages &gt; 20\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day3/index.html#subsetting",
    "href": "day3/index.html#subsetting",
    "title": "Reproducible data analysis",
    "section": "Subsetting",
    "text": "Subsetting\n\nThe reason that comparisons are so useful is that you can use them for subsetting, that is, to narrow down the data\nYou perform subsetting with square brackets, []"
  },
  {
    "objectID": "day3/index.html#subsetting-1",
    "href": "day3/index.html#subsetting-1",
    "title": "Reproducible data analysis",
    "section": "Subsetting",
    "text": "Subsetting\n\nHere we obtain the second value of the vector:\n\n\nages[2]\n\n[1] 8"
  },
  {
    "objectID": "day3/index.html#subsetting-2",
    "href": "day3/index.html#subsetting-2",
    "title": "Reproducible data analysis",
    "section": "Subsetting",
    "text": "Subsetting\n\nOr we could obtain the first and second values:\n\n\nages[c(1, 2)]\n\n[1] 21  8"
  },
  {
    "objectID": "day3/index.html#subsetting-3",
    "href": "day3/index.html#subsetting-3",
    "title": "Reproducible data analysis",
    "section": "Subsetting",
    "text": "Subsetting\n\nOr we can use a logical vector to indicate which values to keep:\n\n\nages[c(TRUE, TRUE, FALSE)]\n\n[1] 21  8"
  },
  {
    "objectID": "day3/index.html#subsetting-4",
    "href": "day3/index.html#subsetting-4",
    "title": "Reproducible data analysis",
    "section": "Subsetting",
    "text": "Subsetting\n\nHowever, you typically don’t type such logical vectors by hand\nIt is more useful to subset by using the output of a comparison\nFor example, let’s subset to only ages of adults. Recall how we set up that comparison:\n\n\nages &gt; 20\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "day3/index.html#subsetting-5",
    "href": "day3/index.html#subsetting-5",
    "title": "Reproducible data analysis",
    "section": "Subsetting",
    "text": "Subsetting\n\nNow, use that code to subset the values:\n\n\nages[ages &gt; 20]\n\n[1] 21 40\n\n\n\n\nThis kind of subsetting is very helpful for working with data, which will do starting next week!"
  },
  {
    "objectID": "day3/index.html#homework",
    "href": "day3/index.html#homework",
    "title": "Reproducible data analysis",
    "section": "Homework",
    "text": "Homework\n\nGo to Moodle, click on Day 3 Homework and click on the link to accept the assignment\nClone the repo to your data-analysis-course on your Desktop, like we did last time"
  },
  {
    "objectID": "day3/index.html#homework-1",
    "href": "day3/index.html#homework-1",
    "title": "Reproducible data analysis",
    "section": "Homework",
    "text": "Homework\n\nEdit the day03_homework.R file to answer the questions.\nMake sure to run the code. Your R code should not have any errors!\nCommit your changes as you work on your homework, and push them to the remote"
  },
  {
    "objectID": "day3/index.html#homework-and-chatgpt",
    "href": "day3/index.html#homework-and-chatgpt",
    "title": "Reproducible data analysis",
    "section": "Homework and ChatGPT",
    "text": "Homework and ChatGPT\n\nI provide homework to give you a chance to think and learn\nFor basic R homework, ChatGPT can answer all of the questions instantly, and I can’t tell if you used it or not\nBut if you only use ChatGPT, you will not learn anything\nPlease think about why you are taking this class (and why you are paying money to attend Chiba U): do you just want a grade, or do you want to learn? It is up to you."
  },
  {
    "objectID": "day2/day02_intro_to_git.html",
    "href": "day2/day02_intro_to_git.html",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "",
    "text": "By the end of this class, you should\n\nHave a conceptual understanding of what version control is and why it is important\nbe able to describe the differences and relationships between Git, GitHub, and Git Client\nHave some familiarity with the GitHub browser interface and be able to use some of its basic features such as navigating the contents of a repository and creating issues\nHave your environment set up for using Git and GitHub\nHave practical experience with the routine Git workflow: Create, Clone, Stage, Commit, Push, and Pull\nLearn the key steps for submission of assignments in this course"
  },
  {
    "objectID": "day2/day02_intro_to_git.html#learning-objectives",
    "href": "day2/day02_intro_to_git.html#learning-objectives",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "",
    "text": "By the end of this class, you should\n\nHave a conceptual understanding of what version control is and why it is important\nbe able to describe the differences and relationships between Git, GitHub, and Git Client\nHave some familiarity with the GitHub browser interface and be able to use some of its basic features such as navigating the contents of a repository and creating issues\nHave your environment set up for using Git and GitHub\nHave practical experience with the routine Git workflow: Create, Clone, Stage, Commit, Push, and Pull\nLearn the key steps for submission of assignments in this course"
  },
  {
    "objectID": "day2/day02_intro_to_git.html#part-1-what-is-version-control-git-github-git-client",
    "href": "day2/day02_intro_to_git.html#part-1-what-is-version-control-git-github-git-client",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "Part 1: What is Version Control? Git? GitHub? Git Client?",
    "text": "Part 1: What is Version Control? Git? GitHub? Git Client?\nAll these terms might seem a little daunting at first, but don’t worry, all these things were invented to make things easier for you. There is a bit of a learning curve if you have no previous experience, but rest assured, this class has been carefully designed to walk you through everything you need to know.\n\nGit Basics\nVersion control is one of the key tools in the software engineer’s toolbox. According to The Guardian, &gt;900 developers contributed to the development of Microsoft’s Windows 7. When you have that many people working on a single project, imagine how many times the code base would be changed within a single day, or even a single hour? And by who? And for what? What happens if more than two developers change a single file at the same time? Or even a single line of code?\nA version control system provides a structured way for maintaining a clean and easily accessible track record of how a directory of files (most commonly the source code of some software application) evolves through time. It also provides important mechanisms for resolving issues when they arise, such as when two developers try to make conflicting changes to a single file.\nGit is just one of many version control systems out there, albeit a (very) popular one. Others include Mercurial, Perforce, Subversion, etc.\nWatch this video for some Git Basics.\n\n\nWhy Git? (excerpt from section 1.1 of Happy Git and GitHub for the useR)\nGit is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids.\nGit has been re-purposed by the data science community. In addition to using it for source code, we use it to manage the motley collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code.\n\n\nWhy GitHub? (excerpt from section 1.2 of Happy Git and GitHub for the useR)\nThis is where hosting services like GitHub, Bitbucket, and GitLab come in. They provide a home for your Git-based projects on the internet. If you have no idea what I’m talking about, think of it as DropBox but much, much better. The remote host acts as a distribution channel or clearinghouse for your Git-managed project. It allows other people to see your stuff, sync up with you, and perhaps even make changes. These hosting providers improve upon traditional Unix Git servers with well-designed web-based interfaces.\nBut be careful, while GitHub and many other services are great for tracking files, they may not always have the capacity to store large amounts of data. GitHub recommends that repositories are under the size of 1GB (see this github help page). More importantly, GitHub doesn’t allow for files larger than 100MB in size (see Working with large files).\nEven for private solo projects, it’s a good idea to push your work to a remote location for peace of mind. Why? Because it’s fairly easy to screw up your local Git repository, especially when you’re new at this. The good news is that often only the Git infrastructure is backed up. Your files are just fine! Which makes your Git pickle all the more frustrating. There are official Git solutions to these problems, but they might require expertise and patience you can’t access at 3a.m. If you’ve recently pushed your work to GitHub, it’s easy to grab a fresh copy, patch things up with the changes that only exist locally, and get on with your life.\nWe target GitHub – not Bitbucket or GitLab – for the sake of specificity. However, all the big-picture principles and even some mechanics will carry over to these alternative hosting platforms.\n\n\nWait, so what is what, exactly?\nVersion control is the general term used to refer to software systems that helps you “manage” your files, most commonly being code bases. As already mentioned, Git is just one of many version control systems out there. Other examples include Mercurial, Perforce, Subversion, etc.\nGit is the version control software. Both the GitHub server and your computer run it. It is what enables your laptop to talk with the remote repository stored on GitHub, and enables version control features like pushing and pulling code changes, keeping history, etc.\nGitHub is the service in the cloud that stores your remote repository. When you’re working in a group, you and your collaborators will independently interact with GitHub in order to pull/publish your latest code changes. It will hold the most up-to-date “truth” of your project directory with each of you working away on your local machines.\nGit Client is a piece of software that provides a graphical user interface that facilitates your interaction with Git. In our case, we will be using RStudio’s built-in Git Client. Other options include SourceTree and GitHub Desktop. And of course, the terminal is the most powerful (but also the most difficult if you’re not used to command line interfaces) way to use Git."
  },
  {
    "objectID": "day2/day02_intro_to_git.html#part-2-set-up-your-environment",
    "href": "day2/day02_intro_to_git.html#part-2-set-up-your-environment",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "Part 2: Set up your environment",
    "text": "Part 2: Set up your environment\nBefore we can start using Git, your computer must be equipped with the appropriate software. In this section, we will walk you through: 1. Installing Git, 2. Registering for a GitHub account, 3. Setting up an SSH key, 4. Talking to Git via RStudio.\n\n1. Install Git (contains excerpts from Ch. 6 of Happy Git and GitHub for the useR)\nYou need Git, so you can use it at the command line and so RStudio can call it. If there’s any chance it’s installed already, verify that, rejoice, and skip this step. Otherwise, find installation instructions below for your operating system.\n\nIs Git already installed?\nOpen the shell (terminal / command line). Type in git --version, no quotation, press enter.\ngit --version\n## git version 2.39.2\nIf you see something like git: command not found, proceed to the instructions for installation based on your operating system.\nIf you see a printout of the version number as shown above, this means you have Git already. Great! But wait. Is the version number &lt; 2.28? If so, I recommend that you update it (follow the install instructions based on your operating system below). The reason you should update if you have an older version of Git is that newer versions allow us to configure the default branch name. There is a movement in the Git community to rename the default branch of repositories from ‘master’ in favor of the neutral and inclusive term ‘main’, as ‘master’ has offensive connotations. GitHub has made the change to default new branch names as main. With older versions of git, the default branch will always be ‘master’, so each time you create a new repo you’ll have to rename the local default branch to avoid conflicts with the GitHub default. With a newer version (2.28 and later) you can set it once and you’re good to go for all new repos.\nOtherwise, if you have a current version of Git installed, you can skip the next step!\n\n\nInstall Git for Windows people\nInstall Git for Windows, previously known as msysgit or “Git Bash”, to get Git in addition to some other useful tools, such as the Bash shell. Yes, all those names are totally confusing. You may accept all the default settings during installation.\n\nThis approach leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the Bash shell will be useful as you venture outside of R/RStudio.\nThis also leaves you with a Git client, though not a very good one.\nRStudio for windows likes for git to be in the Files(x86) folder. If not in this location, RStudio may not detect it, and may cause headaches for you later.\n\n\n\nInstall Git for Mac people\nFirst install the Xcode command line tools (not all of Xcode), which includes Git by opening a terminal and typing in the following and press enter. Follow prompts.\nxcode-select --install\nVerify that Xcode command line tools has been installed by typing the following into the terminal and press enter.\nxcode-select --version\n## xcode-select version 2384.\nEnter one of these commands to elicit an offer to install developer command line tools:\ngit --version\ngit config\nAccept the offer! Click on “Install”.\nIf the Xcode method isn’t successful for you, you can install git from here: http://git-scm.com/downloads. Or you can try this command if you use Homebrew:\nbrew install git\nVerify that you’re ready to go by running the git --version command once again.\nAdditionally if you’ve updated your git version, save yourself some potential headache and make sure that RStudio is pointing to the correct version of git.\n\n\nInstall Git for Linux people\nInstall Git via your distro’s package manager.\nUbuntu or Debian Linux:\nsudo apt-get install git\nFedora or RedHat Linux:\nsudo yum install git\nA comprehensive list for various Linux and Unix package managers.\n\n\n\n2. Register for a GitHub account (contains excerpts from Ch. 6 of Happy Git and GitHub for the useR)\nIf you don’t have a GitHub account already, register for one at GitHub. It’s free!\nA few tips on selecting a username, which sadly tend to contradict each other:\n\nIncorporate your actual name! People like to know who they’re dealing with. Also makes your username easier for people to guess or remember.\nReuse your username from other contexts, e.g., Twitter or Slack if it’s available.\nPick a username you will be comfortable revealing to your future boss.\nShorter is better than longer.\nBe as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames.\nMake it timeless. Don’t highlight your current university, employer, or place of residence.\nAvoid words laden with special meaning in programming. In my first inept efforts to script around the GitHub API, I assigned lots of issues to the guy with username NA because my vector of GitHub usernames contained missing values. A variant of Little Bobby Tables.\n\nYou can change your username later, but better to get this right the first time.\n\nChanging your GitHub username\nWhat happens when I change my username?\n\n\n\n3. Introduce yourself to Git (contains excerpts from Ch 7 of Happy Git and GitHub for the useR)\nFirst, you want to introduce yourself to Git. The information you enter here will constitute the user stamp for each commit you make. That way, Git can trace back code changes to their authors. This only needs to be done once.\nIn the shell/terminal:\ngit config --global user.name 'your_github_username'\ngit config --global user.email 'your_email_adress'\ngit config --global --list\nsubstituting your github username and the email associated with your GitHub account.\n\n\n4. Authenticate with SSH (contains excerpts from Ch 10 of Happy Git and GitHub for the useR)\nWhen we interact with a remote Git server, such as GitHub, we have to include credentials in the request. This proves we are a specific GitHub user, who’s allowed to do whatever we’re asking to do.\nGit can communicate with a remote server using one of two protocols, HTTPS or SSH, and the different protocols use different credentials.\nHere we describe the credential setup for the HTTPS protocol, which is what we recommend if you have no burning reason to pick SSH (if so, head to Ch 10 of Happy Git and GitHub for the useR). With HTTPS, we will use a personal access token (PAT).\nLet it be known that the password that you use to login to GitHub’s website is NOT an acceptable credential when talking to GitHub as a Git server. This was possible in the past (and may yet be true for other Git servers), but those days are over at GitHub. You can learn more in their blog post Token authentication requirements for Git operations.\nHere’s the error you’ll see if you try to do that now:\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: Authentication failed for 'https://github.com/OWNER/REPO.git/'\nThis is a very minimal account of getting and storing a PAT. This might be all you need when you’re first getting yourself set up. If you run into trouble, ask the instructor, and refer to the detailed description in Ch 9 of Happy Git and GitHub for the useR.\nGo to https://github.com/settings/tokens and click “Generate token” (or use usethis::create_github_token() from R).\nLook over the scopes; I highly recommend selecting “repo”, “user”, and “workflow”.\nClick “Generate token”.\nCopy the generated PAT to your clipboard. Leave that browser window open and available for a little while, so you can come back to copy the PAT. Once you close the window, you won’t be able to see the PAT (but you can generate a new one). You’ll want to store the PAT securely, like in a password manager (NOT in a repo that gets pushed to GitHub!!) so you can reuse it until it expires.\nNext, you need to save your PAT to a secure place on your computer and configure git to use this for authentication. We will do this in R.\nFirst, install the “gitcreds” R package with install.packages(\"gitcreds\"). Next, run gitcreds::gitcreds_set() and enter your PAT when prompted. That’s it - now you should be able to communicate with GitHub without providing your password (or token) every time.\n\nSet the default branch name to main\nFinally, we’ll set the global option for all new repositories to use a default branch name of main.\ngit config --global init.defaultBranch main\nIf this command is successful, great! Move on to Part 3.\nNote that this command will only work for Git versions 2.28 and higher, so if your version is older, you’ll have to rename the default branch each time you create a new repo. Here’s how to do that.\nOption 1: You can do this on the command line (from within the new repo):\ngit branch -M main\nOption 2: In an RStudio project for the new repo, run the following line of R code, which uses the usethis package:\n# install usethis first if it's not already installed\ninstall.packages(\"usethis\")\n# rename default branch from master to main \nusethis::git_default_branch_rename(to = \"main\")"
  },
  {
    "objectID": "day2/day02_intro_to_git.html#part-3-create-clone-stage-commit-push-pull",
    "href": "day2/day02_intro_to_git.html#part-3-create-clone-stage-commit-push-pull",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "Part 3: Create, Clone, Stage, Commit, Push, Pull!",
    "text": "Part 3: Create, Clone, Stage, Commit, Push, Pull!\nNow, we’re ready to start using Git.\nThe six verbs in the title will likely encompass 90% of everything you will do with Git. We will now walk through each one to give a brief explanation and demo.\nNote that everything that can be done using RStudio (or any other Git Client), can also be done via the shell. Here we provide instructions for RStudio environment for a more guided experience.\nIf you’re interested, check out these workshop materials from Software Carpentry on using Git in the shell. It is definitely a worthwhile learning experience if you want to dive deeper into the Git world.\n\nOverview\nA repository is simply a directory for your project. It is no different from any other directories on your laptop, except that Git knows about it and keeps a complete historical record of every change that has been “committed”.\nWhen a repository is stored on GitHub, it is called the “remote” repository. You can then “clone” this repository onto your laptop. The copy on your laptop is then called the “local” repository. “Pushing” and “pulling” are operations for keeping the local and remote repositories in sync with each other.\nFor example, You can modify codes in your “local” repository and then, when ready, “push” your changes to the “remote” repository on GitHub. Your group members can then “pull” the most up-to-date version of the “remote” repository from GitHub into their “local” repositories and continue to work on the project.\nDon’t worry if you don’t understand every detail of the workflow just yet. Just get the overall picture for now. You’ll gain a much deeper understanding once we start trying things out for real, starting now!\nWe are going to start by creating a brand new repository for this class. We will use this repository to illustrate how to start an assignment for this course. To complete the deliverable for this class, follow these steps to push new files to this repository.\n\n\nCreate a new assignment repository\nHere we are going to create a new assignment repository. To start a new assignment, you’ll need an assignment invite link, which will be provided on Moodle.\nLog into Moodle and navigate to our course page. Under the main “Course” tab, click on “Day 2: Git and GitHub”.\nClick on the link that says “First repo”.\n\n\n\nCanvas\n\n\nYou’ll be prompted to login to GitHub if you’re not already logged in. If this is your first assignment for the class, you’ll first be asked to link your GitHub ID to your name in the class roster. Once that’s done, you’ll be taken to a page that invites you to accept the assignment. Click the green “Accept this assignment” button.\n\n\n\nAccept assignment\n\n\nIf all goes well, you’ll arrive at the ‘creating repo’ page. This could take a few minutes if the assignment contains a lot of files, but in most cases should be almost instantaneous. So go ahead and refresh your browser.\n\n\n\nCreating repo\n\n\nWhen your repo is ready, you’ll see a page that has a link to it. If there is a due date for an assignment, it will be shown here.\n Follow the link. Congratulations! This is the web page of your new repository on Github. Using the GitHub website, you will be able to browse your files directly inside of an internet browser (although so far it is empty since we haven’t added any files). Notice that this repo is labeled ‘Private’. It is only accessible to you, and to the teaching team. No one else can see it.\n\n\n\nRepository created screenshot\n\n\nIf you cannot create a repository, get help from the instructor.\nThis step is specific to this course. If instead you would like to create a general new repository (that is not an assignment for this course), simply click the “New repository” button on your home screen when you are logged into GitHub. When you create a new repository in this way, you can choose to make it private to only yourself (with the option to add specific collaborators if you choose), or public to showcase your work to the public.\n\n\nClone\nNext, we want to clone this repository into your laptop so that you have a local copy of the repository. This is how you can make changes to the repository on your machine.\nMake sure you have the latest version of RStudio installed before you start.\nCopy the HTTPS (not SSH, since we set up authentication with your PAT) link from your GitHub repository website. It will be something like https://github.com/data-analysis-chiba-2023/first-repo-joelnitta.git See below.\n\n\n\nRepository link screenshot\n\n\nImportant Note: Unlike in this example, where we started with an empty repository, for some future assignments, the repository created for you will already contain files. In that case, to find the “repository URL”, locate the green “Code” button on the upper right corner of the file list as shown below. Be sure to select “HTTPS”, since that is how we have set up your authentication method.\n\n\n\nGitHub clone\n\n\nNext, in RStudio, start a new Project:\n\nFile &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository.\n\n\n\n\nCreate new project screenshot\n\n\nDo you NOT see an option to get the Project from Version Control? Go to chapter 13 of Happy Git and GitHub for the useR for tips on how to help RStudio find Git.\nTake charge of – or at least notice! – the local directory for the Project. A common rookie mistake is to have no idea where you are saving files or what your working directory is. Pay attention. Be intentional.\nThis course will involve creating multiple projects. I recommend creating a folder called “data-analysis-course” on the desktop, and putting each project in there. Then you can easily find them later.\nCheck “Open in new session” so that RStudio will open your new project in a new window. Click “Create Project”.\nConfirm that a new directory has been created with the project directory name you specified. The directory now contains a .Rproj file. This is the RStudio project file. We will subsequently push this file to the remote repository.\nAlso note that a new RStudio window has been opened for you as a workspace. Notice the “Git” tab in your RStudio window.\n\n\n\nNew RStudio window containing the new project\n\n\nCongratulations, again! You have cloned the Git repository onto your local machine. Well done!\nNotice that the project directory current contains nothing except for the automatically generated .Rproj and .gitignore file. Ignore this last file for now, we will talk about it later (ignore .gitignore, ha! It’s okay, you don’t have to laugh). This is not very exciting yet at all. So let’s add something.\nThe first thing you should add to every directory you create is README.md, and you will soon see why. This is something that integrates very well into the GitHub user interface; GitHub always detects your README files automatically and displays it right on the repository web page, giving information about the repository.\nGo ahead and create a new file in your project directory (File-&gt;New File-&gt;Markdown file). Add the line “This is a line from RStudio”. Save your file to the local repo directory and call it README.md.\nNext, we want to publish this change on GitHub so that it becomes a permanent change with a record (and in the future so that your group members or collaborators can access it if it were a shared repo). The process is a little awkward to start with so we’ll take it one step at a time.\n\n\nStage\nFirst, we need to stage the change. This is basically “telling” GitHub about this new change. Nothing can be committed without first being staged.\nStage the README.md file by going to the “Git” tab on top right of the RStudio window and check “staged”. Also stage the .Rproj file while you’re at it.\n\n\n\nStage changes\n\n\nGreat, that was easy. Git now knows about these new changes you want to submit.\nNote that if you were doing this on the command line, you’d use the git add command to stage files.\n\n\nCommit\nNext, we want to commit these changes. By committing, you effectively create a new record to remember the current state of the directory. This is something you don’t get from only staging the files.\nYou can commit by clicking Tools &gt; Version Control &gt; Commit (or hit the Commit button in the Git pane). Notice the changes for each file can be viewed in the popup window. Enter a commit message to describe your change. I put “Add README.md and the RStudio project file” for mine. All your staged files will be included in this commit. Click “Commit” and “Close”.\n\n\n\nCommit changes\n\n\nGo to your repository page on GitHub. Notice that the new files are not yet on GitHub. Surprised?\nIMPORTANT NOTE!! The changes are NOT on GitHub yet. They have NOT been published. Commit is an operation that happens solely on your local repository. This allows you to create a record of changes while being offline. This also shields you from complications that may arise when merging with the remote repository (until you decide to push). This is something that confuses a lot of beginners. Take a moment to think about this. If in doubt, ask the instructor.\n\n\nPush\nPush is the operation to bring the remote repository hosted on GitHub up to date with your local changes. Normally, you might have accumulated one or more commits in your local repository that you’re ready to publish. All of these commits can be pushed with one “push” operation.\nNow we will push the one commit we made with the addition of the README.md and .Rproj files.\nDo this by clicking the green ‘Up’ arrow (or Tools-&gt;Version Control-&gt;Push Branch).\n\n\n\nPush\n\n\nYou should see this pop-up in RStudio (with your GitHub username).\n&gt;&gt;&gt; git push origin HEAD:refs/heads/main\nTo github.com:data-analysis-chiba-2023/first-repo-username.git\n * [new branch]      HEAD -&gt; main\nNow, go back to your repository page on GitHub. This is what you should see.\n\n\n\nChanges pushed!\n\n\nNotice that the content of README.md is displayed directly on the repository’s home page!\nTake a moment to browse through GitHub’s user interface. You can navigate through the files and their contents. You can also look at the commit history by clicking on “commit”. In addition, GitHub supports a range of project management features including issues, wiki pages, and contribution statistics. You will inevitably learn more and you gain more experience!\nKeep in mind that if someone else wants to clone your repository, an owner (in the case of assignments that is you or a teaching team member) must first add the individual(s) to the collaborators list in order for them to have access. This is because by default the repo is private to only you and the teaching team. You can change this if you wish by going to ‘Settings’ - see below.\n\n\n\nGitHub add collaborators\n\n\n\n\nPull\nFinally, we want to demo the pull operation. We will make a change directly on GitHub. Don’t actually do this in practice (see note below). This is just an illustration to show how we could pull in changes to files that were made somewhere else than on your local machine. This simulates the situation where your group member pushes a new change that you don’t currently have. In order to sync up, you’ll perform a “pull” from the remote repository into your local repository.\nTo make a change directly on GitHub, go to your repository page, click on the file README.md. On top right of the file, there should be a pencil icon.\n\n\n\nEdit file on GitHub directly\n\n\nClick on the pencil. Add this line to README.md: “This change was made directly on GitHub.” Put in a commit message and commit directly to the “main” branch. Now you should see this.\n\n\n\nREADME.md changed directly on GitHub\n\n\nCheck that your local version of the file still only contains the single line: “This is a line from RStudio”.\n\n\n\nLocal version of README.md is unchanged\n\n\nClick the blue down arrow in the Git pane (or click Tools-&gt;Version Control-&gt;Pull Branches). And….. Voila!\n\n\n\nLocal version of README.md changed after pulling\n\n\nIMPORTANT NOTE - Note that we recommend against making extensive changes directly on GitHub. The browser is an unreliable environment compared to RStudio’s built-in text editor. In addition, this is an easy way to introduce code conflicts in case you have uncommitted changes in your local repository. This was done here only for the sake of demonstration. So don’t actually do this in practice!!\n\n\nAbout .gitignore\nOh yeah, that .gitignore file that we have ignored so far.\nGo ahead and take a look at the content of this file now. You should see the following:\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\nThis is basically telling Git to ignore all these files in the list. This may come in handy when you start working on your project. The datasets that you will work with may be &gt;100 MB in size, which exceeds GitHub’s per file limit. You may still want to keep the data files inside your project directory for easy access. In this case, you can add those filenames to this .gitignore file so that Git doesn’t bug you about these “unstaged changes”. Or, you can add all files with a certain extension using a wildcard. For example, if we wanted to make sure we don’t commit data in txt files, we could add the line *.txt to our .gitignore file. GitHub keeps up a set of commonly used .gitignore files as well as more information about their usage here."
  },
  {
    "objectID": "day2/day02_intro_to_git.html#part-4-homework-assignment",
    "href": "day2/day02_intro_to_git.html#part-4-homework-assignment",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "Part 4: Homework assignment",
    "text": "Part 4: Homework assignment\nWe have now worked through the complete cycle of cloning, committing changes, and pushing changes to the remote. For your homework assignment, you will practice this one more time.\nFirst, go to Moodle, click on the Day 2 Homework assignment, and click on the link to accept the assignment. This will create the repo in your GitHub account.\n\n\n\nLocation of Day 2 homework\n\n\n\n\n\nLocation of Day 2 homework link\n\n\nAs we did before, clone the remote repo to your local machine. Then, edit the file git_facts.md by deleting the underscores and filling in the blanks with the correct words. Once you have done so, commit your changes and push to the remote.\nBe sure to do this BY THE DEADLINE, or your work will not be counted.\nI will repeat this part because it’s important: you must both commit the changes locally and push to the remote before the deadline – verify that you can see your changes on GitHub, otherwise your instructor won’t be able to see them either, even if you fill in the blanks correctly. Your grade will be based on the latest commit that occurred before the deadline (this tag is auto-generated). Any commits after the deadline will be ignored (not scored).\nYou can double check that you’ve successfully submitted (pushed) the homework by visiting your GitHub repo in your browser (use the same link in Moodle that you clicked to accept the assignment). Make sure the homework file there shows the same changes that you made in RStudio."
  },
  {
    "objectID": "day2/day02_intro_to_git.html#additional-resources",
    "href": "day2/day02_intro_to_git.html#additional-resources",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "Additional resources",
    "text": "Additional resources\nHere are some resources in case you want to learn more.\n\nHappy Git and GitHub for the useR by Dr. Jenny Bryan\nGit Documentations"
  },
  {
    "objectID": "day2/day02_intro_to_git.html#attributions",
    "href": "day2/day02_intro_to_git.html#attributions",
    "title": "Reproducible Data Analysis Day 2: Introduction to Git/GitHub",
    "section": "Attributions",
    "text": "Attributions\nThese materials were modified by Joel H. Nitta from those posted at https://stat540-ubc.github.io/ under the Attribution-NonCommercial 4.0 International license.\nThis class was originally developed by Eric Chu with materials adapted from Happy Git and GitHub for the useR by Dr. Jenny Bryan. It was later modified extensively by Keegan Korthauer."
  },
  {
    "objectID": "day7/index.html#what-is-quarto",
    "href": "day7/index.html#what-is-quarto",
    "title": "Reproducible data analysis",
    "section": "What is Quarto?",
    "text": "What is Quarto?\n\n\nQuarto is a computer program that allows you to generate documents in various formats with code\nWe will use it to generate MS Word documents with R\nIt can also generate PDF, HTML, and other output\nIt can also use other programming languages like Python"
  },
  {
    "objectID": "day7/index.html#why-use-quarto",
    "href": "day7/index.html#why-use-quarto",
    "title": "Reproducible data analysis",
    "section": "Why use Quarto?",
    "text": "Why use Quarto?\n\n\n\n\nPart of data analysis is communicating your results to an audience\nFor example, writing a final report for a class, or giving a presentation at work"
  },
  {
    "objectID": "day7/index.html#why-use-quarto-1",
    "href": "day7/index.html#why-use-quarto-1",
    "title": "Reproducible data analysis",
    "section": "Why use Quarto?",
    "text": "Why use Quarto?\n\n\nGenerating a report with code…\n\nhelps you avoid copy-and-paste errors\nensures that your results are a direct result of the data\nhelps you save time by re-using the code later"
  },
  {
    "objectID": "day7/index.html#installing-quarto",
    "href": "day7/index.html#installing-quarto",
    "title": "Reproducible data analysis",
    "section": "Installing Quarto",
    "text": "Installing Quarto\n\nQuarto comes installed with RStudio\nPlease update (re-install) RStudio if you haven’t done so recently"
  },
  {
    "objectID": "day7/index.html#reopen-your-project",
    "href": "day7/index.html#reopen-your-project",
    "title": "Reproducible data analysis",
    "section": "Reopen your project",
    "text": "Reopen your project\n\nWe will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\nNavigate there and click on gapminder-analysis.Rproj"
  },
  {
    "objectID": "day7/index.html#create-a-quarto-file",
    "href": "day7/index.html#create-a-quarto-file",
    "title": "Reproducible data analysis",
    "section": "Create a Quarto file",
    "text": "Create a Quarto file\n\nCreate a new Quarto file by clicking File &gt; New File &gt; Quarto Document…\nIn menu that appears, type \"Gapminder Analysis\" for the title and your name for the author\n\nLeave format as HTML (as it says, we can change it at any time later)\nIf “Use visual markdown editor” is checked, uncheck it\n\nRStudio will create a file. Save it as \"gapminder-report.qmd\" (.qmd is the file extension for Quarto files)"
  },
  {
    "objectID": "day7/index.html#how-a-quarto-file-is-set-up",
    "href": "day7/index.html#how-a-quarto-file-is-set-up",
    "title": "Reproducible data analysis",
    "section": "How a Quarto file is set up",
    "text": "How a Quarto file is set up\n\n\nLook at your new Quarto file. What do you notice that is different from the .R files we have been using so far?\nThere is normal text like “Quarto enables you to weave together content…” that does not appear in a comment\nThere are lines starting with two hashes (##)\nThere are lines like ```{r}\nWhat is going on here?"
  },
  {
    "objectID": "day7/index.html#how-a-quarto-file-is-set-up-1",
    "href": "day7/index.html#how-a-quarto-file-is-set-up-1",
    "title": "Reproducible data analysis",
    "section": "How a Quarto file is set up",
    "text": "How a Quarto file is set up\n\n\nA Quarto (.qmd) file is set up opposite to an R script\nNormal lines of text are not code (so they don’t need a # like a comment)\nR code is contained within lines starting with ```{r} and ending with ``` (called a “code chunk”)"
  },
  {
    "objectID": "day7/index.html#rendering",
    "href": "day7/index.html#rendering",
    "title": "Reproducible data analysis",
    "section": "Rendering",
    "text": "Rendering\n\n\nAnother important difference between normal .R files and .qmd files is that the latter produce documents\nThis is called “rendering”\nLet’s try that now: press the “Render” button in RStudio"
  },
  {
    "objectID": "day7/index.html#rendering-1",
    "href": "day7/index.html#rendering-1",
    "title": "Reproducible data analysis",
    "section": "Rendering",
    "text": "Rendering\n\n\nYou should see the rendered document (a web page, in this case) appear on the right side of RStudio (in the Files and Plots panel)\n\nalso, in the Files tab, notice the gapminder-report.html file\n\nNotice the formatting of the output: lines like ## Quarto appear as headers\nYou can also see the output of the code, like 1 + 1"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown",
    "href": "day7/index.html#formatting-with-markdown",
    "title": "Reproducible data analysis",
    "section": "Formatting with Markdown",
    "text": "Formatting with Markdown\n\n\nThe .qmd file is written in plain text (without formatting, similar to an .R file)\nWe can specify formatting in the output using Markdown syntax\n\nMarkdown is a very simple version of HTML"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-1",
    "href": "day7/index.html#formatting-with-markdown-1",
    "title": "Reproducible data analysis",
    "section": "Formatting with Markdown",
    "text": "Formatting with Markdown\n\nAs you can see in the document, the hash symbol (#) is used to define headings, which appear larger than other text\n\n# Heading level 1 (biggest)\n## Heading level 2\n### Heading level 3…\n\nFor italics, wrap the text in *, like this *this* (renders like this)\nFor bold, wrap the text in **, like this **this** (renders like this)"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-2",
    "href": "day7/index.html#formatting-with-markdown-2",
    "title": "Reproducible data analysis",
    "section": "Formatting with Markdown",
    "text": "Formatting with Markdown\n\n\n.qmd files are known as “Quarto Markdown” because they add Quarto’s features (the ability to include code chunks) to Markdown\nYou may have heard of “R Markdown,” which is the precursor to Quarto Markdown\n\nThere is generally no reason to use R Markdown instead of Quarto Markdown\nThey are very similar, so most things you read about R Markdown will apply to Quarto Markdown"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-3",
    "href": "day7/index.html#formatting-with-markdown-3",
    "title": "Reproducible data analysis",
    "section": "Formatting with Markdown",
    "text": "Formatting with Markdown\n\n\nRStudio has a handy way for you to preview what the rendered text will look like\nRight now we are in “Source” mode, which means we are editing the plain text\nClick on the “Visual” mode button to switch to “Visual” mode\nNow it looks much more like the output on the right\n\nBut notice that we don’t see the results of running the code chunks"
  },
  {
    "objectID": "day7/index.html#formatting-with-markdown-4",
    "href": "day7/index.html#formatting-with-markdown-4",
    "title": "Reproducible data analysis",
    "section": "Formatting with Markdown",
    "text": "Formatting with Markdown\n\n\nI much prefer working with plain text, so we will switch back to “Source” mode\nBut it is a good idea to use “Visual” mode to check what your markdown formatting will look like\nThere are many guides online to learn more about writing Markdown"
  },
  {
    "objectID": "day7/index.html#about-the-code-chunks",
    "href": "day7/index.html#about-the-code-chunks",
    "title": "Reproducible data analysis",
    "section": "About the code chunks",
    "text": "About the code chunks\n\n\nWithin the code chunks, anything you type is treated just like an R script\n\nNormal text must be R code\nComments can be written with #\n\nThe idea is to conduct analysis in the code chunks, and directly show the output in the rendered document"
  },
  {
    "objectID": "day7/index.html#challenge",
    "href": "day7/index.html#challenge",
    "title": "Reproducible data analysis",
    "section": "Challenge",
    "text": "Challenge\n\nModify the first code chunk to load the tidyverse package, then read in the gapminder dataset like we did before"
  },
  {
    "objectID": "day7/index.html#about-the-code-chunks-1",
    "href": "day7/index.html#about-the-code-chunks-1",
    "title": "Reproducible data analysis",
    "section": "About the code chunks",
    "text": "About the code chunks\n\n\nNotice that when we render the document, the gapminder dataset is not loaded into our current R session\nThat is because rending takes place in a separate instance of R\nTo run the R code in a chunk in your current R session, press the green “play” button at the right-hand side of the chunk"
  },
  {
    "objectID": "day7/index.html#in-line-code",
    "href": "day7/index.html#in-line-code",
    "title": "Reproducible data analysis",
    "section": "In-line code",
    "text": "In-line code\n\n\nIn addition to code chunks, you can also mix short bits of R code within normal text by first writing a backtick (`) and the letter r, then the R code, then another backtick\nFor example, we can show the number of rows in the dataset with `r nrow(gapminder)`\nThis is best used for describing facts about the data or results"
  },
  {
    "objectID": "day7/index.html#about-the-yaml-header",
    "href": "day7/index.html#about-the-yaml-header",
    "title": "Reproducible data analysis",
    "section": "About the YAML header",
    "text": "About the YAML header\n\n\nThe first set of lines at the top of the file are called the “YAML header”\n\nYAML stands for “Yet Another Markup Language”\n\nThe YAML header specifies settings for the document using variables\n\nYou can set the values of the values of the variables with a colon: variable: value, for example author: \"Joel Nitta\"\n\nThere are many other settings, but we won’t cover those today"
  },
  {
    "objectID": "day7/index.html#code-chunk-options",
    "href": "day7/index.html#code-chunk-options",
    "title": "Reproducible data analysis",
    "section": "Code chunk options",
    "text": "Code chunk options\n\n\nSimilar to the YAML header, we can also specify settings for the code chunks\nThis is done by first writing #|, then the setting like you would for the YAML header\nFor example, in a report, you usually only want to show the results of the code, not the code itself\nYou can do this with the following code chunk option: #| echo: false (remember echo echoes the code)"
  },
  {
    "objectID": "day7/index.html#code-chunk-options-1",
    "href": "day7/index.html#code-chunk-options-1",
    "title": "Reproducible data analysis",
    "section": "Code chunk options",
    "text": "Code chunk options\n\nOther useful code options\n\nmessage: false Hide code messages\nwarning: false Hide code warnings"
  },
  {
    "objectID": "day7/index.html#code-chunk-options-2",
    "href": "day7/index.html#code-chunk-options-2",
    "title": "Reproducible data analysis",
    "section": "Code chunk options",
    "text": "Code chunk options\n\nLet’s write another code chunk that outputs a plot. Change the chunk options to hide the code."
  },
  {
    "objectID": "day7/index.html#change-the-output-format",
    "href": "day7/index.html#change-the-output-format",
    "title": "Reproducible data analysis",
    "section": "Change the output format",
    "text": "Change the output format\n\n\nSo far, we have been using HTML output because it is the default and shows up immediately when we press “render”\nBut your report should be submitted in Word (.docx) format.\nChange the output format to docx and render the document again"
  },
  {
    "objectID": "day7/index.html#tell-git-to-ignore-output",
    "href": "day7/index.html#tell-git-to-ignore-output",
    "title": "Reproducible data analysis",
    "section": "Tell git to ignore output",
    "text": "Tell git to ignore output\n\nYou should not commit the output of code\n\nIt clutters your git history, and is not necessary since you can always obtain the output by running the code\n\nYou can tell git to ignore files by adding them to .gitignore:\n\ngapminder-report.docx\ngapminder-report.html\ngapminder-report_files (files needed for HTML output)"
  },
  {
    "objectID": "day7/index.html#tell-git-to-ignore-output-1",
    "href": "day7/index.html#tell-git-to-ignore-output-1",
    "title": "Reproducible data analysis",
    "section": "Tell git to ignore output",
    "text": "Tell git to ignore output\n\nIf you know you want to ignore all docx files, you could instead write this:\n\n*.docx"
  },
  {
    "objectID": "day7/index.html#summary",
    "href": "day7/index.html#summary",
    "title": "Reproducible data analysis",
    "section": "Summary",
    "text": "Summary\n\n\nQuarto allows you to insert your analysis results directly into reports\nQuarto can generate multiple output formats\nThe way of writing code and plain text is reversed compared to R scripts\nPlease try to use Quarto for your class reports!"
  },
  {
    "objectID": "day6/index.html#what-is-eda",
    "href": "day6/index.html#what-is-eda",
    "title": "Reproducible data analysis",
    "section": "What is EDA?",
    "text": "What is EDA?\n\n\nEDA stands for Exploratory Data Analysis\nEDA is the step of “getting to know” your data\nYou have already been doing some EDA by sorting the data and understanding what is in each column"
  },
  {
    "objectID": "day6/index.html#what-is-eda-1",
    "href": "day6/index.html#what-is-eda-1",
    "title": "Reproducible data analysis",
    "section": "What is EDA?",
    "text": "What is EDA?\n\n\nAnother very useful tool for EDA is data visualization\nToday we will learn how to visualize data using ggplot2\n\nggplot2 is included in the tidyverse set of packages\nThere are other ways to do this such as using plot(). But ggplot2 has more consistent syntax."
  },
  {
    "objectID": "day6/index.html#what-makes-a-good-plot",
    "href": "day6/index.html#what-makes-a-good-plot",
    "title": "Reproducible data analysis",
    "section": "What makes a good plot?",
    "text": "What makes a good plot?\n\n\nHow about this one?"
  },
  {
    "objectID": "day6/index.html#problems-with-this-plot",
    "href": "day6/index.html#problems-with-this-plot",
    "title": "Reproducible data analysis",
    "section": "Problems with this plot",
    "text": "Problems with this plot\n\n\n\n\nColors don’t correspond to contents (meat is green?)\n3D doesn’t have any meaning, only makes plot more complicated\nHard for humans to visually compare area"
  },
  {
    "objectID": "day6/index.html#what-makes-a-good-plot-1",
    "href": "day6/index.html#what-makes-a-good-plot-1",
    "title": "Reproducible data analysis",
    "section": "What makes a good plot?",
    "text": "What makes a good plot?\n\nSimple\nEasy to understand\nConveys a message"
  },
  {
    "objectID": "day6/index.html#what-makes-a-good-plot-2",
    "href": "day6/index.html#what-makes-a-good-plot-2",
    "title": "Reproducible data analysis",
    "section": "What makes a good plot?",
    "text": "What makes a good plot?\n\n\nPie chart  \n\nBar graph  \n\n\n\nBar graphs are better than pie charts for comparing values!\n\n\n\nhttps://clauswilke.com/dataviz/proportional-ink.html"
  },
  {
    "objectID": "day6/index.html#ggplot2-approach-to-plotting",
    "href": "day6/index.html#ggplot2-approach-to-plotting",
    "title": "Reproducible data analysis",
    "section": "ggplot2 approach to plotting",
    "text": "ggplot2 approach to plotting\n\n\nGrammar of Graphics: all plots share a common “grammar”\n\nInput data\nAesthetic mapping: How to represent the data visually\n\n\naesthetic = 美的, mapping = 相当する. どんな美的な要素に相当するのかの指定\n\n\nGeometry: What shape to use for the plot\n\nRecommended Reading: ggplot2: Elegant Graphics for Data Analysis"
  },
  {
    "objectID": "day6/index.html#aesthetic-mappings",
    "href": "day6/index.html#aesthetic-mappings",
    "title": "Reproducible data analysis",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\n\n\n\n\nhttps://clauswilke.com/dataviz/aesthetic-mapping.html"
  },
  {
    "objectID": "day6/index.html#reopen-your-project",
    "href": "day6/index.html#reopen-your-project",
    "title": "Reproducible data analysis",
    "section": "Reopen your project",
    "text": "Reopen your project\n\nWe will continue to use the gapminder-analysis project in the data-analysis-course folder on your Desktop\nAlso create a file to write today’s code. You could call it data-viz-practice.R"
  },
  {
    "objectID": "day6/index.html#load-tidyverse",
    "href": "day6/index.html#load-tidyverse",
    "title": "Reproducible data analysis",
    "section": "Load tidyverse",
    "text": "Load tidyverse\n\nLet’s load the tidyverse package with library()\n\nNote that you don’t need to use quotation marks for the package name\nAlso load the scales package, which is for making plot labels\n\n\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "day6/index.html#load-data",
    "href": "day6/index.html#load-data",
    "title": "Reproducible data analysis",
    "section": "Load data",
    "text": "Load data\n\nUse the read_csv() function to load a spreadsheet as a dataframe\n\n\ngapminder &lt;- read_csv(\"data_raw/gapminder.csv\")"
  },
  {
    "objectID": "day6/index.html#gapminder",
    "href": "day6/index.html#gapminder",
    "title": "Reproducible data analysis",
    "section": "Gapminder",
    "text": "Gapminder\n\nThis is a dataset of economic statistics from various countries over time, from https://gapminder.org\nThe meaning of some columns is obvious (country, continent, year), but not others\n\npop: Population\nlifeExp: Life expectancy (寿命)\ngdpPercap: GDP per capita (一人当たりの国内総生産)"
  },
  {
    "objectID": "day6/index.html#first-plot",
    "href": "day6/index.html#first-plot",
    "title": "Reproducible data analysis",
    "section": "First plot",
    "text": "First plot\n\n\nggplot(data = gapminder)"
  },
  {
    "objectID": "day6/index.html#first-plot-1",
    "href": "day6/index.html#first-plot-1",
    "title": "Reproducible data analysis",
    "section": "First plot",
    "text": "First plot\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp))"
  },
  {
    "objectID": "day6/index.html#first-plot-2",
    "href": "day6/index.html#first-plot-2",
    "title": "Reproducible data analysis",
    "section": "First plot",
    "text": "First plot\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nWhat does this plot tell us?"
  },
  {
    "objectID": "day6/index.html#challenge",
    "href": "day6/index.html#challenge",
    "title": "Reproducible data analysis",
    "section": "Challenge",
    "text": "Challenge\n\nModify the code to show how life expectancy has changed over time"
  },
  {
    "objectID": "day6/index.html#add-color",
    "href": "day6/index.html#add-color",
    "title": "Reproducible data analysis",
    "section": "Add color",
    "text": "Add color\n\n\nIn the last challenge, we saw a general trend, but there could be more detail within certain groups, like continent or country\nLet’s use color to show the continent\nWhat is color in ggplot2?\n\nColor is an aesthetic mapping"
  },
  {
    "objectID": "day6/index.html#original-plot",
    "href": "day6/index.html#original-plot",
    "title": "Reproducible data analysis",
    "section": "Original plot",
    "text": "Original plot\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#add-color-1",
    "href": "day6/index.html#add-color-1",
    "title": "Reproducible data analysis",
    "section": "Add color",
    "text": "Add color\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#add-color-2",
    "href": "day6/index.html#add-color-2",
    "title": "Reproducible data analysis",
    "section": "Add color",
    "text": "Add color\n\n\nggplot(\n  data = gapminder,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#basic-recipe",
    "href": "day6/index.html#basic-recipe",
    "title": "Reproducible data analysis",
    "section": "Basic recipe",
    "text": "Basic recipe\n\nAll plots can be made using the same basic formula:\n\nggplot(data = INPUT-DATA, mapping = aes(MAPPING)) +\n  GEOMETRY"
  },
  {
    "objectID": "day6/index.html#basic-recipe-1",
    "href": "day6/index.html#basic-recipe-1",
    "title": "Reproducible data analysis",
    "section": "Basic recipe",
    "text": "Basic recipe\n\nSince data always comes first and mapping second, we can omit those names and make our code a little simpler:\n\nggplot(INPUT-DATA, aes(MAPPING)) +\n  GEOMETRY"
  },
  {
    "objectID": "day6/index.html#plotting-lines",
    "href": "day6/index.html#plotting-lines",
    "title": "Reproducible data analysis",
    "section": "Plotting lines",
    "text": "Plotting lines\n\n\nLet’s try representing the data with a different geometry (shape)\nThis time we will use lines (geom_line())"
  },
  {
    "objectID": "day6/index.html#plotting-lines-1",
    "href": "day6/index.html#plotting-lines-1",
    "title": "Reproducible data analysis",
    "section": "Plotting lines",
    "text": "Plotting lines\n\n\nggplot(\n  gapminder, # DATA\n  aes( # MAPPING\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_line() # GEOMETRY\n\n\n\n\n\n\n\n\n\n\nThat looks a little odd. What is the problem?"
  },
  {
    "objectID": "day6/index.html#plotting-lines-2",
    "href": "day6/index.html#plotting-lines-2",
    "title": "Reproducible data analysis",
    "section": "Plotting lines",
    "text": "Plotting lines\n\n\nLines connect points along the x-axis\nBut we only want to connect points within each country\nWe need to add another aesthic mapping for that, the group"
  },
  {
    "objectID": "day6/index.html#plotting-lines-3",
    "href": "day6/index.html#plotting-lines-3",
    "title": "Reproducible data analysis",
    "section": "Plotting lines",
    "text": "Plotting lines\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#plotting-lines-4",
    "href": "day6/index.html#plotting-lines-4",
    "title": "Reproducible data analysis",
    "section": "Plotting lines",
    "text": "Plotting lines\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#plotting-lines-5",
    "href": "day6/index.html#plotting-lines-5",
    "title": "Reproducible data analysis",
    "section": "Plotting lines",
    "text": "Plotting lines\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#adding-layers-with",
    "href": "day6/index.html#adding-layers-with",
    "title": "Reproducible data analysis",
    "section": "Adding layers with +",
    "text": "Adding layers with +\n\n\nWe can add additional plot layers using the + sign\nFor example, lets add points on top of the lines"
  },
  {
    "objectID": "day6/index.html#adding-layers-with-1",
    "href": "day6/index.html#adding-layers-with-1",
    "title": "Reproducible data analysis",
    "section": "Adding layers with +",
    "text": "Adding layers with +\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#adding-layers-with-2",
    "href": "day6/index.html#adding-layers-with-2",
    "title": "Reproducible data analysis",
    "section": "Adding layers with +",
    "text": "Adding layers with +\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#adding-layers-with-3",
    "href": "day6/index.html#adding-layers-with-3",
    "title": "Reproducible data analysis",
    "section": "Adding layers with +",
    "text": "Adding layers with +\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#challenge-1",
    "href": "day6/index.html#challenge-1",
    "title": "Reproducible data analysis",
    "section": "Challenge",
    "text": "Challenge\nThe ggtitle() adds a title to a plot. Use ggtitle() as another layer to add a title to the last plot."
  },
  {
    "objectID": "day6/index.html#summary-adding-layers-with",
    "href": "day6/index.html#summary-adding-layers-with",
    "title": "Reproducible data analysis",
    "section": "Summary: Adding layers with +",
    "text": "Summary: Adding layers with +\n\n\n\n\nEach layer modifies the plot, so you can build it gradually\nOther things layers can do:\n\nSet the plot theme\nChange the axes\nAdd labels\nand more!\n\n\n\n\n\n\n\n\n\nhttps://r.qcbs.ca/workshop03/book-en/"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic",
    "href": "day6/index.html#modify-an-aesthetic",
    "title": "Reproducible data analysis",
    "section": "Modify an aesthetic",
    "text": "Modify an aesthetic\n\n\nSo far, we have been mapping aesthetics to variables in the data\nBut you can also simply assign the same value to a particular aesthetic (such as color)\nDo this by setting its value outside of mapping = aes()"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic-1",
    "href": "day6/index.html#modify-an-aesthetic-1",
    "title": "Reproducible data analysis",
    "section": "Modify an aesthetic",
    "text": "Modify an aesthetic\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic-2",
    "href": "day6/index.html#modify-an-aesthetic-2",
    "title": "Reproducible data analysis",
    "section": "Modify an aesthetic",
    "text": "Modify an aesthetic\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point(color = \"black\")"
  },
  {
    "objectID": "day6/index.html#modify-an-aesthetic-3",
    "href": "day6/index.html#modify-an-aesthetic-3",
    "title": "Reproducible data analysis",
    "section": "Modify an aesthetic",
    "text": "Modify an aesthetic\n\n\nggplot(\n  gapminder,\n  aes(\n    x = year,\n    y = lifeExp,\n    color = continent,\n    group = country)) +\n  geom_line() +\n  geom_point(color = \"black\")"
  },
  {
    "objectID": "day6/index.html#transformations",
    "href": "day6/index.html#transformations",
    "title": "Reproducible data analysis",
    "section": "Transformations",
    "text": "Transformations\n\n\n\nLet’s go back to the life expectancy vs. GDP graph again:"
  },
  {
    "objectID": "day6/index.html#transformations-1",
    "href": "day6/index.html#transformations-1",
    "title": "Reproducible data analysis",
    "section": "Transformations",
    "text": "Transformations\n\n\n\nDo you notice anything that makes this graph hard to read?"
  },
  {
    "objectID": "day6/index.html#transformations-2",
    "href": "day6/index.html#transformations-2",
    "title": "Reproducible data analysis",
    "section": "Transformations",
    "text": "Transformations\n\n\n\nNearly all the points are crowded to the left, with only a few outliers on the right\n\n\n\nWe can make this easier to read by using a log-transformation"
  },
  {
    "objectID": "day6/index.html#transformations-3",
    "href": "day6/index.html#transformations-3",
    "title": "Reproducible data analysis",
    "section": "Transformations",
    "text": "Transformations\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point()"
  },
  {
    "objectID": "day6/index.html#transformations-4",
    "href": "day6/index.html#transformations-4",
    "title": "Reproducible data analysis",
    "section": "Transformations",
    "text": "Transformations\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()"
  },
  {
    "objectID": "day6/index.html#transformations-5",
    "href": "day6/index.html#transformations-5",
    "title": "Reproducible data analysis",
    "section": "Transformations",
    "text": "Transformations\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()"
  },
  {
    "objectID": "day6/index.html#transformations-6",
    "href": "day6/index.html#transformations-6",
    "title": "Reproducible data analysis",
    "section": "Transformations",
    "text": "Transformations\n\n\nggplot(\n  gapminder,\n  aes(\n    x = gdpPercap,\n    y = lifeExp)) +\n  geom_point() +\n  scale_x_log10(\n    labels = label_comma()\n  )"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots",
    "href": "day6/index.html#multi-panel-plots",
    "title": "Reproducible data analysis",
    "section": "Multi-panel plots",
    "text": "Multi-panel plots\n\n\nggplot2 can make multiple plots at once using facetting\nEach facet is a mini-plot of some portion of the dataset\n\nDefine the facet group with vars()\n\nLet’s try this for some countries in Asia"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-1",
    "href": "day6/index.html#multi-panel-plots-1",
    "title": "Reproducible data analysis",
    "section": "Multi-panel plots",
    "text": "Multi-panel plots\n\nFirst, subset the data just to some countries in Asia (for this example)\n\n\ngapminder_asia &lt;- filter(\n  gapminder,\n  country %in% c(\"Japan\", \"China\", \"Korea, Rep.\", \"Taiwan\"))"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-2",
    "href": "day6/index.html#multi-panel-plots-2",
    "title": "Reproducible data analysis",
    "section": "Multi-panel plots",
    "text": "Multi-panel plots\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line()"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-3",
    "href": "day6/index.html#multi-panel-plots-3",
    "title": "Reproducible data analysis",
    "section": "Multi-panel plots",
    "text": "Multi-panel plots\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))"
  },
  {
    "objectID": "day6/index.html#multi-panel-plots-4",
    "href": "day6/index.html#multi-panel-plots-4",
    "title": "Reproducible data analysis",
    "section": "Multi-panel plots",
    "text": "Multi-panel plots\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))"
  },
  {
    "objectID": "day6/index.html#adjusting-labels",
    "href": "day6/index.html#adjusting-labels",
    "title": "Reproducible data analysis",
    "section": "Adjusting labels",
    "text": "Adjusting labels\n\n\nWhen you “publish” your plot (this could be including it in a report for a class), it needs to be clearly labeled\n\nWhoever is reading your report won’t know what “lifeExp” means"
  },
  {
    "objectID": "day6/index.html#adjusting-labels-1",
    "href": "day6/index.html#adjusting-labels-1",
    "title": "Reproducible data analysis",
    "section": "Adjusting labels",
    "text": "Adjusting labels\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))"
  },
  {
    "objectID": "day6/index.html#adjusting-labels-2",
    "href": "day6/index.html#adjusting-labels-2",
    "title": "Reproducible data analysis",
    "section": "Adjusting labels",
    "text": "Adjusting labels\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )"
  },
  {
    "objectID": "day6/index.html#adjusting-labels-3",
    "href": "day6/index.html#adjusting-labels-3",
    "title": "Reproducible data analysis",
    "section": "Adjusting labels",
    "text": "Adjusting labels\n\n\nggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )"
  },
  {
    "objectID": "day6/index.html#saving-your-plot",
    "href": "day6/index.html#saving-your-plot",
    "title": "Reproducible data analysis",
    "section": "Saving your plot",
    "text": "Saving your plot\n\n\nIf you need to you can save your plot in R, and write it out as an image file\nUse the ggsave() function"
  },
  {
    "objectID": "day6/index.html#saving-your-plot-1",
    "href": "day6/index.html#saving-your-plot-1",
    "title": "Reproducible data analysis",
    "section": "Saving your plot",
    "text": "Saving your plot\n\ngapminder_asia_plot &lt;- ggplot(\n  gapminder_asia,\n  aes(\n    x = year,\n    y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) +\n  labs(\n    x = \"Year\",\n    y = \"Life Expectancy (years)\",\n    title = \"Figure 1\"\n  )"
  },
  {
    "objectID": "day6/index.html#saving-your-plot-2",
    "href": "day6/index.html#saving-your-plot-2",
    "title": "Reproducible data analysis",
    "section": "Saving your plot",
    "text": "Saving your plot\n\nggsave(plot = gapminder_asia_plot, file = \"gapminder_asia.pdf\")\n\n\nYou can also save .jpg, .png, etc."
  },
  {
    "objectID": "day6/index.html#summary",
    "href": "day6/index.html#summary",
    "title": "Reproducible data analysis",
    "section": "Summary",
    "text": "Summary\n\n\nThink about what you want your graph to show\nAesthetic mapping: How to represent the data visually\nGeometry: What shape to use for the plot\nBuild your plot using layers\nBasic recipe: ggplot(INPUT-DATA, aes(MAPPING)) + GEOMETRY"
  },
  {
    "objectID": "day6/index.html#project-description",
    "href": "day6/index.html#project-description",
    "title": "Reproducible data analysis",
    "section": "Project Description",
    "text": "Project Description\n\nThe final project is to analyze a dataset, including at least two graphs\n\nUse Quarto to write the report (we will learn how to do this in the next two classes)"
  },
  {
    "objectID": "day6/index.html#dataset",
    "href": "day6/index.html#dataset",
    "title": "Reproducible data analysis",
    "section": "Dataset",
    "text": "Dataset\n\nYou will choose a dataset from the Tidy Tuesday project to analyze\n\nTidy Tuesday releases a dataset once a week to practice data analysis\nPlease browse the Tidy Tuesday repo to choose a dataset"
  },
  {
    "objectID": "day6/index.html#example-dataset",
    "href": "day6/index.html#example-dataset",
    "title": "Reproducible data analysis",
    "section": "Example Dataset",
    "text": "Example Dataset\n\nWorld’s Oldest People\nThe README file in the dataset explains how to load it into R"
  },
  {
    "objectID": "day6/index.html#preparing-your-report",
    "href": "day6/index.html#preparing-your-report",
    "title": "Reproducible data analysis",
    "section": "Preparing your report",
    "text": "Preparing your report\n\nYou will use quarto to prepare your report\n\nWe will learn more about quarto next week, so you don’t need to worry about it for now.\n\nStart looking at the datasets so you can choose one to analyze.\nStart analyzing the dataset and practice visualizing the data"
  },
  {
    "objectID": "day6/index.html#due-dates",
    "href": "day6/index.html#due-dates",
    "title": "Reproducible data analysis",
    "section": "Due dates",
    "text": "Due dates\n\nThe report (report.qmd) is due 2025-07-30 11:59PM"
  },
  {
    "objectID": "day1/index.html#instructor-joel-nitta",
    "href": "day1/index.html#instructor-joel-nitta",
    "title": "Reproducible data analysis",
    "section": "Instructor: Joel Nitta",
    "text": "Instructor: Joel Nitta\n\n\n\nResearch topic 1: Ecology and evolution of ferns\n\nAlso teach Biodiversity and Japan\n\nResearch topic 2: Development of software for data science\nhttps://www.joelnitta.com"
  },
  {
    "objectID": "day1/index.html#instructor-joel-nitta-1",
    "href": "day1/index.html#instructor-joel-nitta-1",
    "title": "Reproducible data analysis",
    "section": "Instructor: Joel Nitta",
    "text": "Instructor: Joel Nitta\n\n\n\nBorn and raised in California\nFourth generation Japanese-American\nFirst came to Japan as high school exchange student"
  },
  {
    "objectID": "day1/index.html#ice-breaker",
    "href": "day1/index.html#ice-breaker",
    "title": "Reproducible data analysis",
    "section": "Ice-breaker",
    "text": "Ice-breaker\n\n\n\nAnswer the question: “Why are you interested in data analysis?”\nIntroduce yourself and discuss with your neighbor\n\n\n\n\n\nhttps://www.odelama.com/data-analysis/"
  },
  {
    "objectID": "day1/index.html#what-is-data-analysis",
    "href": "day1/index.html#what-is-data-analysis",
    "title": "Reproducible data analysis",
    "section": "What is data analysis?",
    "text": "What is data analysis?\n\nObtaining insight from data\nImportant for many careers (academic and industry)\n\n\nEmployment of data scientists is projected to grow 35% from 2022 to 2032, much faster than the average for all occupations.\n\n\nhttps://www.bls.gov/ooh/math/data-scientists.htm"
  },
  {
    "objectID": "day1/index.html#why-programming",
    "href": "day1/index.html#why-programming",
    "title": "Reproducible data analysis",
    "section": "Why programming?",
    "text": "Why programming?\nWho has used Excel? Who has used a programming language?\nWhat are the advantages and disadvantages of each for data analysis?\n\nDiscuss with your neighbor"
  },
  {
    "objectID": "day1/index.html#why-programming-1",
    "href": "day1/index.html#why-programming-1",
    "title": "Reproducible data analysis",
    "section": "Why programming?",
    "text": "Why programming?\n\nProgramming allows you to record every step of data analysis\n\nThis means you can repeat your analysis!\n\n\nIt takes some time to get used to, but eventually you will feel more comfortable with it because you can re-trace your steps and have confidence in your results."
  },
  {
    "objectID": "day1/index.html#why-reproducibility",
    "href": "day1/index.html#why-reproducibility",
    "title": "Reproducible data analysis",
    "section": "Why reproducibility?",
    "text": "Why reproducibility?\nWhen might you want to repeat an analysis? Why?\n\nDiscuss with your neighbor"
  },
  {
    "objectID": "day1/index.html#why-reproducibility-1",
    "href": "day1/index.html#why-reproducibility-1",
    "title": "Reproducible data analysis",
    "section": "Why reproducibility?",
    "text": "Why reproducibility?\n\nIf new data comes in and you need to update an analysis\nIf you want to double-check your own results\nIf you want to repeat somebody else’s analysis\nIf you switch between different projects and can’t remember exactly what you were doing"
  },
  {
    "objectID": "day1/index.html#goals-of-this-class",
    "href": "day1/index.html#goals-of-this-class",
    "title": "Reproducible data analysis",
    "section": "Goals of this class",
    "text": "Goals of this class\nThe goal of this class is to learn the fundamentals of reproducible data analysis by doing it yourself.\nBy the end of the course, you will be able to:\n\nload, clean, and visualize data using R\ntrack changes to code using Git and GitHub\nwrite a reproducible report using Quarto"
  },
  {
    "objectID": "day1/index.html#expectations-of-this-class",
    "href": "day1/index.html#expectations-of-this-class",
    "title": "Reproducible data analysis",
    "section": "Expectations of this class",
    "text": "Expectations of this class\n\nI expect you to participate in discussions\nI expect you to ask questions"
  },
  {
    "objectID": "day1/index.html#language-of-this-class",
    "href": "day1/index.html#language-of-this-class",
    "title": "Reproducible data analysis",
    "section": "Language of this class",
    "text": "Language of this class\n\nThis class is conducted in English\nBut, you can ask questions in Japanese and I will explain in Japanese if needed"
  },
  {
    "objectID": "day1/index.html#recommended-reading",
    "href": "day1/index.html#recommended-reading",
    "title": "Reproducible data analysis",
    "section": "Recommended Reading",
    "text": "Recommended Reading\n\nR for Data Science (2nd ed.). https://r4ds.hadley.nz/\n\nAvailable in Japanese from Amazon or O’Reilly\n\nHappy Git with R. https://happygitwithr.com/\nIntroduction to Reproducible Publications with RStudio https://carpentries-incubator.github.io/reproducible-publications-quarto/"
  },
  {
    "objectID": "day1/index.html#homework-assignments",
    "href": "day1/index.html#homework-assignments",
    "title": "Reproducible data analysis",
    "section": "Homework assignments",
    "text": "Homework assignments\n\nThere will be a homework assignment on GitHub for each class, starting next week.\nYou submit the assignment by making a commit in Git (more about this on Day 2)"
  },
  {
    "objectID": "day1/index.html#final-project",
    "href": "day1/index.html#final-project",
    "title": "Reproducible data analysis",
    "section": "Final project",
    "text": "Final project\n\nYou will need to analyze a dataset of your own choosing for your final project, due 2025-07-30 11:59 PM\nThe last homework assignment is due 2025-07-16 11:59 PM, so you have 2 weeks to work on the final project"
  },
  {
    "objectID": "day1/index.html#schedule",
    "href": "day1/index.html#schedule",
    "title": "Reproducible data analysis",
    "section": "Schedule",
    "text": "Schedule\n\nDay 1 (2025-06-12): Introduction: Why code? Why reproducibility?\nDay 2 (2025-06-19): Git and GitHub\nDay 3 (2025-06-26): Basic usage of R and RStudio\nDay 4 (2025-07-03): Data loading and tidying with tidyverse"
  },
  {
    "objectID": "day1/index.html#schedule-contd",
    "href": "day1/index.html#schedule-contd",
    "title": "Reproducible data analysis",
    "section": "Schedule (cont’d)",
    "text": "Schedule (cont’d)\n\nDay 5 (Media Day): Joining data\nDay 6 (2025-07-10): Data visualization with ggplot2\nDay 7 (2025-07-17): Writing documents with Quarto\nDay 8 (2025-07-24): Quarto, part II"
  },
  {
    "objectID": "day1/index.html#grades",
    "href": "day1/index.html#grades",
    "title": "Reproducible data analysis",
    "section": "Grades",
    "text": "Grades\n\nHomework (4 assignments) 50%\nFinal report 50%\n\nNo late submissions allowed\nOnly the top three homework assignments will be used for grading (so you get one free exception if you forget to turn it in etc.)"
  },
  {
    "objectID": "day1/index.html#course-website-and-slides",
    "href": "day1/index.html#course-website-and-slides",
    "title": "Reproducible data analysis",
    "section": "Course website and slides",
    "text": "Course website and slides\n\nAll slides (and other info) available athttps://data-analysis-chiba.github.io/"
  },
  {
    "objectID": "day1/index.html#moodle",
    "href": "day1/index.html#moodle",
    "title": "Reproducible data analysis",
    "section": "Moodle",
    "text": "Moodle\n\nAssignments (GitHub classroom repos) will be posted on Moodle\nCheck Moodle every week"
  },
  {
    "objectID": "day1/index.html#office-hours",
    "href": "day1/index.html#office-hours",
    "title": "Reproducible data analysis",
    "section": "Office hours",
    "text": "Office hours\nBy appointment: contact me at joelnitta@chiba.u-jp"
  },
  {
    "objectID": "day1/index.html#questions",
    "href": "day1/index.html#questions",
    "title": "Reproducible data analysis",
    "section": "Questions?",
    "text": "Questions?"
  },
  {
    "objectID": "day1/index.html#ai",
    "href": "day1/index.html#ai",
    "title": "Reproducible data analysis",
    "section": "AI",
    "text": "AI\n\nWho has used AI (for example, ChatGPT) before?\n\nhttps://chat.openai.com/\n\nYou may use AI for your homework and final project\nBut first you need to know how to use it"
  },
  {
    "objectID": "day1/index.html#ai-1",
    "href": "day1/index.html#ai-1",
    "title": "Reproducible data analysis",
    "section": "AI",
    "text": "AI\n\nAI makes statistical predictions about words based on training data (it does not “think”)\nAI is designed to produce sentences that sound as natural as possible\nAI may lie to you or make up facts (called “hallucination”; this is especially common when it lacks adequate training data)"
  },
  {
    "objectID": "day1/index.html#ai-policies-dos",
    "href": "day1/index.html#ai-policies-dos",
    "title": "Reproducible data analysis",
    "section": "AI policies (DOs)",
    "text": "AI policies (DOs)\n\nDo try by yourself first (without AI)\nDo ask it detailed, specific questions (prompts)\n\nhttps://www.promptingguide.ai/ (日本語)\n\nDo double-check the results: does the AI’s code produce the expected result?\nDo make sure you understand the code that the AI provides"
  },
  {
    "objectID": "day1/index.html#ai-policies-donts",
    "href": "day1/index.html#ai-policies-donts",
    "title": "Reproducible data analysis",
    "section": "AI policies (DON’Ts)",
    "text": "AI policies (DON’Ts)\n\nDon’t copy-paste directly from AI for your report.\n\nTyping the code yourself will help you remember it and understand what you are doing. Copy-pasting text for a paper is plagiarism.\n\nDon’t submit an answer from AI without trying/checking it yourself first\n\nThe AI could very well be wrong!"
  },
  {
    "objectID": "day1/index.html#setting-up-rstudio",
    "href": "day1/index.html#setting-up-rstudio",
    "title": "Reproducible data analysis",
    "section": "Setting up RStudio",
    "text": "Setting up RStudio\n\nInstall R\nInstall RStudio"
  },
  {
    "objectID": "day1/index.html#setting-up-git",
    "href": "day1/index.html#setting-up-git",
    "title": "Reproducible data analysis",
    "section": "Setting up Git",
    "text": "Setting up Git\nWe will follow instructions for Day 2 to set up Git"
  }
]